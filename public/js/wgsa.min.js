$(function(){"use strict";if(WGST.speak=!1,WGST.speak){var e=new SpeechSynthesisUtterance("Welcome to WGSA");window.speechSynthesis.speak(e)}window.onerror=function(e){"undefined"!=typeof e.message?console.error("[WGST][Error] "+e.message):(console.error("[WGST][Error]"),console.dir(e)),u(e)},WGST.panels={assembly:{top:80,left:90},collection:{top:80,left:90},collectionTree:{top:120,left:180},mergedCollectionTree:{top:120,left:180},representativeCollectionTree:{top:80,left:90},assemblyUploadNavigator:{top:70,left:110},assemblyUploadAnalytics:{top:70,left:726},assemblyUploadMetadata:{top:225,left:110},assemblyUploadProgress:{top:80,left:90},map:{top:"15%",left:"20%"}},WGST.assembly={analysis:{UPLOAD_OK:"UPLOAD_OK",METADATA_OK:"METADATA_OK",MLST_RESULT:"MLST_RESULT",PAARSNP_RESULT:"PAARSNP_RESULT",FP_COMP:"FP_COMP",CORE:"CORE"}},WGST.collection={analysis:{COLLECTION_TREE:"COLLECTION_TREE",CORE_MUTANT_TREE:"CORE_MUTANT_TREE"},representative:{tree:{},metadata:{}}},WGST.upload={collection:{},assembly:{}},WGST.settings=WGST.settings||{},WGST.settings.representativeCollectionId="1fab53b0-e7fe-4660-b34e-21d501017397",WGST.antibioticNameRegex=/[\W]+/g,WGST.socket={connection:io.connect(window.WGST.config.socketAddress),roomId:""},WGST.geo={map:{canvas:{},options:{zoom:5,center:new google.maps.LatLng(48.6908333333,9.14055555556),mapTypeId:google.maps.MapTypeId.ROADMAP,minZoom:2,maxZoom:11},markers:{assembly:{},metadata:{},representativeTree:[],group:{}},markerBounds:new google.maps.LatLngBounds,searchBoxBounds:new google.maps.LatLngBounds,init:function(){WGST.geo.map.canvas=new google.maps.Map($(".wgst-map")[0],WGST.geo.map.options),WGST.geo.map.markers.metadata=new google.maps.Marker({position:new google.maps.LatLng(51.511214,-.119824),map:WGST.geo.map.canvas,visible:!1}),google.maps.event.addListener(WGST.geo.map.canvas,"bounds_changed",function(){WGST.geo.map.searchBoxBounds=WGST.geo.map.canvas.getBounds()})}},placeSearchBox:{}},WGST.alert={status:{SUCCESS:"success",FAILURE:"failure"}},WGST.init={all:{SOCKET_CONNECT:"Socket connected",SOCKET_ROOM_ID:"Received socket room id",REPRESENTATIVE_COLLECTION_TREE_METADATA:"Loaded representative collectiontree metadata"},loaded:[]},WGST.dragAndDrop=WGST.dragAndDrop||{},WGST.dragAndDrop.files=[],WGST.dragAndDrop.fastaFileNameRegex=/^.+(.fa|.fas|.fna|.ffn|.faa|.frn|.fasta|.contig)$/i;var t=function(e){if(WGST.init.loaded.push(e),WGST.init.loaded.length===Object.keys(WGST.init.all).length){var t=$(".wgst-init");t.find(".wgst-init-status").html(""),setTimeout(function(){t.fadeOut("fast")},500),delete WGST.init}},a=function(e){var t=function(e){var t=$('[data-panel-name="'+e+'"] .wgst-panel-body-content');t.css("visibility","visible")};if($.isArray(e))for(var a,s=e.length;0!==s;)s-=1,a=e[s],t(a);else t(e)},s=function(e){var t=function(e){$('[data-panel-name="'+e+'"]').addClass("wgst-panel--visible").css("visibility","visible")};if($.isArray(e))for(var a,s=e.length;0!==s;)s-=1,a=e[s],t(a);else t(e)},l=function(e){var t=$('[data-panel-name="'+e+'"] .wgst-panel-loading');t.show()},o=function(e){var t=$('[data-panel-name="'+e+'"] .wgst-panel-loading');t.hide()};$(".tree-controls-draw-subtree").on("click",function(){var e=$(this).closest(".wgst-panel").attr("data-collection-id"),t=$(this).attr("data-selected-node");console.log("collectionId: "+e),console.log("selectedNode: "+t),WGST.collection[e].tree.canvas.redrawFromBranch(t)}),$(".collection-view-horizontal-split").on("click",function(){$(".wgst-paper__collection-tree"),$(".wgst-paper__collection-metadata")});var n=function(e){var t=$('[data-panel-name="'+e+'"]');return t.hasClass("wgst-panel--active")?!0:!1},c=function(e,t){var a=function(e){var t=$('[data-panel-name="'+e+'"]');t.css("top",WGST.panels[e].top),t.css("left",WGST.panels[e].left),t.css("visibility","hidden"),t.show(),t.addClass("wgst-panel--active")};if($.isArray(e))for(var s,l=e.length;0!==l;)l-=1,s=e[l],a(s);else a(e);"function"==typeof t&&t()},r=function(e){var t=function(e){{var t=$('[data-panel-name="'+e+'"]');t.find(".wgst-panel-body-content")}t.hide(),t.removeClass("wgst-panel--active"),t.removeClass("wgst-panel--visible")};if($.isArray(e))for(var a,s=e.length;0!==s;)s-=1,a=e[s],t(a);else t(e)},d=function(e){var t=0;$(".wgst-panel").each(function(){var e=parseInt($(this).css("zIndex"),10);e>t&&(t=e)}),$('[data-panel-name="'+e+'"]').css("zIndex",t+1)},m=function(e){c(e),o(e),a(e),s(e),d(e)},p=function(e){console.log("[WGST] Getting representative collection tree metadata"),$.ajax({type:"GET",url:"/api/collection/representative/metadata",datatype:"json"}).done(function(t){console.log("[WGST] Got representative collection tree metadata"),console.dir(t),e(null,t)}).fail(function(t,a,s){console.error("[WGST][Error] ✗ Failed to get representative collection tree metadata"),console.error(a),console.error(s),console.error(t),e(a,null)})},g=function(e,t,a){if(console.error("[WGST][Error] ✗ "+e),WGST.speak){var e=new SpeechSynthesisUtterance(e);window.speechSynthesis.speak(e),WGST.speak=!1}var s=$(".wgst-alert");s.attr("class","wgst-alert").addClass("wgst-alert__"+t),s.html(e).show(),a&&setTimeout(function(){s.fadeOut("fast")},3e3)},u=function(){var e=$(".wgst-notification__error");e.html("Please refresh your page.").show()};!function(){$(".wgst-draggable").draggable({handle:".wgst-draggable-handle",appendTo:"body",scroll:!1,start:function(){F=!0},stop:function(e,t){F=!1;var a=t.helper.attr("data-panel-name");WGST.panels[a].top=t.position.top,WGST.panels[a].left=t.position.left}}),$(".assembly-list-slider").slider({range:"max",min:1,max:10,value:1,animate:"fast",slide:function(e,t){$(".selected-assembly-counter").text(t.value)}}),$(".add-data button").popover({html:!0,placement:"bottom",title:"Add your data",content:'<div class="upload-data"><span>You can drag and drop your CSV files anywhere on the map.</span><input type="file" id="exampleInputFile"></div>'}),$(".timeline-toggle-button").on("click",function(){$(this).hasClass("active")?$("#timeline").hide():($("#timeline").css("bottom","0"),$("#timeline").show())}),$(".graph-toggle-button").on("click",function(){$(this).hasClass("active")?$(".tree-panel").hide():$(".tree-panel").show()}),$(".all-panels-toggle-button").on("click",function(){$(this).hasClass("active")?$(".wgst-panel--active").hide():$(".wgst-panel--active").show()}),$(".graph-toggle-button").trigger("click"),WGST.socket.connection.on("roomId",function(e){console.log("[WGST][Socket.io] Received room uuid"),console.log("[WGST][Socket.io] Ready"),WGST.socket.roomId=e,t(WGST.init.all.SOCKET_ROOM_ID)}),WGST.socket.connection.emit("getRoomId"),WGST.socket.connection.on("connect",function(){"undefined"!=typeof WGST.init&&t(WGST.init.all.SOCKET_CONNECT)}),WGST.socket.connection.on("error",function(){g("Unexpected error has occured.",WGST.alert.status.FAILURE,!1)}),WGST.socket.connection.on("disconnect",function(){g("Disconnected from the server.",WGST.alert.status.FAILURE,!1)}),WGST.socket.connection.on("reconnecting",function(){g("Reconnecting to the server...",WGST.alert.status.FAILURE,!1)}),WGST.socket.connection.on("reconnect",function(){g("Reconnected to the server.",WGST.alert.status.SUCCESS,!0)}),WGST.socket.connection.on("reconnect_failed",function(){g("Failed to reconnect to the server.",WGST.alert.status.FAILURE,!1)}),p(function(e,a){return e?void u(e):(WGST.collection.representative.metadata=a,c("representativeCollectionTree",function(){l("representativeCollectionTree"),At()}),void t(WGST.init.all.REPRESENTATIVE_COLLECTION_TREE_METADATA))})}();var b=function(e,t){var a,s,l,o,n,i,c,r="";for(s in t)if(t.hasOwnProperty(s)){a=t[s],l="  ",i="";for(o in a)a.hasOwnProperty(o)&&(n="","undefined"!=typeof e[s]&&"undefined"!=typeof e[s][o]?(c=e[s][o].resistanceState,n+="RESISTANT"===c?"⦿":"SENSITIVE"===c?"○":"○"):n+="○",i+=n);l+=i,r+=l}return r},y=function(e,t){var a,s,l,o,n,i,c,r="";for(s in t)if(t.hasOwnProperty(s)){a=t[s],l='<div class="antibiotic-group" data-antibiotic-group-name="'+s+'">{{antibioticsHtml}}</div>',i="";for(o in a)a.hasOwnProperty(o)&&(n="","undefined"!=typeof e[s]?"undefined"!=typeof e[s][o]?(c=e[s][o].resistanceState,n="RESISTANT"===c?n+'<span class="antibiotic resistance-fail" data-antibiotic-name="'+o+'" data-antibiotic-resistance-state="'+c+'" data-toggle="tooltip" data-placement="top" title="'+o+'"></span>':"SENSITIVE"===c?n+'<span class="antibiotic resistance-success" data-antibiotic-name="'+o+'" data-antibiotic-resistance-state="'+c+'" data-toggle="tooltip" data-placement="top" title="'+o+'"></span>':n+'<span class="antibiotic resistance-unknown" data-antibiotic-name="'+o+'" data-antibiotic-resistance-state="'+c+'" data-toggle="tooltip" data-placement="top" title="'+o+'"></span>'):(n=n+'<span class="antibiotic resistance-unknown" data-antibiotic-name="'+o+'" data-antibiotic-resistance-state="'+c+'" data-toggle="tooltip" data-placement="top" title="'+o+'"></span>',console.warn("[!] Assembly resistatance profile has no antibiotic: "+o)):(n=n+'<span class="antibiotic no-resistance-data" data-antibiotic-name="'+o+'" data-antibiotic-resistance-state="'+c+'" data-toggle="tooltip" data-placement="top" title="'+o+'"></span>',console.warn("[!] Assembly resistatance profile has no antibiotic group: "+s)),i+=n);l=l.replace(/{{antibioticsHtml}}/g,i),r+=l}return r},f=function(e,t){console.log("[WGST] Rendering assembly analysis list");for(var a,s,l,o,n,i,c,r=WGST.collection[e].assemblies,d=WGST.collection[e].sortedAssemblyIds,m=0,p=$(".collection-assembly-list"),g=$(".collection-assembly-list-full"),u=document.createDocumentFragment();m<d.length;)a=d[m],console.log("[?] Assembly resistance profile:"),console.dir(r[a].PAARSNP_RESULT.paarResult.resistanceProfile),s=r[a].PAARSNP_RESULT.paarResult.resistanceProfile,l=y(s,t),o=yt(r[a].FP_COMP.scores),WGST.collection[e].assemblies[a].FP_COMP.topScore=o,n=r[a].ASSEMBLY_METADATA.geography.position.latitude,i=r[a].ASSEMBLY_METADATA.geography.position.longitude,c=$((m%2===0?'<div class="row-stripe assembly-list-item" data-assembly-id="'+r[a].FP_COMP.assemblyId+'">':'<div class="assembly-list-item" data-assembly-id="'+r[a].FP_COMP.assemblyId+'">')+'<div class="show-on-tree-radio-button assembly-list-header-tree"><input type="radio" data-reference-id="'+o.referenceId+'" data-assembly-id="'+r[a].FP_COMP.assemblyId+'" name="optionsRadios" value="'+o.referenceId+'"></div><div class="show-on-map-checkbox assembly-list-header-map"><input type="checkbox" data-reference-id="'+o.referenceId+'" data-assembly-id="'+r[a].FP_COMP.assemblyId+'" data-latitude="'+n+'" data-longitude="'+i+'"></div><div class="assembly-list-header-id"><a href="#" class="open-assembly-button" data-assembly-id="'+r[a].FP_COMP.assemblyId+'" title="">'+r[a].ASSEMBLY_METADATA.userAssemblyId+'</a></div><div class="assembly-list-header-nearest-representative"><a href="#" class="show-on-representative-tree" data-assembly-id="'+r[a].FP_COMP.assemblyId+'">'+o.referenceId+"</a> ("+Math.round(100*o.score.toFixed(2))+'%)</div><div class="assembly-list-header-st">'+(0===r[a].MLST_RESULT.stType.length?"Not found":r[a].MLST_RESULT.stType)+'</div><div class="assembly-list-header-resistance-profile"><div class="assembly-resistance-profile-container">'+l+"</div></div></div>"),u.appendChild(c[0]),m+=1;p[0].appendChild(u.cloneNode(!0)),g[0].appendChild(u.cloneNode(!0)),$('.antibiotic[data-toggle="tooltip"]').tooltip()},h=function(e){var t=$(".wgst-navigation-item__"+e);return t.hasClass("wgst-navigation-item--active")?!0:!1},v=function(e){var t=$(".wgst-navigation-item__"+e);h(e)||t.addClass("wgst-navigation-item--active")},T=function(e){var t=$(".wgst-navigation-item__"+e);h(e)&&t.removeClass("wgst-navigation-item--active")},S=function(e){console.log("[WGST] Clearing "+e+" collection assembly list"),$(".wgst-panel__collection .collection-assembly-list").html("")},w=function(e,t){var a="collectionTree__"+e+"__"+t,s=$('.wgst-panel[data-panel-name="'+a+'"]');s.remove()},_=function(e){var t=WGST.collection[e].tree;$.each(t,function(t){w(e,t)})},G=function(e){"undefined"!=typeof WGST.collection[e]&&(console.log("[WGST] Closing collection "+e),S(e),r(["collection","collectionTree"]),_(e),window.history.replaceState("Object","WGST Collection",""),$(".wgst-collection-controls__show-tree .btn-group").html(""),T("collection"),delete WGST.collection[e])},W=function(e,t){WGST.collection[e]={assemblies:{},tree:{}},$.isArray(t)&&t.forEach(function(t){WGST.collection[e].tree[t]={}})},k=function(e){var t=WGST.collection[e].tree;$.each(t,function(t){C(e,t)})},C=function(e,t){var a,s=WGST.collection[e].tree[t],l=s.name,o='<button type="button" class="btn btn-sm btn-default wgst-collection-control__show-tree" data-tree-type="{{collectionTreeType}}" data-collection-id="{{collectionId}}">{{collectionTreeName}}</button>',n=$(".wgst-collection-controls__show-tree .btn-group");a=o.replace(/{{collectionTreeType}}/g,t),a=a.replace(/{{collectionId}}/g,e),a=a.replace(/{{collectionTreeName}}/g,l),n.append($(a))},A=function(e,t){var a=WGST.collection[e].tree;$.each(a,function(a){M(e,a,t)})},E=function(e,t,a){W(e),WGST.collection[e].assemblies=t,$.each(a,function(t,a){WGST.collection[e].tree[t]={type:t,data:a.data,name:a.name}})},x=function(e){if(console.log("[WGST] Getting collection "+e),WGST.speak){var t=new SpeechSynthesisUtterance("Loading collection");window.speechSynthesis.speak(t)}G(e);var n=$(".wgst-panel__collection");n.attr("data-panel-id","collection_"+e),n.attr("data-collection-id",e),n.find(".collection-details").attr("data-collection-id",e),n.find(".wgst-collection-control__show-tree").attr("collection-id",e),c("collection",function(){l("collection"),s("collection")}),$.ajax({type:"POST",url:"/collection/",datatype:"json",data:{collectionId:e}}).done(function(t){if(console.log("[WGST] Got collection "+e+" data"),console.dir(t),Object.keys(t).length>0){WGST.antibiotics=t.antibiotics,E(e,t.collection.assemblies,t.collection.tree),A(e),k(e),vt(e);var s=WGST.collection[e].assemblies,l=[],n=[];$.each(WGST.collection[e].tree.CORE_TREE_RESULT.leavesOrder,function(e,t){l.push(s[t.id]),n.push(t.id)}),WGST.collection[e].sortedAssemblyIds=n,f(e,WGST.antibiotics),console.log("[WGST] Collection "+e+" has "+Object.keys(s).length+" assemblies");var i=Object.keys(s),c=i[i.length-1],r=s[c].FP_COMP.timestamp;$(".assembly-created-datetime").attr("title",moment(r,"YYYYMMDD_HHmmss").format("YYYY-MM-DD HH:mm:ss")),$(".timeago").timeago(),$(".wgst-stats__collection .wgst-stats-value__total-number-of-assemblies").html(l.length),$(".wgst-stats__collection .wgst-stats-value__number-of-displayed-assemblies").html(l.length),$(".wgst-stats__collection .wgst-stats-value__number-of-selected-assemblies").html("0"),$(".wgst-stats__collection .wgst-stats-value__created-on").html(moment(new Date).format("DD/MM/YYYY")),$(".wgst-stats__collection .wgst-stats-value__author").html("Anonymous"),$(".wgst-stats__collection .wgst-stats-value__privacy").html("Public"),o("collection"),a("collection"),Object.keys(WGST.collection[e].assemblies).length>100&&(console.log("[WGST] Collection "+e+" will be displayed fullscreen"),xt(e)),v("collection"),window.history.replaceState("Object","WGST Collection","/collection/"+e)}}).fail(function(e,t,a){console.log("[WGST][ERROR] Failed to get collection id"),console.error(t),console.error(a),console.error(e),u(t)})};"undefined"!=typeof WGST.requestedCollectionId&&x(WGST.requestedCollectionId),$(".tree-controls-show-labels").on("click",function(){var e=$(this).closest(".wgst-panel").attr("data-collection-id");WGST.collection[e].tree.CORE_TREE_RESULT.canvas.displayLabels()}),$(".tree-controls-hide-labels").on("click",function(){var e=$(this).closest(".wgst-panel").attr("data-collection-id");WGST.collection[e].tree.CORE_TREE_RESULT.canvas.hideLabels()});var R=function(e,t){for(var a,s,l,o,n={},i=WGST.collection[e].assemblies,c=0;c<t.length;c++)a=t[c],s=i[a].ASSEMBLY_METADATA.geography.position.latitude,l=i[a].ASSEMBLY_METADATA.geography.position.longitude,o=new google.maps.LatLng(s,l),"undefined"==typeof n[o.toString()]&&(n[o.toString()]=[]),n[o.toString()].push(a);return console.log("[WGST] Grouped assemblies by position:"),console.dir(n),n},O=function(e,t,a,s){var l="//chart.apis.google.com/chart?chst=d_map_pin_letter&chld="+s+"|00FFFF|000000",o=new google.maps.LatLng(t,a),n=o.toString();WGST.geo.map.markers.group[n]={assemblyIds:e,marker:{}},WGST.geo.map.markers.group[n].marker=new google.maps.Marker({position:new google.maps.LatLng(t,a),map:WGST.geo.map.canvas,icon:l,optimized:!0}),google.maps.event.addListener(WGST.geo.map.markers.group[n].marker,"click",function(){1===WGST.geo.map.markers.group[n].assemblyIds.length&&Ct(WGST.geo.map.markers.group[n].assemblyIds[0])})},I=function(){var e,t,a=WGST.geo.map.markers.group;for(e in a)t=a[e].marker,t.setMap(null),delete WGST.geo.map.markers.group[e];$(".show-all-assemblies-on-map").prop("checked",!1)},P=function(e,t){var a=new google.maps.LatLngBounds;if(I(),t.length>0){var s,l,o,n,i,c=R(e,t),r=WGST.collection[e].assemblies;for(s in c)l=c[s],o=l[0],n=r[o].ASSEMBLY_METADATA.geography.position.latitude,i=r[o].ASSEMBLY_METADATA.geography.position.longitude,O(l,n,i,l.length),a.extend(new google.maps.LatLng(n,i))}a.isEmpty()?(WGST.geo.map.canvas.setCenter(new google.maps.LatLng(48.6908333333,9.14055555556)),WGST.geo.map.canvas.setZoom(5)):(WGST.geo.map.canvas.panToBounds(a),WGST.geo.map.canvas.fitBounds(a))},L=function(e,t){var a=WGST.collection[e].assemblies;$('.collection-assembly-list .assembly-list-item [type="radio"]').prop("checked",!1),$.each(a,function(e){-1!==$.inArray(e,t)?($('.collection-assembly-list .assembly-list-item[data-assembly-id="'+e+'"]').addClass("row-selected"),$('.collection-assembly-list .assembly-list-item[data-assembly-id="'+e+'"] [type="checkbox"]').prop("checked",!0)):($('.collection-assembly-list .assembly-list-item[data-assembly-id="'+e+'"]').removeClass("row-selected"),$('.collection-assembly-list .assembly-list-item[data-assembly-id="'+e+'"] [type="checkbox"]').prop("checked",!1))}),P(e,t),1===t.length&&$('.collection-assembly-list .assembly-list-item[data-assembly-id="'+t+'"] [type="radio"]').prop("checked",!0)};$("body").on("change",".wgst-tree-control__change-node-label",function(){var e,t=$(this),a=t.closest(".wgst-panel").attr("data-collection-id"),s=t.closest(".wgst-panel").attr("data-collection-tree-type"),l=WGST.collection[a].tree[s].canvas,o=WGST.collection[a].assemblies;if("1"===t.val())for(e in o)o.hasOwnProperty(e)&&l.branches[e]&&l.branches[e].leaf&&(l.branches[e].label=o[e].ASSEMBLY_METADATA.userAssemblyId);else if("2"===t.val())for(e in o)o.hasOwnProperty(e)&&l.branches[e]&&l.branches[e].leaf&&(l.branches[e].label=WGST.collection[a].assemblies[e].FP_COMP.topScore.referenceId);else if("3"===t.val())for(e in o)o.hasOwnProperty(e)&&l.branches[e]&&l.branches[e].leaf&&(l.branches[e].label=0===o[e].MLST_RESULT.stType.length?"Not found":o[e].MLST_RESULT.stType);else if("4"===t.val()){var n,i;for(e in o)o.hasOwnProperty(e)&&(n=o[e].PAARSNP_RESULT.paarResult.resistanceProfile,i=b(n,WGST.antibiotics),l.branches[e]&&l.branches[e].leaf&&(l.branches[e].label=i))}else if("5"===t.val())for(e in o)o.hasOwnProperty(e)&&l.branches[e]&&l.branches[e].leaf&&(l.branches[e].label=o[e].ASSEMBLY_METADATA.geography.address);l.draw()}),$("body").on("change",".wgst-tree-control__change-node-colour",function(){var e,t=$(this).find("option:selected"),a=t.closest(".wgst-panel").attr("data-collection-id"),s=t.closest(".wgst-panel").attr("data-collection-tree-type"),l=WGST.collection[a].tree[s].canvas,o=WGST.collection[a].assemblies;if("0"===t.val())for(e in o)o.hasOwnProperty(e)&&l.setNodeColourAndShape(e,"#ffffff");else{var n,i;for(e in o)o.hasOwnProperty(e)&&(n=o[e].PAARSNP_RESULT.paarResult.ungroupedResistanceProfile,i=n[t.text()],"undefined"!=typeof i?l.branches[e]&&l.branches[e].leaf&&("RESISTANT"===i.resistanceState?l.setNodeColourAndShape(e,"#ff0000"):"SENSITIVE"===i.resistanceState?l.setNodeColourAndShape(e,"#4dbd33"):"UNKNOWN"===i.resistanceState&&l.setNodeColourAndShape(e,"#ffffff")):l.branches[e]&&l.branches[e].leaf&&l.setNodeColourAndShape(e,"#ffffff"))}}),$("body").on("change",".wgst-tree-control__change-tree-type",function(){var e,t=$(this).find("option:selected"),a=t.closest(".wgst-panel").attr("data-collection-id"),s=t.closest(".wgst-panel").attr("data-collection-tree-type");e=WGST.collection[a].tree[s].canvas,e.setTreeType(t.val())});var M=function(e,t,a){console.log("[WGST] Rendering "+e+" collection "+t+" tree");var s,l,n="collectionTree__"+e+"__"+t,i=$('.wgst-template[data-template-id="collectionTreePanel"]').html(),r=Handlebars.compile(i),d=WGST.collection[e].tree[t].name,m={attributePanelId:n,attributeCollectionId:e,attributeCollectionTreeType:t,collectionTreeTitle:d};"undefined"!=typeof a&&$.extend(m,a),s=r(m),$("body").prepend(s),l=$('.wgst-panel[data-panel-name="'+n+'"]'),WGST.panels[n]=WGST.panels.collectionTree,c(n),l.draggable({handle:l.find(".wgst-draggable-handle"),appendTo:"body",scroll:!1,stop:function(e,t){var a=t.helper.attr("data-panel-name");WGST.panels[a].top=t.position.top,WGST.panels[a].left=t.position.left}});var p="phylocanvas_"+e+"_"+t;l.find(".wgst-tree-content").attr("id",p),l.find(".wgst-tree-content").attr("data-collection-tree-type",t),o(n);var g,u=WGST.collection[e].tree[t],b=WGST.collection[e].assemblies;u.canvas=new PhyloCanvas.Tree(document.getElementById(p),{history_collapsed:!0}),u.canvas.parseNwk(u.data),u.canvas.treeType="rectangular";var y=u.canvas;y.on("selected",function(t){var a=t.nodeIds;"string"==typeof a&&(a=[a]),L(e,a)});for(g in b)b.hasOwnProperty(g)&&y.branches[g].leaf&&(y.branches[g].label=b[g].ASSEMBLY_METADATA.userAssemblyId);y.resizeToContainer(),y.drawn=!1,y.draw();var f=y.leaves;f.sort(function(e,t){return e.centery-t.centery}),u.leavesOrder=f;var h=u.data;for(g in b)b.hasOwnProperty(g)&&(h=h.replace(g,b[g].ASSEMBLY_METADATA.userAssemblyId));console.debug("» [WGST][DEV] Parsed Newick String:"),console.log("» Uncomment to see."),WGST.collection[e].tree[t].newickStringWithLabels=h,Tt(l.find(".wgst-tree-control__change-node-colour")),y.resizeToContainer(),y.drawn=!1,y.draw()};WGST.geo.map.init();var N=function(e){var t=WGST.collection[e].tree.CORE_TREE_RESULT.canvas;t.selectNodes("")};$(".tree-controls-select-none").on("click",function(){var e=$(this).closest(".wgst-panel").attr("data-collection-id");N(e)}),$(".tree-controls-select-all").on("click",function(){for(var e,t=$(this).closest(".wgst-panel").attr("data-collection-id"),a=WGST.collection[t].tree.CORE_TREE_RESULT.canvas,s=a.leaves,l=s.length,o=[];0!==l;)l-=1,e=s[l].id,o.push(e);a.root.setSelected(!0,!0),a.draw(),D(t,o)});var U,D=function(e,t){WGST.collection[e].geo=WGST.collection[e].geo||{};for(var a=(WGST.collection[e].tree.canvas,WGST.collection[e].geo.markers),s=a.length;0!==s;)s-=1,a[s].setMap(null);if(WGST.collection[e].geo.markers=[],WGST.geo.map.markerBounds=new google.maps.LatLngBounds,t.length>0){for(var l=t.length,o="",n={},i={},c={};0!==l;)if(l-=1,o=t[l],n=WGST.collection[e].assemblies[o].ASSEMBLY_METADATA,i=n.geography.position.latitude,c=n.geography.position.longitude,i&&c){console.log("[WGST] Marker's latitude: "+i),console.log("[WGST] Marker's longitude: "+c);var r=new google.maps.Marker({position:new google.maps.LatLng(i,c),map:WGST.geo.map.canvas,icon:"http://maps.google.com/mapfiles/ms/icons/blue-dot.png",optimized:!0});WGST.collection[e].assemblies[o].geo=WGST.collection[e].assemblies[o].geo||{},WGST.collection[e].assemblies[o].geo.marker=r,WGST.collection[e].geo.markers.push(t),WGST.geo.map.markerBounds.extend(r.getPosition())}}else WGST.geo.map.canvas.panTo(new google.maps.LatLng(48.6908333333,9.14055555556)),WGST.geo.map.canvas.setZoom(5)},F=!1,B=!1;!function(){$('[data-wgst-js="ring"]').draggable({appendTo:"body",scroll:!1,containment:"window"}),$(".wgst-ring-content").on("mouseover",function(){F===!1&&(U=setTimeout(function(){"undefined"!=typeof U&&F===!1&&(U=void 0,$(".wgst-panel--visible").fadeOut())},300))}),$(".wgst-ring-content").on("mouseout",function(){F===!1&&B===!1&&(U=void 0,$(".wgst-panel--visible").fadeIn())}),$('[data-wgst-js="ring"]').on("mousedown",function(){console.log("mouse down"),U=void 0,F=!0,B===!1&&$(".wgst-ring-content").css("background-color","#999")}),$('[data-wgst-js="ring"]').on("mouseup",function(){console.log("mouse up"),U=void 0,F=!1,B===!1&&$(".wgst-ring-content").css("background-color","")}),$(".wgst-ring-content").on("click",function(){console.log("ring click"),B===!1?(B=!0,$(this).addClass("wgst-ring-fixed"),$(".wgst-panel--visible").fadeOut()):(B=!1,$(this).removeClass("wgst-ring-fixed"))}),$(".wgst-ring-content").on("mousedown",function(e){console.log("mouse down"),e.stopPropagation()})}();var j=function(e,t){for(var a,s=t,l='<option value="{{year}}">{{year}}</option>',o="";s!==e-1;)a=l.replace(/{{year}}/g,s),o+=a,s-=1;return o},z=function(){for(var e,t=0,a=["January","February","March","April","May","June","July","August","September","October","November","December"],s='<option value="{{monthCounter}}">{{month}}</option>',l="";t<a.length;)e=s.replace(/{{month}}/g,a[t]),e=e.replace(/{{monthCounter}}/g,t),l+=e,t+=1;return l},Y=function(e,t){if("undefined"==typeof e||"undefined"==typeof t)return"";for(var a,s=q(e,t),l=0,o='<option value="{{day}}">{{day}}</option>',n="";s>l;)l+=1,a=o.replace(/{{day}}/g,l),n+=a;return n},q=function(e,t){return 32-new Date(e,t,32).getDate()},H=function(e,t,a){e.html("").append($('<option value="-1">Choose day</option>')).append(Y(t,a))};$(".assembly-metadata-list-container").on("change",".assembly-timestamp-input",function(){var e=$(this),t=e.attr("data-file-id"),a=e.attr("data-file-name"),s=$('.assembly-timestamp-input-year[data-file-name="'+a+'"]').val(),l=$('.assembly-timestamp-input-month[data-file-name="'+a+'"]').val(),o=$('.assembly-timestamp-input-day[data-file-name="'+a+'"]'),n=o.val(),i=e.attr("data-timestamp-input");("year"===i||"month"===i)&&"-1"!==s&&"-1"!==l&&(H(o,s,l),"-1"!==n&&o.find('option:contains("'+n+'")').prop("selected",!0)),"year"===i?$('.assembly-metadata-timestamp-month[data-file-id="'+t+'"]').removeClass("hide-this"):"month"===i&&$('.assembly-metadata-timestamp-day[data-file-id="'+t+'"]').removeClass("hide-this");var c;"-1"!==s&&(c="-1"!==l?"-1"!==n?new Date(s,l,n):new Date(s,l):new Date(s),WGST.upload.assembly[a].metadata=WGST.upload.assembly[a].metadata||{},WGST.upload.assembly[a].metadata.datetime=c),"-1"!==s&&(e.closest(".assembly-metadata-block").next(".assembly-metadata-block").fadeIn(),e.closest(".assembly-metadata-block").animate({scrollTop:e.closest(".assembly-metadata-block").height()},400),bt())});var K={},V="",Z=document.getElementsByTagName("body")[0],J=[],X=/^[CTAGNUX]+$/i,Q=0,et=function(e,t,a,s){var l=[],o=[],n=0,c=[],r="",d="",m=$();for(WGST.upload.assembly[a.name]={metadata:{}},l=e.target.result.trim().split(">").filter(function(e){return e.length>0}),t+=1,J[t]={name:a.name,id:"",contigs:{total:l.length,invalid:0,individual:[]}},c=[],r="",d="";n<l.length;n++){o=l[n].split(/\n/).filter(function(e){return e.length>0});for(var p=0;o>p;i++)o[p]=o[p].trim();if(o.length>1){var g=o.splice(1,o.length);X.test(g[0].trim())||(g=g.splice(1,g.length)),r=g.join("").replace(/\s/g,""),d=o[0].trim().replace(">",""),X.test(r)?(c.push(r),J[t].contigs.individual[n]={},J[t].contigs.individual[n].id=d,J[t].contigs.individual[n].sequence=r):J[t].contigs.invalid=J[t].contigs.invalid+1}else J[t].contigs.invalid=J[t].contigs.invalid+1}K[a.name]={name:a.name,assembly:e.target.result,metadata:{}};for(var u=c.sort(function(e,t){return t.length-e.length}),b=[],y=0;y<u.length;y++)b.push(b.length>0?u[y].length+b[b.length-1]:u[y].length);for(var f=Math.floor(b[b.length-1]/2),h=0,v={},y=0;y<u.length;y++)if(h+=u[y].length,h>=f){v.sequenceNumber=y+1,v.sum=h,v.sequenceLength=u[y].length;break}var T=Math.floor(b[b.length-1]/c.length);Q+=l.length,$(".assembly-sequences-average").text(Math.floor(Q/s.length)),m=$('<li class="assembly-item hide-this" data-name="'+J[t].name+'" data-file-id="'+t+'" id="assembly-item-'+t+'"><div class="assembly-overview"><div class="assembly-stats-container"><div class="assembly-stats-label">total nt</div><div class="assembly-stats-number">'+b[b.length-1].toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+'</div></div><div class="assembly-stats-container"><div class="assembly-stats-label">total contigs</div><div class="assembly-stats-number assembly-stats-number-contigs">'+J[t].contigs.total.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+'</div></div><div class="assembly-stats-container"><div class="assembly-stats-label">min contig</div><div class="assembly-stats-number">'+u[u.length-1].length.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+'<small>nt</small></div></div><div class="assembly-stats-container"><div class="assembly-stats-label">mean contig</div><div class="assembly-stats-number">'+T.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+'<small>nt</small></div></div><div class="assembly-stats-container"><div class="assembly-stats-label">max contig</div><div class="assembly-stats-number">'+u[0].length.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+'<small>nt</small></div></div><div class="assembly-stats-container"><div class="assembly-stats-label">contig N50</div><div class="assembly-stats-number assembly-stats-n50-number">'+v.sequenceLength.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+'<small>nt</small></div></div></div><div class="assembly-content-data"><div class="sequence-length-distribution-chart-'+t+'"></div></div></li>');var S=$('<div class="assembly-metadata"></div>'),w=$("<h4>Please provide mandatory assembly metadata:</h4>"),_=$("<div></div>"),G='<div class="form-block assembly-metadata-{{fileCounter}} assembly-metadata-block"><div class="form-group form-horizontal"><label for="assemblyTimestampInput{{fileCounter}}">When this assembly was sampled?</label><div class="assembly-metadata-timestamp-block assembly-metadata-timestamp-year" data-file-id="{{fileCounter}}"><select name="select" class="form-control assembly-timestamp-input assembly-timestamp-input-year" data-timestamp-input="year" data-file-id="{{fileCounter}}" data-file-name="'+a.name+'" id="assemblyTimestampInput{{fileCounter}}"><option value="-1">Choose year</option>{{listOfYears}}</select></div><div class="assembly-metadata-timestamp-block assembly-metadata-timestamp-month hide-this" data-file-id="{{fileCounter}}"><select name="select" class="form-control assembly-timestamp-input assembly-timestamp-input-month" data-timestamp-input="month" data-file-id="{{fileCounter}}" data-file-name="'+a.name+'"><option value="-1">Choose month</option>{{listOfMonths}}</select></div><div class="assembly-metadata-timestamp-block assembly-metadata-timestamp-day hide-this" data-file-id="{{fileCounter}}"><select name="select" class="form-control assembly-timestamp-input assembly-timestamp-input-day" data-timestamp-input="day" data-file-id="{{fileCounter}}" data-file-name="'+a.name+'"><option value="-1">Choose day</option>{{listOfDays}}</select></div></div></div>',W='<div class="form-block assembly-metadata-{{fileCounter}} assembly-metadata-block hide-this"><div class="form-group"><label for="assemblySampleLocationInput{{fileCounter}}">Where this assembly was sampled?</label><input type="text" class="form-control assembly-sample-location-input" id="assemblySampleLocationInput{{fileCounter}}" placeholder="E.g.: London, United Kingdom"></div></div>',k='<div class="form-block assembly-metadata-{{fileCounter}} assembly-metadata-block hide-this"><div class="form-group"><label for="assemblySampleSourceInput{{fileCounter}}">What is the source of this sample?</label><select name="select" class="form-control assembly-sample-source-input" id="assemblySampleSourceInput{{fileCounter}}"><option value="0" selected>Choose source</option><option value="1">Human</option><option value="2">Livestock</option><option value="3">Biosphere</option><option value="4">Environment</option></select></div></div>',C='<div class="form-block assembly-metadata-{{fileCounter}} hide-this"><button class="btn btn-default next-assembly-button" class="show-next-assembly">Next empty metadata</button> <button class="btn btn-default copy-metadata-to-all-empty-assemblies">Copy to all empty metadata</button></div>',A='<div class="form-block assembly-metadata-{{fileCounter}} hide-this">Ready? Click "Upload" button to upload your assemblies and metadata.</div>';
G=G.replace(/{{listOfYears}}/g,j(1940,2014)),G=G.replace(/{{listOfMonths}}/g,z()),G=G.replace(/{{listOfDays}}/g,Y()),G=G.replace(/{{fileCounter}}/g,t),W=W.replace(/{{fileCounter}}/g,t),k=k.replace(/{{fileCounter}}/g,t),C=C.replace(/{{fileCounter}}/g,t),A=A.replace(/{{fileCounter}}/g,t);{var E=$(G),x=$(W),R=$(k),O=$(C);$(A)}_.append(E),_.append(x),_.append(R),t<s.length&&_.append(O),S.append(w),S.append(_);var I=$('<li class="assembly-item hide-this" data-name="'+J[t].name+'" data-file-id="'+t+'" id="assembly-metadata-item-'+t+'"></li>');I.append(S),$(".assembly-metadata-list-container ul").append(I),$(".assembly-list-container ul").append(m),tt(b,v,t),$("#assembly-item-1").show(),$("#assembly-metadata-item-1").show(),$(".wgst-panel__assembly-upload-metadata .header-title small").text($("#assembly-metadata-item-1").attr("data-name")),$(".wgst-panel__assembly-upload-analytics .header-title small").text($("#assembly-item-1").attr("data-name")),V=$(".assembly-item").eq("0").attr("data-name"),function(e){var t=$('.assembly-metadata-list-container li[data-name="'+e+'"] .assembly-sample-location-input');WGST.geo.placeSearchBox[e]=new google.maps.places.SearchBox(t[0],{bounds:WGST.geo.map.searchBoxBounds}),google.maps.event.addListener(WGST.geo.placeSearchBox[e],"places_changed",function(){var t=WGST.geo.placeSearchBox[e].getPlaces(),a=t[0];if("undefined"==typeof a||"undefined"==typeof a.geometry)return void console.dir(WGST.geo.placeSearchBox[e]);var s=a.geometry.location.lat(),l=a.geometry.location.lng(),o=a.formatted_address;console.log("[WGST] Google Places API first SearchBox place:"),console.log(o);var n=$('.wgst-panel__assembly-upload-metadata .assembly-item[data-name="'+e+'"]').find(".assembly-sample-location-input");n.val().length>0&&(n.closest(".form-block").next(".form-block").fadeIn(),n.closest(".assembly-metadata").animate({scrollTop:n.closest(".assembly-metadata").height()},400)),bt(),n.blur().val(o),WGST.geo.map.canvas.setCenter(a.geometry.location),WGST.geo.map.markers.metadata.setMap(WGST.geo.map.canvas),WGST.geo.map.markers.metadata.setPosition(a.geometry.location),WGST.geo.map.markers.metadata.setVisible(!0),WGST.upload.assembly[e]=WGST.upload.assembly[e]||{},WGST.upload.assembly[e].metadata=WGST.upload.assembly[e].metadata||{},WGST.upload.assembly[e].metadata.geography={address:o,position:{latitude:s,longitude:l},type:a.types[0]}}),$('li.assembly-item[data-name="'+e+'"] .assembly-sample-source-input').on("change",function(){WGST.upload.assembly[e].metadata=WGST.upload.assembly[e].metadata||{},WGST.upload.assembly[e].metadata.source=$(this).val()})}(a.name)},tt=function(e,t,a){var s=460,l=312,o=(d3.extent(e,function(e){return e.sequenceLength}),d3.scale.linear().domain([0,e.length]).range([40,s-50])),n=d3.scale.linear().domain([e[e.length-1],0]).range([30,l-52]),i=d3.svg.axis().scale(o).orient("bottom").ticks(10),c=d3.svg.axis().scale(n).orient("left").ticks(10),r=d3.select(".sequence-length-distribution-chart-"+a).append("svg").attr("width",s).attr("height",l);r.append("g").attr("class","x axis").attr("transform","translate(20, 260)").call(i),r.append("g").attr("class","y axis").attr("transform","translate(60, 0)").call(c),r.select(".x.axis").append("text").text("Ordered contigs").attr("class","axis-label").attr("text-anchor","end").attr("x",s/2+49).attr("y",45),r.select(".y.axis").append("text").text("Nucleotides sum").attr("class","axis-label").attr("transform","rotate(-90)").attr("x",-(l/2)-44).attr("y",398),r.selectAll("circle").data(e).enter().append("circle").attr("cx",function(e,t){return o(t+1)+20}).attr("cy",function(e){return n(e)}).attr("r",5);var d=d3.svg.line().x(function(e,t){return o(t+1)+20}).y(function(e){return n(e)});r.append("path").attr("d",d(e));{var m=[{x:o(0)+20,y:n(0)},{x:o(1)+20,y:n(e[0])}],p=d3.svg.line().x(function(e){return e.x}).y(function(e){return e.y}).interpolate("linear"),g=(r.append("path").attr("d",p(m)),r.selectAll(".n50-circle").data([t]).enter().append("g").attr("class","n50-group"));g.append("circle").attr("cx",function(e){return o(e.sequenceNumber)+20}).attr("cy",function(e){return n(e.sum)}).attr("r",6)}g.append("text").attr("dx",function(e){return o(e.sequenceNumber)+20+9}).attr("dy",function(e){return n(e.sum)+5}).attr("text-anchor","right").text("N50");var u=[{x:54,y:n(t.sum)},{x:o(t.sequenceNumber)+20,y:n(t.sum)},{x:o(t.sequenceNumber)+20,y:l-46}],b=d3.svg.line().x(function(e){return e.x}).y(function(e){return e.y}).interpolate("linear");g.append("path").attr("d",b(u))},at=/csv/,st=function(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"},lt=function(){},ot=function(e){if(e.dataTransfer.files.length>0){e.stopPropagation(),e.preventDefault();var t="";if(n("collection")?(t=$(".wgst-panel__collection").attr("data-collection-id"),$(".wgst-panel__assembly-upload-navigator").attr("data-collection-id",t),r("collection"),S(t)):St("collection")&&(t=$(".wgst-fullscreen__collection .wgst-collection").attr("data-collection-id"),$(".wgst-panel__assembly-upload-navigator").attr("data-collection-id",t),S(t),It("map","map")),n("assemblyUploadNavigator")||(c("assemblyUploadNavigator"),s("assemblyUploadNavigator")),n("assemblyUploadAnalytics")||(c("assemblyUploadAnalytics"),s("assemblyUploadAnalytics")),n("assemblyUploadMetadata")||(c("assemblyUploadMetadata"),s("assemblyUploadMetadata")),$(".assembly-upload-panel").trigger("mousedown"),WGST.speak){var a,l="";l=t.length>0?"You have dropped "+e.dataTransfer.files.length+" files to the existing collection.":"You have dropped "+e.dataTransfer.files.length+" files",a=new SpeechSynthesisUtterance(l),window.speechSynthesis.speak(a)}var o=e.dataTransfer.files;WGST.dragAndDrop.files=$.merge(WGST.dragAndDrop.files,o);{var i=WGST.dragAndDrop.files,d=i[0],m=d.name;new FileReader}1===i.length?($(".upload-multiple-assemblies-label").hide(),$(".upload-single-assembly-file-name").text(m),$(".upload-single-assembly-label").show()):($(".upload-single-assembly-label").hide(),$(".upload-multiple-assemblies-label").show()),$(".total-number-of-dropped-assemblies").text(i.length),$(".assembly-list-slider").slider("option","max",i.length),$(".assembly-file-name").text(m),i.length>1&&($(".assembly-navigator").show(),$(".ui-slider-handle").focus()),$.each(i,function(e,a){if(a.type.match(at)&&(console.log("Dropped CSV file"),console.dir(a),lt(a)),console.log("Dropped file type: "+a.type),console.dir(a),a.name.match(WGST.dragAndDrop.fastaFileNameRegex)){if(0===$('.wgst-panel__assembly-upload-analytics .assembly-item[data-name="'+a.name+'"]').length){var s=new FileReader;s.addEventListener("load",function(s){et(s,e,a,o,t)}),s.readAsText(a)}}else console.log("[WGST] File not supported")}),$(".assembly-upload-total-number").text(i.length),$(".assembly-upload-total-number-label").html(1===i.length?"assembly":"assemblies")}};Z.addEventListener("dragover",st,!1),Z.addEventListener("drop",ot,!1);var nt=function(e){1===e?($(".nav-prev-item").attr("disabled","disabled"),$(".nav-next-item").removeAttr("disabled","disabled")):e===parseInt($(".total-number-of-dropped-assemblies").text())?($(".nav-next-item").attr("disabled","disabled"),$(".nav-prev-item").removeAttr("disabled","disabled")):($(".nav-next-item").removeAttr("disabled","disabled"),$(".nav-prev-item").removeAttr("disabled","disabled"))},it=function(e){$(".selected-assembly-counter").text(e),$(".assembly-item").hide();var t=$("#assembly-item-"+e);t.show();var a=$("#assembly-metadata-item-"+e);a.show();var s=$(".assembly-item").eq(e-1).attr("data-name");$(".wgst-panel__assembly-upload-navigator .assembly-file-name").text(s),$(".wgst-panel__assembly-upload-metadata .header-title small").text(s),$(".wgst-panel__assembly-upload-analytics .header-title small").text(s),nt(e),V=t.attr("data-name")},ct=function(){var e=$(".wgst-panel__assembly-upload-navigator");e.find(".assembly-sequences-average").text("0"),e.find(".assembly-upload-total-number").text("0")},rt=function(){var e=$(".wgst-panel__assembly-upload-progress");e.find(".assemblies-upload-progress .progress-bar").attr("class","progress-bar").attr("aria-valuenow","0"),e.find(".assemblies-upload-progress .progress-bar").attr("style","width: 0%"),e.find(".assemblies-upload-progress .progress-bar").html(""),e.find(".assemblies-upload-progress .assemblies-upload-processed").html("0"),e.find(".assembly-list-upload-progress tbody").html("")},dt=function(){var e=$(".wgst-panel__assembly-upload-metadata");e.find(".assembly-metadata-list-container ul").html(""),e.find(".adding-metadata-progress-container .progress-container").show(),e.find(".adding-metadata-progress-container .upload-controls-container").hide(),e.find(".adding-metadata-progress-container .progress-bar").width("0%"),e.find(".adding-metadata-progress-container .progress-bar").attr("aria-valuenow",0),e.find(".adding-metadata-progress-container .progress-percentage").text("0%")},mt=function(){var e=$(".wgst-panel__assembly-upload-analytics");e.find(".assembly-list-container ul").html("")},pt=function(){K={},ct(),mt(),dt()},gt=function(){var e=0;$.each($(".assembly-item"),function(t,a){e+=parseInt($(a).find(".assembly-stats-number-contigs").text(),10)}),$(".assembly-sequences-average").text(Math.floor(e/Object.keys(K).length)),$(".assembly-upload-total-number").text(Object.keys(K).length)},ut=function(e,t){it(t.value)};$(".assembly-list-slider").on("slide",ut),$(".assembly-list-slider").on("slidechange",ut),$(".nav-prev-item").on("click",function(e){$(".assembly-list-slider").slider("value")>1&&$(".assembly-list-slider").slider("value",$(".assembly-list-slider").slider("value")-1),e.preventDefault()}),$(".nav-next-item").on("click",function(e){$(".assembly-list-slider").slider("value")<parseInt($(".total-number-of-dropped-assemblies").text(),10)&&$(".assembly-list-slider").slider("value",$(".assembly-list-slider").slider("value")+1),e.preventDefault()}),$(".assembly-metadata-list-container").on("click",".not-sure-checkbox",function(){$(this).closest("label").find(".not-sure-hint").toggleClass("hide-this")});var bt=function(){var e=+$(".assembly-timestamp-input-year").length+$(".assembly-sample-location-input").length+$(".assembly-sample-source-input").length,t=+$(".assembly-timestamp-input-year").filter(function(){return"-1"!==this.value}).length+$(".assembly-sample-location-input").filter(function(){return 0!==this.value.length}).length+$(".assembly-sample-source-input").filter(function(){return"0"!==this.value}).length,a=Math.floor(100*t/e);if($(".adding-metadata-progress-container .progress-bar").width(a+"%"),$(".adding-metadata-progress-container .progress-bar").attr("aria-valuenow",a),$(".adding-metadata-progress-container .progress-percentage").text(a+"%"),100===a&&($(".adding-metadata-progress-container .progress-container").hide(),$(".adding-metadata-progress-container .upload-controls-container").show(),WGST.speak)){var s=new SpeechSynthesisUtterance("Ready to upload");window.speechSynthesis.speak(s)}};$(".assembly-metadata-list-container").on("change",".assembly-sample-source-input",function(){0!==$(this).val()&&($(this).closest(".form-block").next(".form-block").fadeIn(),$(this).closest(".assembly-metadata").animate({scrollTop:$(this).closest(".assembly-metadata").height()},400)),bt(),$(".adding-metadata-progress-container .progress-hint").fadeOut()}),$(".assembly-metadata-list-container").on("click",".assembly-metadata button.next-assembly-button",function(e){$(".nav-next-item").trigger("click");$(this).closest(".assembly-item").attr("id").replace("assembly-metadata-item-","");$(this).closest(".assembly-metadata-list-container").find('.assembly-metadata-block input:text[value=""]').focus(),e.preventDefault()});var yt=function(e){var t,a=[];for(t in e)e.hasOwnProperty(t)&&a.push({referenceId:e[t].referenceId,score:e[t].score});return a=a.sort(function(e,t){return t.score-e.score}),a[0]},ft=function(e,t,a,s){var l=$('.assembly-list-upload-progress tr[data-assembly-id="'+t+'"] '),o=l.find(".progress-bar"),n='<span class="glyphicon glyphicon-ok"></span>',i=parseFloat(l.find(".progress-bar").attr("aria-valuenow")),c=100/a,r=i+c;if(s===WGST.assembly.analysis.UPLOAD_OK?l.find(".assembly-upload-uploaded").html(n):s===WGST.assembly.analysis.MLST_RESULT?l.find(".assembly-upload-result-mlst").html(n):s===WGST.assembly.analysis.PAARSNP_RESULT?l.find(".assembly-upload-result-paarsnp").html(n):s===WGST.assembly.analysis.FP_COMP?l.find(".assembly-upload-result-fp-comp").html(n):s===WGST.assembly.analysis.CORE&&l.find(".assembly-upload-result-core").html(n),o.css("width",r+"%").attr("aria-valuenow",r),r>0&&o.text(Math.round(r)+"%"),r>=100){$t-=1,l.find(".progress").removeClass("active").removeClass("progress-striped"),o.removeClass("progress-bar-info").addClass("progress-bar-success");var d=l.find(".assembly-upload-name").text();l.find(".assembly-upload-name").html('<a href="#" class="open-assembly-button" data-assembly-id="'+e+'">'+d+"</a>");var m=$(".assemblies-upload-processed");m.text(parseInt(m.text(),10)+1)}},ht=function(e,t,a,s){var l=$(".assemblies-upload-progress").find(".progress-bar"),o=parseFloat(l.attr("aria-valuenow")),n=100/s,i=o+n;if(l.css("width",i+"%").attr("aria-valuenow",i),i>0&&l.text(Math.round(i)+"%"),i>=100&&l.addClass("progress-bar-success"),WGST.speak===!0&&i%30===0){var c=new SpeechSynthesisUtterance("Uploaded over "+i+" percent");window.speechSynthesis.speak(c)}},vt=function(e){var t,a,s,l,o,n,i={};for(t in WGST.collection[e].assemblies){a=WGST.collection[e].assemblies[t],i=a.PAARSNP_RESULT.paarResult.resistanceProfile,o={};for(s in i){l=i[s];for(n in l)o[n]=l[n]}WGST.collection[e].assemblies[t].PAARSNP_RESULT.paarResult.ungroupedResistanceProfile=o,console.log("WGST.collection[collectionId].assemblies[assemblyId].PAARSNP_RESULT.paarResult.ungroupedResistanceProfile:"),console.dir(WGST.collection[e].assemblies[t].PAARSNP_RESULT.paarResult.ungroupedResistanceProfile)}},Tt=function(e){var t,a,s=[],l={};for(t in WGST.antibiotics)for(a in WGST.antibiotics[t])s.push(a),l[a]='<option value="'+a.replace(WGST.antibioticNameRegex,"_").toLowerCase()+'">'+a+"</option>";s.sort();var o=s.length;for(o=0;o<s.length;)a=s[o],e.append($(l[a])),o+=1};WGST.socket.connection.on("collectionTreeMergeNotification",function(e){if(console.log("[WGST] Received merged tree notification"),WGST.speak){var t=new SpeechSynthesisUtterance("Merged collections");window.speechSynthesis.speak(t)}var l=e.mergedCollectionTreeId,o=e.tree,n=e.assemblies,i=[];i=n.map(function(e){return e.assemblyId}),console.log("[WGST] Getting merged collection assemblies"),console.dir(i),$.ajax({type:"POST",url:"/api/assemblies/",datatype:"json",data:{assemblyIds:i}}).done(function(e){console.log("[WGST] Got merged collection assemblies"),console.dir(e),E(l,e,o),A(l,{matchAssemblyListButton:!0,mergeWithButton:!0});var t,n,i;for(t in WGST.collection[l].assemblies)WGST.collection[l].assemblies.hasOwnProperty(t)&&(n=WGST.collection[l].assemblies[t],i=n.FP_COMP.scores,WGST.collection[l].assemblies[t].FP_COMP.topScore=yt(i));vt(l),Tt($("#select-tree-node-antibiotic-merged")),function(){var e=$(".wgst-tree-control__merge-collection-trees");e.find(".wgst-spinner").hide(),e.find(".wgst-spinner-label").show(),e.attr("disabled",!1)}(),$(".wgst-panel__collection .wgst-panel-control-button__close").trigger("click"),$(".wgst-panel__collection-tree .wgst-panel-control-button__close").trigger("click");var r="MERGED",m="collectionTree__"+l+"__"+r;c(m),s(m),a(m),d(m)}).fail(function(e,t,a){console.error("[WGST][Error] ✗ Failed to get assemblies"),console.error(t),console.error(a),console.error(e)})}),WGST.socket.connection.on("assemblyUploadNotification",function(e){var t=e.collectionId,a=e.assemblyId,s=e.userAssemblyId,l=e.result,o=t+"__"+a+"__"+l,n=Object.keys(K),i=Object.keys(WGST.assembly.analysis).length,c=i*n.length,d=Object.keys(WGST.collection.analysis).length,m=c+d;console.log("[WGST][Socket.io] Received assembly upload notification:"),console.log("[WGST][Socket.io] Assembly id: "+a),console.log("[WGST][Socket.io] Result: "+l),-1===Object.keys(WGST.upload.collection[t].notifications.all).indexOf(o)&&(WGST.upload.collection[t].notifications.all[o]="OK",console.debug("[WGST] » Received "+Object.keys(WGST.upload.collection[t].notifications.all).length+" out of "+m+" assembly results"),-1!==Object.keys(WGST.assembly.analysis).indexOf(l)&&ft(a,s,i,l),ht(t,s,a,m,l),m===Object.keys(WGST.upload.collection[t].notifications.all).length&&(console.log("[WGST] ✔ Finished uploading and processing new collection "+t),setTimeout(function(){r("assemblyUploadProgress"),pt(),x(t)},1e3)))});var St=function(e){var t=$('[data-fullscreen-name="'+e+'"]');return t.hasClass("wgst-fullscreen--active")?!0:!1};$('input[type="checkbox"].show-all-assemblies-on-map').on("change",function(){var e=$(this).closest(".collection-details").find('.collection-assembly-list .assembly-list-header-map input[type="checkbox"]');$(this).prop("checked")?e.prop("checked",!0).trigger("change"):e.prop("checked",!1).trigger("change")});$(".wgst-panel__collection .collection-assembly-list").on("change",'input[type="checkbox"]',function(){var e,t=($(this).attr("data-assembly-id"),$(this).closest(".wgst-collection").attr("data-collection-id")),a=$(this).closest(".collection-assembly-list").find('.show-on-map-checkbox [type="checkbox"]:checked'),s=[];a.each(function(){e=$(this).attr("data-assembly-id"),s.push(e)}),P(t,s),"map"!==$(".wgst-fullscreen--active").attr("data-fullscreen-name")&&($(".wgst-panel__map").hasClass("wgst-panel--active")||m("map")),0===$(this).closest(".collection-assembly-list").find('input[type="checkbox"]:not(:checked)').length?$('input[type="checkbox"].show-all-assemblies-on-map').prop("checked",!0):$('input[type="checkbox"].show-all-assemblies-on-map').prop("checked",!1)}),$(".collection-assembly-list").on("change",'input[type="radio"]',function(){var e=$(this).attr("data-assembly-id"),t=$(this).closest(".wgst-collection-info").attr("data-collection-id");$(".collection-assembly-list .assembly-list-item.row-selected").removeClass("row-selected"),$('.collection-assembly-list .assembly-list-item[data-assembly-id="'+e+'"]').addClass("row-selected"),WGST.collection[t].tree.canvas.selectNodes(e),c("collectionTree"),s("collectionTree"),a("collectionTree"),d("collectionTree")}),$(".assemblies-upload-cancel-button").on("click",function(){$(".assembly-upload-panel").hide(),K={},V="",$(".assembly-list-container ul").html(""),$(".assembly-metadata-list-container ul").html(""),$(".adding-metadata-progress-container .progress-bar").width("0%"),$(".adding-metadata-progress-container .progress-bar").attr("aria-valuenow",0),$(".adding-metadata-progress-container .progress-percentage").text("0%"),WGST.geo.map.markers.metadata.setMap(null)});var $t=0,wt=5,_t=2e3,Gt=function(e,t){wt>$t?(console.log("[WGST] Uploading "+t+" assembly"),$t+=1,K[t].socketRoomId=WGST.socket.roomId,K[t].assemblyId=t,$.ajax({type:"POST",url:"/assembly/add/",datatype:"json",data:K[t]}).done(function(){}).fail(function(e,t,a){console.log("[WGST][ERROR] Failed to send FASTA file object to server or received error message"),console.error(t),console.error(a),console.error(e),u(t)})):setTimeout(Gt,_t,e,t)},Wt=2e3;$(".assemblies-upload-ready-button").on("click",function(){console.log("[WGST] Getting ready to upload assemblies and metadata"),dt(),rt(),WGST.geo.map.markers.metadata.setMap(null),r(["assemblyUploadNavigator","assemblyUploadAnalytics","assemblyUploadMetadata"]),WGST.dragAndDrop.files=[];var e,t,a;for(e in K)K.hasOwnProperty(e)&&(t='<tr data-assembly-id="{{userAssemblyId}}"><td class="assembly-upload-name">{{userAssemblyId}}</td><td class="assembly-upload-progress"><div class="progress progress-striped active"><div class="progress-bar progress-bar-info"  role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%"></div></div></td><td class="assembly-upload-result assembly-upload-uploaded"><span class="glyphicon glyphicon-record"></span></td><td class="assembly-upload-result assembly-upload-result-mlst"><span class="glyphicon glyphicon-record"></span></td><td class="assembly-upload-result assembly-upload-result-fp-comp"><span class="glyphicon glyphicon-record"></span></td><td class="assembly-upload-result assembly-upload-result-paarsnp"><span class="glyphicon glyphicon-record"></span></td><td class="assembly-upload-result assembly-upload-result-core"><span class="glyphicon glyphicon-record"></span></td></tr>',a=t.replace(/{{userAssemblyId}}/g,e),$(".assembly-list-upload-progress tbody").append(a));var l=Object.keys(K).length;if($(".wgst-panel__assembly-upload-progress .header-title small").text(l),$(".wgst-panel__assembly-upload-progress .assemblies-upload-total").text(l),c("assemblyUploadProgress",function(){s("assemblyUploadProgress");var e=$(".wgst-panel__assembly-upload-navigator").attr("data-collection-id");console.log("[WGST] Getting collection id"),setTimeout(function(){$.ajax({type:"POST",url:"/collection/add/",datatype:"json",data:{collectionId:e,userAssemblyIds:Object.keys(K)}}).done(function(e){var t,a=e.collectionId,s=e.userAssemblyIdToAssemblyIdMap;WGST.upload.collection[a]={},WGST.upload.collection[a].notifications={assembly:{},all:{},tree:!1};var l={};$.each(s,function(e){console.log("=============================================="),console.dir(s),console.log(e);var t=s[e];"undefined"!=typeof K[t]&&(l[e]=K[t])}),K=l,console.dir(K);for(t in K)if(K.hasOwnProperty(t)){var o=K[t].name;K[t].collectionId=a;{$('li[data-name="'+o+'"] .assembly-sample-location-input')}console.debug("userAssemblyId: "+o),console.dir(WGST.upload),K[t].metadata={datetime:WGST.upload.assembly[o].metadata.datetime,geography:{position:{latitude:WGST.upload.assembly[o].metadata.geography.position.latitude,longitude:WGST.upload.assembly[o].metadata.geography.position.longitude},address:WGST.upload.assembly[o].metadata.geography.address},source:WGST.upload.assembly[o].metadata.source},console.log("[WGST] Metadata for "+t+":"),console.debug(K[t].metadata),function(){console.log("==================================================================="),console.log("collectionId: "+a+" assemblyId: "+t),console.log("==================================================================="),Gt(a,t)}()}}).fail(function(e,t,a){console.log("[WGST][ERROR] Failed to get collection id"),console.error(t),console.error(a),console.error(e),u(t)})},Wt)}),WGST.speak){var o=new SpeechSynthesisUtterance("Uploading...");window.speechSynthesis.speak(o)}}),$(".cancel-assembly-upload-button").on("click",function(){$('.assembly-item[data-name="'+V+'"]').remove(),delete K[V],$(".assembly-list-slider").slider("option","max",Object.keys(K).length),$(".total-number-of-dropped-assemblies").text(Object.keys(K).length),it($(".assembly-list-slider").slider("value")),1===Object.keys(K).length?($(".assembly-upload-total-number-label").text("assembly"),$(".upload-single-assembly-file-name").text(K[Object.getOwnPropertyNames(K)[0]].name),$(".upload-multiple-assemblies-label").hide(),$(".upload-single-assembly-label").show(),$(".assembly-navigator").hide()):nt($(".assembly-list-slider").slider("value")),gt(),bt()}),$("body").on("mousedown",".wgst-panel",function(){d($(this).attr("data-panel-name"))}),$(".tree-panel .wgst-tree-controls button").on("click",function(){$(this).blur()});var kt=function(e,t){if(e!==t){var a=$('.assembly-metadata-timestamp-year[data-file-id="'+e+'"]'),s=a.find("select option:selected").val(),l=$('.assembly-metadata-timestamp-month[data-file-id="'+e+'"]'),o=l.find("select option:selected").val(),n=$('.assembly-metadata-timestamp-day[data-file-id="'+e+'"]'),i=n.find("select option:selected").val(),c=$('.assembly-metadata-timestamp-year[data-file-id="'+t+'"]'),r=$('.assembly-metadata-timestamp-month[data-file-id="'+t+'"]'),d=$('.assembly-metadata-timestamp-day[data-file-id="'+t+'"]'),m=d.find("select");"-1"!==s&&c.find('option[value="'+s+'"]').prop("selected",!0),"-1"!==o&&r.find('option[value="'+o+'"]').prop("selected",!0),"-1"!==i&&(H(m,s,o),m.find('option[value="'+i+'"]').prop("selected",!0)),a.is(":visible")&&c.removeClass("hide-this"),l.is(":visible")&&r.removeClass("hide-this"),n.is(":visible")&&d.removeClass("hide-this")}};$(".wgst-panel__assembly-upload-metadata").on("click",".copy-metadata-to-all-empty-assemblies",function(){var e=$(this).closest(".assembly-metadata"),t=e.find(".assembly-sample-location-input"),a=e.find(".assembly-sample-source-input"),s={fileName:$(this).closest(".assembly-item").attr("data-name"),fileId:$(this).closest(".assembly-item").attr("data-file-id")};s.metadata=WGST.upload.assembly[s.fileName].metadata;var l,o,n=$(".wgst-panel__assembly-upload-metadata");$.each(WGST.upload.assembly,function(e,i){0===Object.keys(i.metadata).length&&(WGST.upload.assembly[e].metadata=s.metadata,l=n.find('.assembly-item[data-name="'+e+'"]'),o=l.attr("data-file-id"),n.find('.assembly-item[data-name="'+e+'"] .assembly-sample-location-input').val(t.val()),n.find('.assembly-item[data-name="'+e+'"] .assembly-sample-source-input').val(a.val()),kt(s.fileId,o))}),$(".assembly-metadata-block").show(),bt()}),$(".wgst-panel__collection, .wgst-fullscreen__collection").on("click",".show-on-representative-tree",function(e){Et();var t=$(this).closest(".wgst-collection-info").attr("data-collection-id"),a=$(this).attr("data-assembly-id"),s=WGST.collection[t].assemblies[a].FP_COMP.topScore.referenceId;WGST.collection.representative.tree.canvas.selectNodes(s),e.preventDefault()}),$(".wgst-panel__collection, .wgst-panel__assembly-upload-progress, .wgst-fullscreen__collection").on("click",".open-assembly-button",function(e){var t=$(this).attr("data-assembly-id");n("assembly")&&(r("assembly"),$(".wgst-panel__assembly .assembly-details .assembly-detail-content").html("")),Ct(t),e.preventDefault()}),$(".wgst-panel__collection").on("click",".wgst-collection-control__show-tree",function(){var e=$(this).attr("data-collection-id"),t=$(this).attr("data-tree-type"),l="collectionTree__"+e+"__"+t;c(l),s(l),a(l),d(l)});var Ct=function(e){c("assembly"),d("assembly"),l("assembly"),s("assembly"),$.ajax({type:"POST",url:"/api/assembly",datatype:"json",data:{assemblyId:e}}).done(function(t){console.log("[WGST] Received data for assembly id: "+e),console.dir(t);var a=t.assembly,s=$(".wgst-panel__assembly");s.find(".header-title small").text(a.ASSEMBLY_METADATA.userAssemblyId);var l=t.antibiotics,o=a.PAARSNP_RESULT.paarResult.resistanceProfile,n="",i="",c="";for(var r in l)if(l.hasOwnProperty(r)){i='<table class="antibiotic-group" data-antibiotic-group-name="{{antibioticGroupName}}"><thead><tr><th>{{antibioticGroupName}}</th></tr></thead><tbody><tr><td><table><tbody><tr>{{antibioticResistancesHtml}}</tr></tbody></table></td></tr></tbody></table>',m="",c="";for(var d in l[r])if(l[r].hasOwnProperty(d)){var m=m+"<td>"+d+"</td>";if("undefined"!=typeof o[r])if("undefined"!=typeof o[r][d]){console.log("antibioticName: "+d);var p=o[r][d].resistanceState;c="RESISTANT"===p?c+'<td><div class="antibiotic resistance-fail" data-antibiotic-name="'+d+'" data-antibiotic-resistance-state="'+p+'" data-toggle="tooltip" data-placement="top" title="'+d+'">'+d+"</div></td>":"SENSITIVE"===p?c+'<td><div class="antibiotic resistance-success" data-antibiotic-name="'+d+'" data-antibiotic-resistance-state="'+p+'" data-toggle="tooltip" data-placement="top" title="'+d+'">'+d+"</div></td>":c+'<td><div class="antibiotic resistance-unknown" data-antibiotic-name="'+d+'" data-antibiotic-resistance-state="'+p+'" data-toggle="tooltip" data-placement="top" title="'+d+'">'+d+"</div></td>"}else c=c+'<td><div class="antibiotic resistance-unknown" data-antibiotic-name="'+d+'" data-antibiotic-resistance-state="'+p+'" data-toggle="tooltip" data-placement="top" title="'+d+'">'+d+"</div></td>",console.log(">>> Assembly resistance profile has no antibiotic: "+d);else c=c+'<td><div class="antibiotic resistance-unknown" data-antibiotic-name="'+d+'" data-antibiotic-resistance-state="'+p+'" data-toggle="tooltip" data-placement="top" title="'+d+'">'+d+"</div></td>",console.log(">>> Assembly resistance profile has no antibiotic group: "+r)}i=i.replace(/{{antibioticGroupName}}/g,r),i=i.replace(/{{antibioticResistancesHtml}}/,c),n+=i}$(".wgst-panel__assembly .assembly-detail__resistance-profile .assembly-detail-content").html($(n)),$(".wgst-panel__assembly .assembly-detail__st-type .assembly-detail-content").html(0===a.MLST_RESULT.stType.length?"Not found":a.MLST_RESULT.stType);var g,u,b=a.MLST_RESULT.alleles,y='<table><tbody><tr><td class="row-title">Locus Id</td>{{locusIds}}</tr><tr><td class="row-title">Allele Id</td>{{alleleIds}}</tr></tbody></table>',f="",h="";console.debug("assemblyAlleles:"),console.dir(b);for(u in b)b.hasOwnProperty(u)&&(g=b[u],null===g?(f+="<td>None</td>",h=h+"<td>"+u+"</td>"):(f=f+"<td>"+b[u].locusId+"</td>",h=h+"<td>"+b[u].alleleId+"</td>"));y=y.replace("{{locusIds}}",f),y=y.replace("{{alleleIds}}",h),$(".wgst-panel__assembly .assembly-detail__mlst .assembly-detail-content").html($(y));var v=a.FP_COMP.scores,T=yt(v);$(".wgst-panel__assembly .assembly-detail__nearest-representative .assembly-detail-content").text(T.referenceId);for(var S,w="<table><thead><tr><th>Reference Id</th><th>Score</th></tr></thead><tbody>{{assemblyScoresDataHtml}}</tbody></table>",_="",G=Object.keys(v).sort(function(e,t){return v[e]-v[t]}),W=G.length;0!==W;){W-=1;var k=G[W],C=v[k],S=C.score.toFixed(2)+" = "+Math.round(C.score*parseInt(a.FP_COMP.fingerprintSize,10))+"/"+a.FP_COMP.fingerprintSize;_=_+"<tr><td>"+C.referenceId+"</td><td>"+S+"</td></tr>"}w=w.replace("{{assemblyScoresDataHtml}}",_),$(".wgst-panel__assembly .assembly-detail__score .assembly-detail-content").html(w),$(".wgst-panel__assembly .wgst-panel-loading").hide()}).fail(function(e,t,a){console.log("[WGST][ERROR] Failed to get assembly data"),console.error(t),console.error(a),console.error(e),u(t)})};$("body").on("click",".wgst-tree-control__show-newick",function(){var e,t,a=$(this).closest(".wgst-panel").attr("data-collection-id"),s=$(this).closest(".wgst-panel").attr("data-collection-tree-type");e=WGST.collection[a].tree[s].newickStringWithLabels,t=window.open(),t.document.write(e)}),$("body").on("click",".wgst-tree-control__decrease-label-font-size",function(){var e,t,a=$(this).closest(".wgst-panel").attr("data-collection-id"),s=$(this).closest(".wgst-panel").attr("data-collection-tree-type");t=WGST.collection[a].tree[s].canvas,e=t.textSize,t.setTextSize(e-3)}),$("body").on("click",".wgst-tree-control__increase-label-font-size",function(){var e,t,a=$(this).closest(".wgst-panel").attr("data-collection-id"),s=$(this).closest(".wgst-panel").attr("data-collection-tree-type");t=WGST.collection[a].tree[s].canvas,e=t.textSize,t.setTextSize(e+3)}),$("body").on("click",".wgst-tree-control__decrease-node-size",function(){var e,t,a=$(this).closest(".wgst-panel").attr("data-collection-id"),s=$(this).closest(".wgst-panel").attr("data-collection-tree-type");e=WGST.collection[a].tree[s].canvas,t=e.baseNodeSize,t>3?(e.setNodeSize(t-3),t=e.baseNodeSize,3>t&&$(this).attr("disabled",!0)):$(this).attr("disabled",!0)}),$("body").on("click",".wgst-tree-control__increase-node-size",function(){var e,t,a=$(this).closest(".wgst-panel").attr("data-collection-id"),s=$(this).closest(".wgst-panel").attr("data-collection-tree-type");e=WGST.collection[a].tree[s].canvas,t=e.baseNodeSize,e.setNodeSize(t+3),e.baseNodeSize>3&&$(this).closest(".wgst-tree-control").find(".wgst-tree-control__decrease-node-size").attr("disabled",!1)}),$("body").on("change",".wgst-tree-control__show-node-labels",function(){var e,t=$(this).closest(".wgst-panel").attr("data-collection-id"),a=$(this).closest(".wgst-panel").attr("data-collection-tree-type");e=WGST.collection[t].tree[a].canvas,e.toggleLabels()}),$("body").on("click",".wgst-tree-control__merge-collection-trees",function(){var e=$(this);e.attr("disabled",!0),e.find(".wgst-spinner-label").hide(),e.find(".wgst-spinner").show();var t={collectionId:e.closest(".wgst-panel").attr("data-collection-id"),mergeWithCollectionId:"52a329d3-4ba9-4fa9-b3d9-6eeb86422625",collectionTreeType:e.attr("data-collection-tree-type"),socketRoomId:WGST.socket.roomId};
console.log("[WGST] Requesting to merge collection trees: "+t.collectionId+", "+t.mergeWithCollectionId),$.ajax({type:"POST",url:"/api/collection/tree/merge",datatype:"json",data:t}).done(function(){console.log("[WGST] Requested to merge collection trees: "+t.collectionId+", "+t.mergeWithCollectionId)})});var At=function(){console.log("[WGST] Rendering representative collection tree");var e="representative";$(".wgst-panel__representative-collection-tree .wgst-tree-content").html(""),$(".wgst-panel__representative-collection-tree .wgst-tree-content").attr("id","phylocanvas_"+e),console.log("WGST.collection.representative:"),console.dir(WGST.collection.representative),WGST.collection.representative.tree.canvas=new PhyloCanvas.Tree($('[data-panel-name="representativeCollectionTree"] .wgst-tree-content').get(0),{history_collapsed:!0}),WGST.collection.representative.tree.canvas.load("/data/reference_tree.nwk"),WGST.collection.representative.tree.canvas.treeType="rectangular"},Et=function(){console.log("[WGST] Opening representative collection tree");var e="representative";$(".wgst-panel__representative-collection-tree").attr("data-collection-id",e),c("representativeCollectionTree"),o("representativeCollectionTree"),a("representativeCollectionTree"),s("representativeCollectionTree"),d("representativeCollectionTree")};$(".wgst-navigation-item").on("click",function(e){e.preventDefault()}),$(".wgst-navigation-item__map").on("click",function(){var e=$(".wgst-fullscreen--active");"map"===e.attr("data-fullscreen-name")&&Rt(!1),m("map"),google.maps.event.trigger(WGST.geo.map.canvas,"resize")}),$(".wgst-navigation-item__representative-tree").on("click",function(){Et()}),$(".wgst-navigation-item__collection").on("click",function(){if(h("collection")){var e=$(".wgst-fullscreen--active");"collection"===e.attr("data-fullscreen-name")&&Rt(!1),m("collection")}}),google.maps.event.addDomListener(window,"resize",function(){var e=WGST.geo.map.canvas,t=e.getCenter();google.maps.event.trigger(e,"resize"),e.setCenter(t)});var xt=function(e){console.log("[WGST] Maximizing collection "+e),Rt("map"),$('[data-toggle="tooltip"]').tooltip("destroy"),Ot("collection_"+e,function(){$('[data-toggle="tooltip"]').tooltip(),m("map")}),google.maps.event.trigger(WGST.geo.map.canvas,"resize")},Rt=function(e,t){var l=$(".wgst-fullscreen--active"),o=l.attr("data-fullscreen-name");l.removeClass("wgst-fullscreen--active").removeClass("wgst-fullscreen--visible"),"undefined"!=typeof o&&e&&(a(o),s(o)),"map"===o&&$('.wgst-panel[data-panel-name="'+o+'"] .wgst-panel-body-content').html("").append(WGST.geo.map.canvas.getDiv()),l.html(""),"function"==typeof t&&t()},Ot=function(e,t){var a=$('[data-panel-id="'+e+'"]'),s=a.attr("data-panel-name"),l=$('[data-fullscreen-name="'+s+'"]').addClass("wgst-fullscreen--active").addClass("wgst-fullscreen--visible");"collection"===s&&l.append($(".collection-details").clone(!0)),r(s),"function"==typeof t&&t()},It=function(e,t){St(e)||(Rt(!1),Ot(t,function(){$('[data-fullscreen-name="'+e+'"]').html("").append(WGST.geo.map.canvas.getDiv()),google.maps.event.trigger(WGST.geo.map.canvas,"resize")}))};$("body").on("click",".wgst-panel-control-button__maximize",function(){if($(this).hasClass("wgst-panel-control-button--active")){var e=$(this).closest(".wgst-panel"),t=e.attr("data-panel-name"),a=e.attr("data-panel-id");"collection"===t?($('[data-toggle="tooltip"]').tooltip("destroy"),Rt(!1),Ot(a,function(){$('[data-fullscreen-name="'+t+'"]').html("").append($(".collection-details").clone(!0)),$('[data-toggle="tooltip"]').tooltip()})):"map"===t?It(t,a):"collectionTree"===t&&Ot(t,function(){var e=$(".wgst-panel__collection-tree").find(".wgst-tree-content"),t=$(".wgst-fullscreen__collection-tree");t.append(e.clone(!0));var a=$(".wgst-panel__collection-tree").attr("data-collection-id");$(".wgst-panel__collection-tree").html(""),console.log(a),WGST.collection[a].tree.canvas.draw()})}}),$("body").on("click",".wgst-panel-control-button__close",function(){if($(this).hasClass("wgst-panel-control-button--active")){var e=$(this).closest(".wgst-panel"),t=e.attr("data-panel-name");if(r(t),"collection"===t);else if("representativeCollectionTree"===t){var a=e.attr("data-collection-id");N(a)}}}),$("body").on("click",".wgst-panel-control-button__opacity",function(){if($(this).hasClass("wgst-panel-control-button--active")){var e=$(this).closest(".wgst-panel");"1"!==e.css("opacity")?e.css("opacity","1"):e.css("opacity","0.85")}});var Pt=function(e){for(var t,a,s=e,l=s.offset(),o=s.closest(".wgst-panel").attr("data-collection-id"),n=WGST.collection[o].tree.CORE_TREE_RESULT.canvas,i=n.leaves,c={top:n.translateClickY(l.top),left:n.translateClickX(l.left)},r={bottom:n.translateClickY(l.top+s.height()),right:n.translateClickX(l.left+s.width())},d=$(".collection-assembly-list"),m=$(".collection-assembly-list-full"),p=document.createDocumentFragment(),g=0,u=0;u<i.length;)a=i[u],a.centerx>=c.left&&a.centerx<=r.right&&a.centery>=c.top&&a.centery<=r.bottom&&(t=m.find('.assembly-list-item[data-assembly-id="'+a.id+'"]')[0],p.appendChild(t.cloneNode(!0)),g+=1),u+=1;g>7?$(".collection-assembly-list-more-assemblies").show():$(".collection-assembly-list-more-assemblies").hide();for(var b=d[0];b.firstChild;)b.removeChild(b.firstChild);b.appendChild(p),d.find('.antibiotic[data-toggle="tooltip"]').tooltip()};$(".collection-assembly-list-view-all-assemblies").on("click",function(e){var t=$(this).closest(".wgst-panel").attr("data-collection-id"),a=$(".collection-assembly-list");WGST.collection[t].tree.canvas.redrawOriginalTree(),WGST.collection[t].tree.canvas.setZoom(-.05),a.find(".assembly-list-item").remove(),a.append($(".collection-assembly-list-full .assembly-list-item").clone()),a.find('.antibiotic[data-toggle="tooltip"]').tooltip(),$(".collection-assembly-list-all-assemblies").hide(),$(".collection-assembly-list-more-assemblies").show(),e.preventDefault()}),$("body").on("click",".tree-controls-match-assembly-list",function(){var e=$(this).closest(".wgst-panel-body-content").find("canvas.phylocanvas");Pt(e)})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2dzYS5taW4uanMiLCJzb3VyY2VzIjpbImNsaWVudC5qcyJdLCJuYW1lcyI6WyIkIiwiV0dTVCIsInNwZWFrIiwibWVzc2FnZSIsIlNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSIsIndpbmRvdyIsInNwZWVjaFN5bnRoZXNpcyIsIm9uZXJyb3IiLCJlcnJvciIsImNvbnNvbGUiLCJkaXIiLCJzaG93Tm90aWZpY2F0aW9uIiwicGFuZWxzIiwiYXNzZW1ibHkiLCJ0b3AiLCJsZWZ0IiwiY29sbGVjdGlvbiIsImNvbGxlY3Rpb25UcmVlIiwibWVyZ2VkQ29sbGVjdGlvblRyZWUiLCJyZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlIiwiYXNzZW1ibHlVcGxvYWROYXZpZ2F0b3IiLCJhc3NlbWJseVVwbG9hZEFuYWx5dGljcyIsImFzc2VtYmx5VXBsb2FkTWV0YWRhdGEiLCJhc3NlbWJseVVwbG9hZFByb2dyZXNzIiwibWFwIiwiYW5hbHlzaXMiLCJVUExPQURfT0siLCJNRVRBREFUQV9PSyIsIk1MU1RfUkVTVUxUIiwiUEFBUlNOUF9SRVNVTFQiLCJGUF9DT01QIiwiQ09SRSIsIkNPTExFQ1RJT05fVFJFRSIsIkNPUkVfTVVUQU5UX1RSRUUiLCJyZXByZXNlbnRhdGl2ZSIsInRyZWUiLCJtZXRhZGF0YSIsInVwbG9hZCIsInNldHRpbmdzIiwicmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uSWQiLCJhbnRpYmlvdGljTmFtZVJlZ2V4Iiwic29ja2V0IiwiY29ubmVjdGlvbiIsImlvIiwiY29ubmVjdCIsImNvbmZpZyIsInNvY2tldEFkZHJlc3MiLCJyb29tSWQiLCJnZW8iLCJjYW52YXMiLCJvcHRpb25zIiwiem9vbSIsImNlbnRlciIsImdvb2dsZSIsIm1hcHMiLCJMYXRMbmciLCJtYXBUeXBlSWQiLCJNYXBUeXBlSWQiLCJST0FETUFQIiwibWluWm9vbSIsIm1heFpvb20iLCJtYXJrZXJzIiwicmVwcmVzZW50YXRpdmVUcmVlIiwiZ3JvdXAiLCJtYXJrZXJCb3VuZHMiLCJMYXRMbmdCb3VuZHMiLCJzZWFyY2hCb3hCb3VuZHMiLCJpbml0IiwiTWFwIiwiTWFya2VyIiwicG9zaXRpb24iLCJ2aXNpYmxlIiwiZXZlbnQiLCJhZGRMaXN0ZW5lciIsImdldEJvdW5kcyIsInBsYWNlU2VhcmNoQm94IiwiYWxlcnQiLCJzdGF0dXMiLCJTVUNDRVNTIiwiRkFJTFVSRSIsImFsbCIsIlNPQ0tFVF9DT05ORUNUIiwiU09DS0VUX1JPT01fSUQiLCJSRVBSRVNFTlRBVElWRV9DT0xMRUNUSU9OX1RSRUVfTUVUQURBVEEiLCJsb2FkZWQiLCJkcmFnQW5kRHJvcCIsImZpbGVzIiwiZmFzdGFGaWxlTmFtZVJlZ2V4IiwiaW5pdEFwcCIsInB1c2giLCJsZW5ndGgiLCJPYmplY3QiLCJrZXlzIiwiaW5pdEh0bWxFbGVtZW50IiwiZmluZCIsImh0bWwiLCJzZXRUaW1lb3V0IiwiZmFkZU91dCIsInNob3dQYW5lbEJvZHlDb250ZW50IiwicGFuZWxOYW1lcyIsInBhbmVsTmFtZSIsInBhbmVsQm9keUNvbnRlbnQiLCJjc3MiLCJpc0FycmF5IiwicGFuZWxOYW1lQ291bnRlciIsInNob3dQYW5lbCIsImFkZENsYXNzIiwic3RhcnRQYW5lbExvYWRpbmdJbmRpY2F0b3IiLCJwYW5lbExvYWRpbmdJbmRpY2F0b3IiLCJzaG93IiwiZW5kUGFuZWxMb2FkaW5nSW5kaWNhdG9yIiwiaGlkZSIsIm9uIiwiY29sbGVjdGlvbklkIiwidGhpcyIsImNsb3Nlc3QiLCJhdHRyIiwic2VsZWN0ZWROb2RlIiwibG9nIiwicmVkcmF3RnJvbUJyYW5jaCIsImlzUGFuZWxBY3RpdmUiLCJwYW5lbEVsZW1lbnQiLCJoYXNDbGFzcyIsImFjdGl2YXRlUGFuZWwiLCJjYWxsYmFjayIsInBhbmVsIiwiZGVhY3RpdmF0ZVBhbmVsIiwicmVtb3ZlQ2xhc3MiLCJicmluZ1BhbmVsVG9Ub3AiLCJ6SW5kZXhIaWdoZXN0IiwiZWFjaCIsInpJbmRleEN1cnJlbnQiLCJwYXJzZUludCIsIm9wZW5QYW5lbCIsImdldFJlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWVNZXRhZGF0YSIsImFqYXgiLCJ0eXBlIiwidXJsIiwiZGF0YXR5cGUiLCJkb25lIiwicmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uTWV0YWRhdGEiLCJmYWlsIiwianFYSFIiLCJ0ZXh0U3RhdHVzIiwiZXJyb3JUaHJvd24iLCJzaG93QWxlcnQiLCJoaWRlQWZ0ZXJTaG93IiwiYWxlcnRIdG1sRWxlbWVudCIsImVycm9ySHRtbEVsZW1lbnQiLCJkcmFnZ2FibGUiLCJoYW5kbGUiLCJhcHBlbmRUbyIsInNjcm9sbCIsInN0YXJ0IiwicmluZ0RyYWdnaW5nIiwic3RvcCIsInVpIiwiaGVscGVyIiwic2xpZGVyIiwicmFuZ2UiLCJtaW4iLCJtYXgiLCJ2YWx1ZSIsImFuaW1hdGUiLCJzbGlkZSIsInRleHQiLCJwb3BvdmVyIiwicGxhY2VtZW50IiwidGl0bGUiLCJjb250ZW50IiwidHJpZ2dlciIsImVtaXQiLCJyZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlTWF0YWRhdGEiLCJyZW5kZXJSZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlIiwiY3JlYXRlQXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZVByZXZpZXdTdHJpbmciLCJhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlIiwiYW50aWJpb3RpY3MiLCJhbnRpYmlvdGljR3JvdXAiLCJhbnRpYmlvdGljR3JvdXBOYW1lIiwiYW50aWJpb3RpY0dyb3VwSHRtbCIsImFudGliaW90aWNOYW1lIiwiYW50aWJpb3RpY0h0bWwiLCJhbnRpYmlvdGljc0h0bWwiLCJhbnRpYmlvdGljUmVzaXN0YW5jZVN0YXRlIiwiYXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZUh0bWwiLCJoYXNPd25Qcm9wZXJ0eSIsInJlc2lzdGFuY2VTdGF0ZSIsImNyZWF0ZUFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVQcmV2aWV3SHRtbCIsIndhcm4iLCJyZXBsYWNlIiwicmVuZGVyQXNzZW1ibHlBbmFseXNpc0xpc3QiLCJhc3NlbWJseUlkIiwiYXNzZW1ibHlUb3BTY29yZSIsImFzc2VtYmx5TGF0aXR1ZGUiLCJhc3NlbWJseUxvbmdpdHVkZSIsImFzc2VtYmx5TGlzdEl0ZW1IdG1sIiwiYXNzZW1ibGllcyIsInNvcnRlZEFzc2VtYmx5SWRzIiwiYXNzZW1ibHlDb3VudGVyIiwiY29sbGVjdGlvbkFzc2VtYmx5TGlzdCIsImNvbGxlY3Rpb25Bc3NlbWJseUxpc3RGdWxsIiwiYXNzZW1ibHlMaXN0SXRlbXMiLCJkb2N1bWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJwYWFyUmVzdWx0IiwicmVzaXN0YW5jZVByb2ZpbGUiLCJjYWxjdWxhdGVBc3NlbWJseVRvcFNjb3JlIiwic2NvcmVzIiwidG9wU2NvcmUiLCJnZW9ncmFwaHkiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInJlZmVyZW5jZUlkIiwiTWF0aCIsInJvdW5kIiwic2NvcmUiLCJ0b0ZpeGVkIiwic3RUeXBlIiwiYXBwZW5kQ2hpbGQiLCJjbG9uZU5vZGUiLCJ0b29sdGlwIiwiaXNOYXZJdGVtRW5hYmxlZCIsIm5hdkl0ZW1OYW1lIiwibmF2SXRlbSIsImVuYWJsZU5hdkl0ZW0iLCJkaXNhYmxlTmF2SXRlbSIsImNsZWFyQ29sbGVjdGlvbkFzc2VtYmx5TGlzdCIsInJlbW92ZUNvbGxlY3Rpb25UcmVlUGFuZWwiLCJjb2xsZWN0aW9uVHJlZVR5cGUiLCJjb2xsZWN0aW9uVHJlZVBhbmVsSWQiLCIkY29sbGVjdGlvblRyZWVQYW5lbCIsInJlbW92ZSIsInJlbW92ZUNvbGxlY3Rpb25UcmVlUGFuZWxzIiwiY29sbGVjdGlvblRyZWVzIiwiY2xvc2VDb2xsZWN0aW9uIiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsImluaXRFbXB0eUNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uVHJlZVR5cGVzIiwiZm9yRWFjaCIsInJlbmRlckNvbGxlY3Rpb25UcmVlQnV0dG9ucyIsInJlbmRlckNvbGxlY3Rpb25UcmVlQnV0dG9uIiwib3BlblRyZWVCdXR0b24iLCJjb2xsZWN0aW9uVHJlZU5hbWUiLCJuYW1lIiwib3BlblRyZWVCdXR0b25UZW1wbGF0ZSIsIiRjb2xsZWN0aW9uQ29udHJvbHNTaG93VHJlZSIsImFwcGVuZCIsInJlbmRlckNvbGxlY3Rpb25UcmVlcyIsImNvbGxlY3Rpb25UcmVlT3B0aW9ucyIsInJlbmRlckNvbGxlY3Rpb25UcmVlIiwiaW5pdENvbGxlY3Rpb24iLCJjb2xsZWN0aW9uQXNzZW1ibGllcyIsImNvbGxlY3Rpb25UcmVlRGF0YSIsImRhdGEiLCJnZXRDb2xsZWN0aW9uIiwiJGNvbGxlY3Rpb25QYW5lbCIsImFkZFJlc2lzdGFuY2VQcm9maWxlVG9Db2xsZWN0aW9uIiwic29ydGVkQXNzZW1ibGllcyIsImxlYXZlc09yZGVyIiwibGVhZkNvdW50ZXIiLCJsZWFmIiwiaWQiLCJhc3NlbWJseUlkcyIsImxhc3RBc3NlbWJseUlkIiwibGFzdEFzc2VtYmx5VGltZXN0YW1wIiwidGltZXN0YW1wIiwibW9tZW50IiwiZm9ybWF0IiwidGltZWFnbyIsIkRhdGUiLCJtYXhpbWl6ZUNvbGxlY3Rpb24iLCJyZXF1ZXN0ZWRDb2xsZWN0aW9uSWQiLCJkaXNwbGF5TGFiZWxzIiwiaGlkZUxhYmVscyIsImdyb3VwQXNzZW1ibGllc0J5UG9zaXRpb24iLCJhc3NlbWJseVBvc2l0aW9uTGF0aXR1ZGUiLCJhc3NlbWJseVBvc2l0aW9uTG9uZ2l0dWRlIiwiYXNzZW1ibHlMYXRMbmciLCJncm91cGVkUG9zaXRpb25zIiwiaSIsIkFTU0VNQkxZX01FVEFEQVRBIiwidG9TdHJpbmciLCJjcmVhdGVHcm91cE1hcmtlciIsImdyb3VwQXNzZW1ibHlJZHMiLCJncm91cE1hcmtlckxhdCIsImdyb3VwTWFya2VyTG5nIiwiZ3JvdXBTaXplIiwibWFya2VySWNvbiIsImdyb3VwUG9zaXRpb24iLCJncm91cFBvc2l0aW9uU3RyaW5nIiwibWFya2VyIiwiaWNvbiIsIm9wdGltaXplZCIsIm9wZW5Bc3NlbWJseVBhbmVsIiwicmVtb3ZlQWxsR3JvdXBNYXJrZXJzIiwiZ3JvdXBNYXJrZXIiLCJhbGxHcm91cE1hcmtlcnMiLCJzZXRNYXAiLCJwcm9wIiwidHJpZ2dlck1hcE1hcmtlcnMiLCJzZWxlY3RlZEFzc2VtYmx5SWRzIiwiYXNzZW1ibHlNYXJrZXJCb3VuZHMiLCJwb3NpdGlvblN0cmluZyIsInBvc2l0aW9uR3JvdXAiLCJwb3NpdGlvbkdyb3VwTGF0IiwicG9zaXRpb25Hcm91cExuZyIsImV4dGVuZCIsImlzRW1wdHkiLCJzZXRDZW50ZXIiLCJzZXRab29tIiwicGFuVG9Cb3VuZHMiLCJmaXRCb3VuZHMiLCJzZWxlY3RUcmVlTm9kZXMiLCJpbkFycmF5Iiwic2VsZWN0ZWRPcHRpb24iLCJ0cmVlQ2FudmFzIiwidmFsIiwiYnJhbmNoZXMiLCJsYWJlbCIsInVzZXJBc3NlbWJseUlkIiwicmVzaXN0YW5jZVByb2ZpbGVTdHJpbmciLCJhZGRyZXNzIiwiZHJhdyIsInNldE5vZGVDb2xvdXJBbmRTaGFwZSIsInVuZ3JvdXBlZFJlc2lzdGFuY2VQcm9maWxlIiwiYW50aWJpb3RpY1Jlc2lzdGFuY2UiLCJzZXRUcmVlVHlwZSIsImNvbGxlY3Rpb25UcmVlUGFuZWxIdG1sIiwiY29sbGVjdGlvblRyZWVQYW5lbFRlbXBsYXRlU291cmNlIiwiY29sbGVjdGlvblRyZWVQYW5lbFRlbXBsYXRlIiwiSGFuZGxlYmFycyIsImNvbXBpbGUiLCJ0ZW1wbGF0ZUNvbnRleHQiLCJhdHRyaWJ1dGVQYW5lbElkIiwiYXR0cmlidXRlQ29sbGVjdGlvbklkIiwiYXR0cmlidXRlQ29sbGVjdGlvblRyZWVUeXBlIiwiY29sbGVjdGlvblRyZWVUaXRsZSIsInByZXBlbmQiLCJwaHlsb0NhbnZhc0VsZW1lbnRJZCIsIlBoeWxvQ2FudmFzIiwiVHJlZSIsImdldEVsZW1lbnRCeUlkIiwiaGlzdG9yeV9jb2xsYXBzZWQiLCJwYXJzZU53ayIsInRyZWVUeXBlIiwic2VsZWN0ZWROb2RlSWRzIiwibm9kZUlkcyIsInJlc2l6ZVRvQ29udGFpbmVyIiwiZHJhd24iLCJsZWF2ZXMiLCJzb3J0IiwibGVhZk9uZSIsImxlYWZUd28iLCJjZW50ZXJ5IiwibmV3aWNrU3RyaW5nIiwiZGVidWciLCJuZXdpY2tTdHJpbmdXaXRoTGFiZWxzIiwicG9wdWxhdGVMaXN0T2ZBbnRpYmlvdGljcyIsImRlc2VsZWN0QWxsVHJlZU5vZGVzIiwic2VsZWN0Tm9kZXMiLCJyb290Iiwic2V0U2VsZWN0ZWQiLCJzaG93Q29sbGVjdGlvbk1ldGFkYXRhT25NYXAiLCJyaW5nVGltZW91dCIsImV4aXN0aW5nTWFya2VycyIsImV4aXN0aW5nTWFya2VyQ291bnRlciIsImFzc2VtYmx5TWV0YWRhdGEiLCJnZXRQb3NpdGlvbiIsInBhblRvIiwicmluZ0ZpeGVkIiwiY29udGFpbm1lbnQiLCJ1bmRlZmluZWQiLCJmYWRlSW4iLCJzdG9wUHJvcGFnYXRpb24iLCJnZW5lcmF0ZVllYXJIdG1sRWxlbWVudHMiLCJzdGFydFllYXIiLCJlbmRZZWFyIiwieWVhckVsZW1lbnQiLCJ5ZWFyQ291bnRlciIsInllYXJFbGVtZW50VGVtcGxhdGUiLCJ5ZWFyRWxlbWVudHMiLCJnZW5lcmF0ZU1vbnRoSHRtbEVsZW1lbnRzIiwibW9udGhFbGVtZW50IiwibW9udGhDb3VudGVyIiwibGlzdE9mTW9udGhzIiwibW9udGhFbGVtZW50VGVtcGxhdGUiLCJtb250aEVsZW1lbnRzIiwiZ2VuZXJhdGVEYXlIdG1sRWxlbWVudHMiLCJ5ZWFyIiwibW9udGgiLCJkYXlFbGVtZW50IiwidG90YWxOdW1iZXJPZkRheXMiLCJnZXRUb3RhbE51bWJlck9mRGF5c0luTW9udGgiLCJkYXlDb3VudGVyIiwiZGF5RWxlbWVudFRlbXBsYXRlIiwiZGF5RWxlbWVudHMiLCJnZXREYXRlIiwicG9wdWxhdGVEYXlTZWxlY3QiLCIkc2VsZWN0RWxlbWVudCIsInNlbGVjdGVkWWVhciIsInNlbGVjdGVkTW9udGgiLCIkc2VsZWN0IiwiZmlsZUlkIiwiZmlsZU5hbWUiLCIkdGltZXN0YW1wRGF5U2VsZWN0Iiwic2VsZWN0ZWREYXkiLCJ0aW1lc3RhbXBQYXJ0IiwiZGF0ZSIsImRhdGV0aW1lIiwibmV4dCIsInNjcm9sbFRvcCIsImhlaWdodCIsInVwZGF0ZU1ldGFkYXRhUHJvZ3Jlc3NCYXIiLCJmYXN0YUZpbGVzQW5kTWV0YWRhdGEiLCJzZWxlY3RlZEZhc3RhRmlsZU5hbWUiLCJkcm9wWm9uZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZG5hU2VxdWVuY2VSZWdleCIsInRvdGFsQ29udGlnc1N1bSIsInBhcnNlRmFzdGFGaWxlIiwiZSIsImZpbGVDb3VudGVyIiwiZmlsZSIsImRyb3BwZWRGaWxlcyIsImNvbnRpZ3MiLCJjb250aWdQYXJ0cyIsImNvbnRpZ0NvdW50ZXIiLCJkbmFTZXF1ZW5jZVN0cmluZ3MiLCJkbmFTZXF1ZW5jZVN0cmluZyIsImRuYVNlcXVlbmNlSWQiLCJhc3NlbWJseUxpc3RJdGVtIiwidGFyZ2V0IiwicmVzdWx0IiwidHJpbSIsInNwbGl0IiwiZmlsdGVyIiwiZWxlbWVudCIsInRvdGFsIiwiaW52YWxpZCIsImluZGl2aWR1YWwiLCJwYXJ0IiwiY29udGlnUGFydENvdW50ZXIiLCJjb250aWdQYXJ0c05vSWREZXNjcmlwdGlvbiIsInNwbGljZSIsInRlc3QiLCJqb2luIiwic29ydGVkRG5hU2VxdWVuY2VTdHJpbmdzIiwiYSIsImIiLCJhc3NlbWJseU51Y2xlb3RpZGVTdW1zIiwic29ydGVkRG5hU2VxdWVuY2VTdHJpbmdDb3VudGVyIiwiYXNzZW1ibHlOdWNsZW90aWRlc0hhbGZTdW0iLCJmbG9vciIsImFzc2VtYmx5TnVjbGVvdGlkZXNTdW0iLCJhc3NlbWJseU41MCIsImF2ZXJhZ2VOdWNsZW90aWRlc1BlclNlcXVlbmNlIiwiJGFzc2VtYmx5TWV0YWRhdGFGb3JtQ29udGFpbmVyIiwiJGFzc2VtYmx5TWV0YWRhdGFGb3JtSGVhZGVyIiwiJGFzc2VtYmx5TWV0YWRhdGFGb3JtIiwiYXNzZW1ibHlTYW1wbGVEYXRldGltZUZvcm1CbG9jayIsImFzc2VtYmx5U2FtcGxlTG9jYXRpb25Gb3JtQmxvY2siLCJhc3NlbWJseVNhbXBsZVNvdXJjZUZvcm1CbG9jayIsImFzc2VtYmx5Q29udHJvbHNGb3JtQmxvY2siLCJhc3NlbWJseU1lYXRhZGF0YURvbmVCbG9jayIsIiRhc3NlbWJseVNhbXBsZURhdGV0aW1lRm9ybUJsb2NrIiwiJGFzc2VtYmx5U2FtcGxlTG9jYXRpb25Gb3JtQmxvY2siLCIkYXNzZW1ibHlTYW1wbGVTb3VyY2VGb3JtQmxvY2siLCIkYXNzZW1ibHlDb250cm9sc0Zvcm1CbG9jayIsIiRhc3NlbWJseU1ldGFkYXRhTGlzdEl0ZW0iLCJkcmF3TjUwQ2hhcnQiLCJlcSIsImF1dG9jb21wbGV0ZUlucHV0IiwicGxhY2VzIiwiU2VhcmNoQm94IiwiYm91bmRzIiwiZ2V0UGxhY2VzIiwicGxhY2UiLCJnZW9tZXRyeSIsImxvY2F0aW9uIiwibGF0IiwibG5nIiwiZm9ybWF0dGVkQWRkcmVzcyIsImZvcm1hdHRlZF9hZGRyZXNzIiwiY3VycmVudElucHV0RWxlbWVudCIsImJsdXIiLCJzZXRQb3NpdGlvbiIsInNldFZpc2libGUiLCJ0eXBlcyIsInNvdXJjZSIsImNoYXJ0RGF0YSIsImNoYXJ0V2lkdGgiLCJjaGFydEhlaWdodCIsInhTY2FsZSIsImQzIiwiZXh0ZW50IiwiZGF0dW0iLCJzZXF1ZW5jZUxlbmd0aCIsInNjYWxlIiwibGluZWFyIiwiZG9tYWluIiwieVNjYWxlIiwieEF4aXMiLCJzdmciLCJheGlzIiwib3JpZW50IiwidGlja3MiLCJ5QXhpcyIsInNlbGVjdCIsImNhbGwiLCJzZWxlY3RBbGwiLCJlbnRlciIsImluZGV4IiwibGluZSIsIngiLCJ5Iiwicm9vdExpbmVEYXRhIiwicm9vdExpbmUiLCJpbnRlcnBvbGF0ZSIsIm41MEdyb3VwIiwic2VxdWVuY2VOdW1iZXIiLCJzdW0iLCJkNTBMaW5lc0RhdGEiLCJkNTBMaW5lIiwiY3N2RmlsZVR5cGVSZWdleCIsImhhbmRsZURyYWdPdmVyIiwicHJldmVudERlZmF1bHQiLCJkYXRhVHJhbnNmZXIiLCJkcm9wRWZmZWN0IiwiaGFuZGxlQ3N2RHJvcCIsImhhbmRsZURyb3AiLCJpc0Z1bGxzY3JlZW5BY3RpdmUiLCJicmluZ01hcFBhbmVsVG9GdWxsc2NyZWVuIiwibWVzc2FnZVRleHQiLCJtZXJnZSIsImFsbERyb3BwZWRGaWxlcyIsIkZpbGVSZWFkZXIiLCJmb2N1cyIsIm1hdGNoIiwiZmlsZVJlYWRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWFkQXNUZXh0IiwidXBkYXRlUmFuZ2VOYXZpZ2F0aW9uQnV0dG9ucyIsImhhbmRsZVZhbHVlIiwicmVtb3ZlQXR0ciIsInVwZGF0ZVNlbGVjdGVkRmlsZXNVSSIsImVsZW1lbnRDb3VudGVyIiwic2VsZWN0ZWRGYXN0YUZpbGVFbGVtZW50Iiwic2VsZWN0ZWRGYXN0YUZpbGVFbGVtZW50TWV0YWRhdGEiLCJyZXNldFBhbmVsQXNzZW1ibHlVcGxvYWROYXZpZ2F0b3IiLCJyZXNldFBhbmVsQXNzZW1ibHlVcGxvYWRQcm9ncmVzcyIsInJlc2V0UGFuZWxBc3NlbWJseVVwbG9hZE1ldGFkYXRhIiwid2lkdGgiLCJyZXNldFBhbmVsQXNzZW1ibHlVcGxvYWRBbmFseXRpY3MiLCJyZXNldEFzc2VtbHlVcGxvYWQiLCJ1cGRhdGVTZWxlY3RlZEZpbGVzU3VtbWFyeSIsImNvbnRpZ3NUb3RhbE51bWJlciIsImtleSIsImFzc2VtYmx5TGlzdFNsaWRlckV2ZW50SGFuZGxlciIsInRvZ2dsZUNsYXNzIiwidG90YWxOdW1iZXJPZk1ldGFkYXRhSXRlbXMiLCJudW1iZXJPZk5vbkVtcHR5TWV0YWRhdGFJdGVtcyIsIm5ld1Byb2dyZXNzQmFyUGVyY2VudGFnZVZhbHVlIiwiYXNzZW1ibHlTY29yZXMiLCJzb3J0ZWRTY29yZXMiLCJ1cGRhdGVBc3NlbWJseVVwbG9hZFByb2dyZXNzVUkiLCJudW1iZXJPZkFuYWx5c2lzUmVzdWx0c1BlckFzc2VtYmx5IiwiJGFzc2VtYmx5Um93IiwiJGFzc2VtYmx5Um93UHJvZ3Jlc3NCYXIiLCJzdGF0dXNDb21wbGV0ZUh0bWwiLCJjdXJyZW50UHJvZ3Jlc3NCYXJQZXJjZW50YWdlVmFsdWUiLCJwYXJzZUZsb2F0IiwicHJvZ3Jlc3NTdGVwU2l6ZSIsIm51bWJlck9mRmlsZXNQcm9jZXNzaW5nIiwiYXNzZW1ibHlOYW1lIiwiJGFzc2VtYmxpZXNVcGxvYWRQcm9jZXNzZWQiLCJ1cGRhdGVDb2xsZWN0aW9uVXBsb2FkUHJvZ3Jlc3NVSSIsInRvdGFsTnVtYmVyT2ZBbmFseXNpc1Jlc3VsdHMiLCIkY29sbGVjdGlvblVwbG9hZFByb2dyZXNzQmFyIiwicmVzaXN0YW5jZVByb2ZpbGVHcm91cE5hbWUiLCJyZXNpc3RhbmNlUHJvZmlsZUdyb3VwIiwicmVzaXN0YW5jZVByb2ZpbGVHcm91cHMiLCIkYW50aWJpb3RpY1NlbGVjdEVsZW1lbnQiLCJhbnRpYmlvdGljTmFtZXMiLCJhbnRpYmlvdGljT3B0aW9uSHRtbEVsZW1lbnRzIiwidG9Mb3dlckNhc2UiLCJhbnRpYmlvdGljQ291bnRlciIsIm1lcmdlZENvbGxlY3Rpb25UcmVlRGF0YSIsIm1lcmdlZENvbGxlY3Rpb25UcmVlSWQiLCJhc3NlbWJseUlkc0RhdGEiLCJtYXRjaEFzc2VtYmx5TGlzdEJ1dHRvbiIsIm1lcmdlV2l0aEJ1dHRvbiIsIm1lcmdlQ29sbGVjdGlvblRyZWVzQnV0dG9uIiwicmVzdWx0S2V5IiwibnVtYmVyT2ZBbmFseXNpc1Jlc3VsdHNQZXJBbGxBc3NlbWJsaWVzIiwibnVtYmVyT2ZBbmFseXNpc1Jlc3VsdHNQZXJDb2xsZWN0aW9uIiwibm90aWZpY2F0aW9ucyIsImluZGV4T2YiLCJmdWxsc2NyZWVuTmFtZSIsImZ1bGxzY3JlZW5FbGVtZW50Iiwic2hvd09uTWFwQ2hlY2tib3hlcyIsInNlbGVjdGVkQXNzZW1ibHlJZCIsImFsbENoZWNrZWRDaGVja2JveGVzIiwiUEFSQUxMRUxfVVBMT0FEX0FTU0VNQkxZX0xJTUlUIiwiQVNTRU1CTFlfVVBMT0FEX1RJTUVSIiwidXBsb2FkQXNzZW1ibHkiLCJzb2NrZXRSb29tSWQiLCJHRVRfQ09MTEVDVElPTl9JRF9USU1FUiIsImFzc2VtYmx0VXBsb2FkUHJvZ3Jlc3NUZW1wbGF0ZSIsImFzc2VtYmx5VXBsb2FkUHJvZ3Jlc3NIdG1sIiwibnVtYmVyT2ZBc3NlbWJsaWVzIiwidXNlckFzc2VtYmx5SWRzIiwiY29sbGVjdGlvbklkRGF0YSIsInVzZXJBc3NlbWJseUlkVG9Bc3NlbWJseUlkTWFwIiwiZmFzdGFGaWxlc0FuZE1ldGFkYXRhV2l0aFVwZGF0ZWRJZHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic2V0QXNzZW1ibHlNZXRhZGF0YVRpbWVzdGFtcCIsInNvdXJjZUZpbGVOYW1lIiwidGFyZ2V0RmlsZU5hbWUiLCIkc291cmNlVGltZXN0YW1wWWVhckh0bWwiLCJzb3VyY2VUaW1lc3RhbXBZZWFyVmFsdWUiLCIkc291cmNlVGltZXN0YW1wTW9udGhIdG1sIiwic291cmNlVGltZXN0YW1wTW9udGhWYWx1ZSIsIiRzb3VyY2VUaW1lc3RhbXBEYXlIdG1sIiwic291cmNlVGltZXN0YW1wRGF5VmFsdWUiLCIkdGFyZ2V0VGltZXN0YW1wWWVhckh0bWwiLCIkdGFyZ2V0VGltZXN0YW1wTW9udGhIdG1sIiwiJHRhcmdldFRpbWVzdGFtcERheUh0bWwiLCIkdGFyZ2V0VGltZXN0YW1wRGF5U2VsZWN0IiwiaXMiLCIkc291cmNlQXNzZW1ibHlNZXRhZGF0YSIsIiRzb3VyY2VBc3NlbWJseU1ldGFkYXRhTG9jYXRpb24iLCIkc291cmNlQXNzZW1ibHlNZXRhZGF0YVNvdXJjZSIsIiRhc3NlbWJseUl0ZW0iLCJ0YXJnZXRGaWxlSWQiLCIkYXNzZW1ibHlVcGxvYWRNZXRhZGF0YVBhbmVsIiwidGFyZ2V0RmlsZU1ldGFkYXRhIiwib3BlblJlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUiLCJhc3NlbWJseVBhbmVsIiwiYW50aWJpb3RpY1Jlc2lzdGFuY2VzSHRtbCIsImFudGliaW90aWNOYW1lc0h0bWwiLCJhc3NlbWJseUFudGliaW90aWNSZXNpc3RhbmNlU3RhdGUiLCJhc3NlbWJseUFsbGVsZSIsImFzc2VtYmx5QWxsZWxlTmFtZSIsImFzc2VtYmx5QWxsZWxlcyIsImFsbGVsZXMiLCJhc3NlbWJseU1sc3RIdG1sIiwibG9jdXNEYXRhSHRtbCIsImFsbGVsZURhdGFIdG1sIiwibG9jdXNJZCIsImFsbGVsZUlkIiwic2NvcmVUZXh0IiwiYXNzZW1ibHlTY29yZXNIdG1sIiwiYXNzZW1ibHlTY29yZXNEYXRhSHRtbCIsInNvcnRlZEFzc2VtYmx5U2NvcmVzIiwiYXNzZW1ibHlTY29yZVJlZmVyZW5jZUlkMSIsImFzc2VtYmx5U2NvcmVSZWZlcmVuY2VJZDIiLCJhc3NlbWJseVNjb3JlQ291bnRlciIsInNjb3JlRGF0YSIsIm5ld1dpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImN1cnJlbnROb2RlVGV4dFNpemUiLCJ0ZXh0U2l6ZSIsInNldFRleHRTaXplIiwiY3VycmVudE5vZGVTaXplIiwiYmFzZU5vZGVTaXplIiwic2V0Tm9kZVNpemUiLCJ0b2dnbGVMYWJlbHMiLCJtZXJnZUJ1dHRvbiIsInJlcXVlc3REYXRhIiwibWVyZ2VXaXRoQ29sbGVjdGlvbklkIiwiZ2V0IiwibG9hZCIsImFjdGl2ZUZ1bGxzY3JlZW5FbGVtZW50IiwiYnJpbmdGdWxsc2NyZWVuVG9QYW5lbCIsImFkZERvbUxpc3RlbmVyIiwiZ2V0Q2VudGVyIiwiYnJpbmdQYW5lbFRvRnVsbHNjcmVlbiIsImFuZFNob3dQYW5lbCIsImdldERpdiIsInBhbmVsSWQiLCJmdWxsc2NyZWVuIiwiY2xvbmUiLCJ0cmVlSHRtbEVsZW1lbnQiLCJjb2xsZWN0aW9uVHJlZUZ1bGxzY3JlZW4iLCJ0cmVlTWFuaXB1bGF0aW9uSGFuZGxlciIsImNhbnZhc0VsZW1lbnQiLCJjYW52YXNPZmZzZXQiLCJvZmZzZXQiLCJjYW52YXNUb3BMZWZ0IiwidHJhbnNsYXRlQ2xpY2tZIiwidHJhbnNsYXRlQ2xpY2tYIiwiY2FudmFzQm90dG9tUmlnaHQiLCJib3R0b20iLCJyaWdodCIsImZpbHRlcmVkQXNzZW1ibGllc0h0bWwiLCJ2aXNpYmxlQXNzZW1ibHlMaXN0SXRlbUNvdW50ZXIiLCJjZW50ZXJ4IiwiYXNzZW1ibHlMaXN0SHRtbCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsInJlZHJhd09yaWdpbmFsVHJlZSIs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bVYsRUFBa0JDLFNBSXJDbmYsRUFBdUJLLEVBQTJCMUcsS0FBSyx5Q0FBMkN1SyxFQUFLQyxHQUFLLE1BQU0sR0FDbEhrYixFQUF1QjlkLFlBQVl2QixFQUFxQndCLFdBQVUsSUFFbEU4ZCxHQUFrRSxHQUd0RXJiLEdBQTRCLENBSTVCcWIsR0FBaUMsRUFDakN6ckIsRUFBRSw2Q0FBNkM2RyxPQUUvQzdHLEVBQUUsNkNBQTZDK0csTUFLbkQsS0FEQSxHQUFJNGtCLEdBQW1CcGYsRUFBdUIsR0FDdkNvZixFQUFpQkMsWUFDcEJELEVBQWlCRSxZQUFZRixFQUFpQkMsV0FJbERELEdBQWlCamUsWUFBWThkLEdBRTdCamYsRUFBdUJ6RyxLQUFLLHNDQUFzQzhILFVBR3RFNU4sR0FBRSxpREFBaURnSCxHQUFHLFFBQVMsU0FBU3FULEdBQ3BFLEdBQUlwVCxHQUFlakgsRUFBRWtILE1BQU1DLFFBQVEsZUFBZUMsS0FBSyxzQkFDbkRtRixFQUF5QnZNLEVBQUUsNEJBRy9CQyxNQUFLZSxXQUFXaUcsR0FBYzlFLEtBQUtjLE9BQU82b0IscUJBQzFDN3JCLEtBQUtlLFdBQVdpRyxHQUFjOUUsS0FBS2MsT0FBT3FRLFNBQVMsS0FHbkQvRyxFQUF1QnpHLEtBQUssdUJBQXVCeUksU0FFbkRoQyxFQUF1QmdELE9BQU92UCxFQUFFLHNEQUFzRDJxQixTQUV0RnBlLEVBQXVCekcsS0FBSyxzQ0FBc0M4SCxVQUdsRTVOLEVBQUUsNENBQTRDK0csT0FFOUMvRyxFQUFFLDZDQUE2QzZHLE9BRS9Dd1QsRUFBRXlHLG1CQW9CTjlnQixFQUFFLFFBQVFnSCxHQUFHLFFBQVMscUNBQXNDLFdBQ3hELEdBQUkra0IsR0FBVS9yQixFQUFFa0gsTUFBTUMsUUFBUSw0QkFBNEJyQixLQUFLLHFCQUMvRGdsQixJQUF3QmlCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBBcHBcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuJChmdW5jdGlvbigpe1xuXG4gICAgJ3VzZSBzdHJpY3QnOyAvLyBBdmFpbGFibGUgaW4gRUNNQVNjcmlwdCA1IGFuZCBpZ25vcmVkIGluIG9sZGVyIHZlcnNpb25zLiBGdXR1cmUgRUNNQVNjcmlwdCB2ZXJzaW9ucyB3aWxsIGVuZm9yY2UgaXQgYnkgZGVmYXVsdC5cblxuICAgIC8vIFdHU0Egbm93IGNhbiBzcGVhayFcbiAgICBXR1NULnNwZWFrID0gZmFsc2U7XG5cbiAgICBpZiAoV0dTVC5zcGVhaykge1xuICAgICAgICB2YXIgbWVzc2FnZSA9IG5ldyBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UoJ1dlbGNvbWUgdG8gV0dTQScpO1xuICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnNwZWFrKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBvbmVycm9yXG4gICAgICogQHBhcmFtIHt9IGVycm9yXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB3aW5kb3cub25lcnJvciA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZXJyb3IubWVzc2FnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tXR1NUXVtFcnJvcl0gJyArIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1dHU1RdW0Vycm9yXScpO1xuICAgICAgICAgICAgY29uc29sZS5kaXIoZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hvd05vdGlmaWNhdGlvbihlcnJvcik7XG4gICAgfTtcblxuICAgIC8vIFdHU1QuZXZlbnRzID0ge1xuICAgIC8vICAgICByZW5kZXJlZENvbGxlY3Rpb25UcmVlRXZlbnQ6IG5ldyBDdXN0b21FdmVudCgncmVuZGVyZWRDb2xsZWN0aW9uVHJlZScsIHt9KVxuICAgIC8vIH07XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBTdG9yZSBhcHBsaWNhdGlvbiBzdGF0ZVxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgLy92YXIgV0dTVCA9IHdpbmRvdy5XR1NUIHx8IHt9O1xuXG4gICAgV0dTVC5wYW5lbHMgPSB7XG4gICAgICAgIGFzc2VtYmx5OiB7XG4gICAgICAgICAgICB0b3A6IDgwLFxuICAgICAgICAgICAgbGVmdDogOTBcbiAgICAgICAgfSxcbiAgICAgICAgY29sbGVjdGlvbjoge1xuICAgICAgICAgICAgdG9wOiA4MCxcbiAgICAgICAgICAgIGxlZnQ6IDkwXG4gICAgICAgIH0sXG4gICAgICAgIGNvbGxlY3Rpb25UcmVlOiB7XG4gICAgICAgICAgICB0b3A6IDEyMCxcbiAgICAgICAgICAgIGxlZnQ6IDE4MCAgXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmdlZENvbGxlY3Rpb25UcmVlOiB7XG4gICAgICAgICAgICB0b3A6IDEyMCxcbiAgICAgICAgICAgIGxlZnQ6IDE4MFxuICAgICAgICB9LFxuICAgICAgICByZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlOiB7XG4gICAgICAgICAgICB0b3A6IDgwLFxuICAgICAgICAgICAgbGVmdDogOTBcbiAgICAgICAgfSxcbiAgICAgICAgYXNzZW1ibHlVcGxvYWROYXZpZ2F0b3I6IHtcbiAgICAgICAgICAgIHRvcDogNzAsXG4gICAgICAgICAgICBsZWZ0OiAxMTBcbiAgICAgICAgfSxcbiAgICAgICAgYXNzZW1ibHlVcGxvYWRBbmFseXRpY3M6IHtcbiAgICAgICAgICAgIHRvcDogNzAsXG4gICAgICAgICAgICBsZWZ0OiA3MjZcbiAgICAgICAgfSxcbiAgICAgICAgYXNzZW1ibHlVcGxvYWRNZXRhZGF0YToge1xuICAgICAgICAgICAgdG9wOiAyMjUsXG4gICAgICAgICAgICBsZWZ0OiAxMTBcbiAgICAgICAgfSxcbiAgICAgICAgYXNzZW1ibHlVcGxvYWRQcm9ncmVzczoge1xuICAgICAgICAgICAgdG9wOiA4MCxcbiAgICAgICAgICAgIGxlZnQ6IDkwXG4gICAgICAgIH0sXG4gICAgICAgIG1hcDoge1xuICAgICAgICAgICAgdG9wOiAnMTUlJyxcbiAgICAgICAgICAgIGxlZnQ6ICcyMCUnXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgV0dTVC5hc3NlbWJseSA9IHtcbiAgICAgICAgYW5hbHlzaXM6IHtcbiAgICAgICAgICAgIFVQTE9BRF9PSzogJ1VQTE9BRF9PSycsXG4gICAgICAgICAgICBNRVRBREFUQV9PSzogJ01FVEFEQVRBX09LJyxcbiAgICAgICAgICAgIE1MU1RfUkVTVUxUOiAnTUxTVF9SRVNVTFQnLFxuICAgICAgICAgICAgUEFBUlNOUF9SRVNVTFQ6ICdQQUFSU05QX1JFU1VMVCcsXG4gICAgICAgICAgICBGUF9DT01QOiAnRlBfQ09NUCcsXG4gICAgICAgICAgICBDT1JFOiAnQ09SRSdcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBXR1NULmNvbGxlY3Rpb24gPSB7XG4gICAgICAgIGFuYWx5c2lzOiB7XG4gICAgICAgICAgICBDT0xMRUNUSU9OX1RSRUU6ICdDT0xMRUNUSU9OX1RSRUUnLFxuICAgICAgICAgICAgQ09SRV9NVVRBTlRfVFJFRTogJ0NPUkVfTVVUQU5UX1RSRUUnXG4gICAgICAgIH0sXG4gICAgICAgIHJlcHJlc2VudGF0aXZlOiB7XG4gICAgICAgICAgICB0cmVlOiB7fSxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB7fVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIFdHU1QudXBsb2FkID0ge1xuICAgICAgICBjb2xsZWN0aW9uOiB7fSxcbiAgICAgICAgYXNzZW1ibHk6IHt9XG4gICAgfTtcblxuICAgIFdHU1Quc2V0dGluZ3MgPSBXR1NULnNldHRpbmdzIHx8IHt9O1xuICAgIFdHU1Quc2V0dGluZ3MucmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uSWQgPSAnMWZhYjUzYjAtZTdmZS00NjYwLWIzNGUtMjFkNTAxMDE3Mzk3JzsvLyc1OWI3OTJhYS1iODkyLTQxMDYtYjFkZC0yZTllNzhhYmVmYzQnO1xuXG4gICAgV0dTVC5hbnRpYmlvdGljTmFtZVJlZ2V4ID0gL1tcXFddKy9nO1xuXG4gICAgV0dTVC5zb2NrZXQgPSB7XG4gICAgICAgIC8vY29ubmVjdGlvbjogaW8uY29ubmVjdChXR1NULmNvbmZpZy5zb2NrZXRBZGRyZXNzLCB7c2VjdXJlOiB0cnVlfSksXG4gICAgICAgIGNvbm5lY3Rpb246IGlvLmNvbm5lY3Qod2luZG93LldHU1QuY29uZmlnLnNvY2tldEFkZHJlc3MpLFxuICAgICAgICByb29tSWQ6ICcnXG4gICAgfTtcblxuICAgIFdHU1QuZ2VvID0ge1xuICAgICAgICBtYXA6IHtcbiAgICAgICAgICAgIGNhbnZhczoge30sXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgem9vbTogNSxcbiAgICAgICAgICAgICAgICBjZW50ZXI6IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoNDguNjkwODMzMzMzMywgOS4xNDA1NTU1NTU1NiksIC8vIG5ldyBnb29nbGUubWFwcy5MYXRMbmcoNTEuNTExMjE0LCAtMC4xMTk4MjQpLFxuICAgICAgICAgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsXG4gICAgICAgICAgICAgICAgbWluWm9vbTogMixcbiAgICAgICAgICAgICAgICBtYXhab29tOiAxMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgICAgICBhc3NlbWJseToge30sXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHt9LFxuICAgICAgICAgICAgICAgIHJlcHJlc2VudGF0aXZlVHJlZTogW10sXG4gICAgICAgICAgICAgICAgZ3JvdXA6IHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFya2VyQm91bmRzOiBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzKCksXG4gICAgICAgICAgICBzZWFyY2hCb3hCb3VuZHM6IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoKSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVzY3JpcHRpb25cbiAgICAgICAgICAgICAqIEBtZXRob2QgaW5pdFxuICAgICAgICAgICAgICogQHJldHVybiBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgV0dTVC5nZW8ubWFwLmNhbnZhcyA9IG5ldyBnb29nbGUubWFwcy5NYXAoJCgnLndnc3QtbWFwJylbMF0sIFdHU1QuZ2VvLm1hcC5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICBXR1NULmdlby5tYXAubWFya2Vycy5tZXRhZGF0YSA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbmV3IGdvb2dsZS5tYXBzLkxhdExuZyg1MS41MTEyMTQsIC0wLjExOTgyNCksXG4gICAgICAgICAgICAgICAgICAgIG1hcDogV0dTVC5nZW8ubWFwLmNhbnZhcyxcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBCaWFzIHRoZSBTZWFyY2hCb3ggcmVzdWx0cyB0b3dhcmRzIHBsYWNlcyB0aGF0IGFyZSB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGUgY3VycmVudCBtYXAncyB2aWV3cG9ydC5cbiAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihXR1NULmdlby5tYXAuY2FudmFzLCAnYm91bmRzX2NoYW5nZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgV0dTVC5nZW8ubWFwLnNlYXJjaEJveEJvdW5kcyA9IFdHU1QuZ2VvLm1hcC5jYW52YXMuZ2V0Qm91bmRzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IC8vIGluaXRcbiAgICAgICAgfSxcbiAgICAgICAgcGxhY2VTZWFyY2hCb3g6IHt9IC8vIFN0b3JlIEdvb2dsZSBTZWFyY2hCb3ggb2JqZWN0IGZvciBlYWNoIGRyb3BwZWQgZmlsZVxuICAgIH07XG5cbiAgICBXR1NULmFsZXJ0ID0ge1xuICAgICAgICBzdGF0dXM6IHtcbiAgICAgICAgICAgIFNVQ0NFU1M6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgIEZBSUxVUkU6ICdmYWlsdXJlJ1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFdHU1QuaW5pdCA9IHtcbiAgICAgICAgYWxsOiB7XG4gICAgICAgICAgICBTT0NLRVRfQ09OTkVDVDogJ1NvY2tldCBjb25uZWN0ZWQnLFxuICAgICAgICAgICAgU09DS0VUX1JPT01fSUQ6ICdSZWNlaXZlZCBzb2NrZXQgcm9vbSBpZCcsXG4gICAgICAgICAgICBSRVBSRVNFTlRBVElWRV9DT0xMRUNUSU9OX1RSRUVfTUVUQURBVEE6ICdMb2FkZWQgcmVwcmVzZW50YXRpdmUgY29sbGVjdGlvbnRyZWUgbWV0YWRhdGEnXG4gICAgICAgIH0sXG4gICAgICAgIGxvYWRlZDogW11cbiAgICB9O1xuXG4gICAgV0dTVC5kcmFnQW5kRHJvcCA9IFdHU1QuZHJhZ0FuZERyb3AgfHwge307XG4gICAgV0dTVC5kcmFnQW5kRHJvcC5maWxlcyA9IFtdO1xuICAgIFdHU1QuZHJhZ0FuZERyb3AuZmFzdGFGaWxlTmFtZVJlZ2V4ID0gL14uKyguZmF8LmZhc3wuZm5hfC5mZm58LmZhYXwuZnJufC5mYXN0YXwuY29udGlnKSQvaTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBpbml0QXBwXG4gICAgICogQHBhcmFtIHt9IGxvYWRlZFxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGluaXRBcHAgPSBmdW5jdGlvbihsb2FkZWQpIHtcbiAgICAgICAgV0dTVC5pbml0LmxvYWRlZC5wdXNoKGxvYWRlZCk7XG4gICAgICAgIGlmIChXR1NULmluaXQubG9hZGVkLmxlbmd0aCA9PT0gT2JqZWN0LmtleXMoV0dTVC5pbml0LmFsbCkubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgaW5pdEh0bWxFbGVtZW50ID0gJCgnLndnc3QtaW5pdCcpO1xuICAgICAgICAgICAgaW5pdEh0bWxFbGVtZW50LmZpbmQoJy53Z3N0LWluaXQtc3RhdHVzJykuaHRtbCgnJyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaW5pdEh0bWxFbGVtZW50LmZhZGVPdXQoJ2Zhc3QnKTtcbiAgICAgICAgICAgIH0sIDUwMCk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSBXR1NULmluaXQ7XG4gICAgICAgIH0gLy8gaWZcbiAgICB9O1xuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gUGFuZWxzXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2Qgc2hvd1BhbmVsQm9keUNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge30gcGFuZWxOYW1lc1xuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIHNob3dQYW5lbEJvZHlDb250ZW50ID0gZnVuY3Rpb24ocGFuZWxOYW1lcykge1xuICAgICAgICAvLyBPdmVyd3JpdGUgZnVuY3Rpb25cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlc2NyaXB0aW9uXG4gICAgICAgICAqIEBtZXRob2Qgc2hvd1BhbmVsQm9keUNvbnRlbnRcbiAgICAgICAgICogQHBhcmFtIHt9IHBhbmVsTmFtZVxuICAgICAgICAgKiBAcmV0dXJuIFxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHNob3dQYW5lbEJvZHlDb250ZW50ID0gZnVuY3Rpb24ocGFuZWxOYW1lKSB7XG4gICAgICAgICAgICB2YXIgcGFuZWxCb2R5Q29udGVudCA9ICQoJ1tkYXRhLXBhbmVsLW5hbWU9XCInICsgcGFuZWxOYW1lICsgJ1wiXSAud2dzdC1wYW5lbC1ib2R5LWNvbnRlbnQnKTtcbiAgICAgICAgICAgIHBhbmVsQm9keUNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQcm9jZXNzIG11bHRpcGxlIHBhbmVsc1xuICAgICAgICBpZiAoJC5pc0FycmF5KHBhbmVsTmFtZXMpKSB7XG5cbiAgICAgICAgICAgIHZhciBwYW5lbE5hbWVDb3VudGVyID0gcGFuZWxOYW1lcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgcGFuZWxOYW1lO1xuXG4gICAgICAgICAgICBmb3IgKDtwYW5lbE5hbWVDb3VudGVyICE9PSAwOykge1xuICAgICAgICAgICAgICAgIHBhbmVsTmFtZUNvdW50ZXIgPSBwYW5lbE5hbWVDb3VudGVyIC0gMTtcblxuICAgICAgICAgICAgICAgIHBhbmVsTmFtZSA9IHBhbmVsTmFtZXNbcGFuZWxOYW1lQ291bnRlcl07XG5cbiAgICAgICAgICAgICAgICBzaG93UGFuZWxCb2R5Q29udGVudChwYW5lbE5hbWUpO1xuICAgICAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICAvLyBQcm9jZXNzIHNpbmdsZSBwYW5lbFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hvd1BhbmVsQm9keUNvbnRlbnQocGFuZWxOYW1lcyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIHNob3dQYW5lbFxuICAgICAqIEBwYXJhbSB7fSBwYW5lbE5hbWVzXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgc2hvd1BhbmVsID0gZnVuY3Rpb24ocGFuZWxOYW1lcykge1xuICAgICAgICAvLyBPdmVyd3JpdGUgZnVuY3Rpb25cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlc2NyaXB0aW9uXG4gICAgICAgICAqIEBtZXRob2Qgc2hvd1BhbmVsXG4gICAgICAgICAqIEBwYXJhbSB7fSBwYW5lbE5hbWVcbiAgICAgICAgICogQHJldHVybiBcbiAgICAgICAgICovXG4gICAgICAgIHZhciBzaG93UGFuZWwgPSBmdW5jdGlvbihwYW5lbE5hbWUpIHtcbiAgICAgICAgICAgICQoJ1tkYXRhLXBhbmVsLW5hbWU9XCInICsgcGFuZWxOYW1lICsgJ1wiXScpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCd3Z3N0LXBhbmVsLS12aXNpYmxlJylcbiAgICAgICAgICAgICAgICAuY3NzKCd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQcm9jZXNzIG11bHRpcGxlIHBhbmVsc1xuICAgICAgICBpZiAoJC5pc0FycmF5KHBhbmVsTmFtZXMpKSB7XG5cbiAgICAgICAgICAgIHZhciBwYW5lbE5hbWVDb3VudGVyID0gcGFuZWxOYW1lcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgcGFuZWxOYW1lO1xuXG4gICAgICAgICAgICBmb3IgKDtwYW5lbE5hbWVDb3VudGVyICE9PSAwOykge1xuICAgICAgICAgICAgICAgIHBhbmVsTmFtZUNvdW50ZXIgPSBwYW5lbE5hbWVDb3VudGVyIC0gMTtcblxuICAgICAgICAgICAgICAgIHBhbmVsTmFtZSA9IHBhbmVsTmFtZXNbcGFuZWxOYW1lQ291bnRlcl07XG5cbiAgICAgICAgICAgICAgICBzaG93UGFuZWwocGFuZWxOYW1lKTtcbiAgICAgICAgICAgIH0gLy8gZm9yXG5cbiAgICAgICAgLy8gUHJvY2VzcyBzaW5nbGUgcGFuZWxcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNob3dQYW5lbChwYW5lbE5hbWVzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgaGlkZVBhbmVsQm9keUNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge30gcGFuZWxOYW1lc1xuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGhpZGVQYW5lbEJvZHlDb250ZW50ID0gZnVuY3Rpb24ocGFuZWxOYW1lcykge1xuICAgICAgICAvLyBPdmVyd3JpdGUgZnVuY3Rpb25cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlc2NyaXB0aW9uXG4gICAgICAgICAqIEBtZXRob2QgaGlkZVBhbmVsQm9keUNvbnRlbnRcbiAgICAgICAgICogQHBhcmFtIHt9IHBhbmVsTmFtZVxuICAgICAgICAgKiBAcmV0dXJuIFxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGhpZGVQYW5lbEJvZHlDb250ZW50ID0gZnVuY3Rpb24ocGFuZWxOYW1lKSB7XG4gICAgICAgICAgICB2YXIgcGFuZWxCb2R5Q29udGVudCA9ICQoJ1tkYXRhLXBhbmVsLW5hbWU9XCInICsgcGFuZWxOYW1lICsgJ1wiXSAud2dzdC1wYW5lbC1ib2R5LWNvbnRlbnQnKTtcbiAgICAgICAgICAgIHBhbmVsQm9keUNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFByb2Nlc3MgbXVsdGlwbGUgcGFuZWxzXG4gICAgICAgIGlmICgkLmlzQXJyYXkocGFuZWxOYW1lcykpIHtcblxuICAgICAgICAgICAgdmFyIHBhbmVsTmFtZUNvdW50ZXIgPSBwYW5lbE5hbWVzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBwYW5lbE5hbWU7XG5cbiAgICAgICAgICAgIGZvciAoO3BhbmVsTmFtZUNvdW50ZXIgIT09IDA7KSB7XG4gICAgICAgICAgICAgICAgcGFuZWxOYW1lQ291bnRlciA9IHBhbmVsTmFtZUNvdW50ZXIgLSAxO1xuXG4gICAgICAgICAgICAgICAgcGFuZWxOYW1lID0gcGFuZWxOYW1lc1twYW5lbE5hbWVDb3VudGVyXTtcblxuICAgICAgICAgICAgICAgIGhpZGVQYW5lbEJvZHlDb250ZW50KHBhbmVsTmFtZSk7XG4gICAgICAgICAgICB9IC8vIGZvclxuXG4gICAgICAgIC8vIFByb2Nlc3Mgc2luZ2xlIHBhbmVsXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWRlUGFuZWxCb2R5Q29udGVudChwYW5lbE5hbWVzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgaGlkZVBhbmVsXG4gICAgICogQHBhcmFtIHt9IHBhbmVsTmFtZXNcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBoaWRlUGFuZWwgPSBmdW5jdGlvbihwYW5lbE5hbWVzKSB7XG4gICAgICAgIC8vIE92ZXJ3cml0ZSBmdW5jdGlvblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVzY3JpcHRpb25cbiAgICAgICAgICogQG1ldGhvZCBoaWRlUGFuZWxcbiAgICAgICAgICogQHBhcmFtIHt9IHBhbmVsTmFtZVxuICAgICAgICAgKiBAcmV0dXJuIFxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGhpZGVQYW5lbCA9IGZ1bmN0aW9uKHBhbmVsTmFtZSkge1xuICAgICAgICAgICAgJCgnW2RhdGEtcGFuZWwtbmFtZT1cIicgKyBwYW5lbE5hbWUgKyAnXCJdJykuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFByb2Nlc3MgbXVsdGlwbGUgcGFuZWxzXG4gICAgICAgIGlmICgkLmlzQXJyYXkocGFuZWxOYW1lcykpIHtcblxuICAgICAgICAgICAgdmFyIHBhbmVsTmFtZUNvdW50ZXIgPSBwYW5lbE5hbWVzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBwYW5lbE5hbWU7XG5cbiAgICAgICAgICAgIGZvciAoO3BhbmVsTmFtZUNvdW50ZXIgIT09IDA7KSB7XG4gICAgICAgICAgICAgICAgcGFuZWxOYW1lQ291bnRlciA9IHBhbmVsTmFtZUNvdW50ZXIgLSAxO1xuXG4gICAgICAgICAgICAgICAgcGFuZWxOYW1lID0gcGFuZWxOYW1lc1twYW5lbE5hbWVDb3VudGVyXTtcblxuICAgICAgICAgICAgICAgIGhpZGVQYW5lbChwYW5lbE5hbWUpO1xuICAgICAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICAvLyBQcm9jZXNzIHNpbmdsZSBwYW5lbFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlkZVBhbmVsKHBhbmVsTmFtZXMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBzdGFydFBhbmVsTG9hZGluZ0luZGljYXRvclxuICAgICAqIEBwYXJhbSB7fSBwYW5lbE5hbWVcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBzdGFydFBhbmVsTG9hZGluZ0luZGljYXRvciA9IGZ1bmN0aW9uKHBhbmVsTmFtZSkge1xuICAgICAgICAvLyBIaWRlIGJvZHkgY29udGVudFxuICAgICAgICAvLyB2YXIgcGFuZWxCb2R5Q29udGVudCA9ICQoJ1tkYXRhLXBhbmVsLW5hbWU9XCInICsgcGFuZWxOYW1lICsgJ1wiXSAud2dzdC1wYW5lbC1ib2R5LWNvbnRlbnQnKTtcbiAgICAgICAgLy8gcGFuZWxCb2R5Q29udGVudC5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG4gICAgICAgIC8vIFNob3cgYW5pbWF0ZWQgbG9hZGluZyBjaXJjbGVcbiAgICAgICAgdmFyIHBhbmVsTG9hZGluZ0luZGljYXRvciA9ICQoJ1tkYXRhLXBhbmVsLW5hbWU9XCInICsgcGFuZWxOYW1lICsgJ1wiXSAud2dzdC1wYW5lbC1sb2FkaW5nJyk7XG4gICAgICAgIHBhbmVsTG9hZGluZ0luZGljYXRvci5zaG93KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBlbmRQYW5lbExvYWRpbmdJbmRpY2F0b3JcbiAgICAgKiBAcGFyYW0ge30gcGFuZWxOYW1lXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgZW5kUGFuZWxMb2FkaW5nSW5kaWNhdG9yID0gZnVuY3Rpb24ocGFuZWxOYW1lKSB7XG4gICAgICAgIC8vIEhpZGUgYW5pbWF0ZWQgbG9hZGluZyBjaXJjbGVcbiAgICAgICAgdmFyIHBhbmVsTG9hZGluZ0luZGljYXRvciA9ICQoJ1tkYXRhLXBhbmVsLW5hbWU9XCInICsgcGFuZWxOYW1lICsgJ1wiXSAud2dzdC1wYW5lbC1sb2FkaW5nJyk7XG4gICAgICAgIHBhbmVsTG9hZGluZ0luZGljYXRvci5oaWRlKCk7XG4gICAgICAgIC8vIFNob3cgYm9keSBjb250ZW50XG4gICAgICAgIC8vIHZhciBwYW5lbEJvZHlDb250ZW50ID0gJCgnW2RhdGEtcGFuZWwtbmFtZT1cIicgKyBwYW5lbE5hbWUgKyAnXCJdIC53Z3N0LXBhbmVsLWJvZHktY29udGVudCcpO1xuICAgICAgICAvLyBwYW5lbEJvZHlDb250ZW50LmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG4gICAgfTtcblxuICAgICQoJy50cmVlLWNvbnRyb2xzLWRyYXctc3VidHJlZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBjb2xsZWN0aW9uSWQgPSAkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyksXG4gICAgICAgICAgICBzZWxlY3RlZE5vZGUgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc2VsZWN0ZWQtbm9kZScpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdjb2xsZWN0aW9uSWQ6ICcgKyBjb2xsZWN0aW9uSWQpO1xuICAgICAgICBjb25zb2xlLmxvZygnc2VsZWN0ZWROb2RlOiAnICsgc2VsZWN0ZWROb2RlKTtcblxuICAgICAgICBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS50cmVlLmNhbnZhcy5yZWRyYXdGcm9tQnJhbmNoKHNlbGVjdGVkTm9kZSk7XG4gICAgfSk7XG5cbiAgICAkKCcuY29sbGVjdGlvbi12aWV3LWhvcml6b250YWwtc3BsaXQnKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgY29sbGVjdGlvblRyZWVQYXBlciA9ICQoJy53Z3N0LXBhcGVyX19jb2xsZWN0aW9uLXRyZWUnKSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25NZXRhZGF0YVBhcGVyID0gJCgnLndnc3QtcGFwZXJfX2NvbGxlY3Rpb24tbWV0YWRhdGEnKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBpc1BhbmVsQWN0aXZlXG4gICAgICogQHBhcmFtIHt9IHBhbmVsTmFtZVxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGlzUGFuZWxBY3RpdmUgPSBmdW5jdGlvbihwYW5lbE5hbWUpIHtcbiAgICAgICAgdmFyIHBhbmVsRWxlbWVudCA9ICQoJ1tkYXRhLXBhbmVsLW5hbWU9XCInICsgcGFuZWxOYW1lICsgJ1wiXScpO1xuXG4gICAgICAgIGlmIChwYW5lbEVsZW1lbnQuaGFzQ2xhc3MoJ3dnc3QtcGFuZWwtLWFjdGl2ZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgaXNQYW5lbFZpc2libGVcbiAgICAgKiBAcGFyYW0ge30gcGFuZWxOYW1lXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgaXNQYW5lbFZpc2libGUgPSBmdW5jdGlvbihwYW5lbE5hbWUpIHtcbiAgICAgICAgdmFyIHBhbmVsRWxlbWVudCA9ICQoJ1tkYXRhLXBhbmVsLW5hbWU9XCInICsgcGFuZWxOYW1lICsgJ1wiXScpO1xuXG4gICAgICAgIGlmIChwYW5lbEVsZW1lbnQuaGFzQ2xhc3MoJ3dnc3QtcGFuZWwtLXZpc2libGUnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGFjdGl2YXRlUGFuZWxcbiAgICAgKiBAcGFyYW0ge30gcGFuZWxOYW1lc1xuICAgICAqIEBwYXJhbSB7fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGFjdGl2YXRlUGFuZWwgPSBmdW5jdGlvbihwYW5lbE5hbWVzLCBjYWxsYmFjaykge1xuICAgICAgICAvLyBPdmVyd3JpdGUgZnVuY3Rpb25cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlc2NyaXB0aW9uXG4gICAgICAgICAqIEBtZXRob2QgYWN0aXZhdGVQYW5lbFxuICAgICAgICAgKiBAcGFyYW0ge30gcGFuZWxOYW1lXG4gICAgICAgICAqIEByZXR1cm4gXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgYWN0aXZhdGVQYW5lbCA9IGZ1bmN0aW9uKHBhbmVsTmFtZSkge1xuICAgICAgICAgICAgdmFyIHBhbmVsID0gJCgnW2RhdGEtcGFuZWwtbmFtZT1cIicgKyBwYW5lbE5hbWUgKyAnXCJdJyk7XG5cbiAgICAgICAgICAgIC8vIFNldCBwb3NpdGlvblxuICAgICAgICAgICAgcGFuZWwuY3NzKCd0b3AnLCBXR1NULnBhbmVsc1twYW5lbE5hbWVdLnRvcCk7XG4gICAgICAgICAgICBwYW5lbC5jc3MoJ2xlZnQnLCBXR1NULnBhbmVsc1twYW5lbE5hbWVdLmxlZnQpO1xuXG4gICAgICAgICAgICAvLyBBY3RpdmF0ZSwgYnV0IGRvbid0IHNob3dcbiAgICAgICAgICAgIHBhbmVsLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcbiAgICAgICAgICAgIC8vcGFuZWwuZmFkZUluKCdmYXN0Jyk7XG4gICAgICAgICAgICBwYW5lbC5zaG93KCk7XG4gICAgICAgICAgICBwYW5lbC5hZGRDbGFzcygnd2dzdC1wYW5lbC0tYWN0aXZlJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHJvY2VzcyBtdWx0aXBsZSBwYW5lbHNcbiAgICAgICAgaWYgKCQuaXNBcnJheShwYW5lbE5hbWVzKSkge1xuXG4gICAgICAgICAgICB2YXIgcGFuZWxOYW1lQ291bnRlciA9IHBhbmVsTmFtZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHBhbmVsTmFtZTtcblxuICAgICAgICAgICAgZm9yICg7cGFuZWxOYW1lQ291bnRlciAhPT0gMDspIHtcbiAgICAgICAgICAgICAgICBwYW5lbE5hbWVDb3VudGVyID0gcGFuZWxOYW1lQ291bnRlciAtIDE7XG5cbiAgICAgICAgICAgICAgICBwYW5lbE5hbWUgPSBwYW5lbE5hbWVzW3BhbmVsTmFtZUNvdW50ZXJdO1xuXG4gICAgICAgICAgICAgICAgYWN0aXZhdGVQYW5lbChwYW5lbE5hbWUpO1xuICAgICAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICAvLyBQcm9jZXNzIHNpbmdsZSBwYW5lbFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aXZhdGVQYW5lbChwYW5lbE5hbWVzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBkZWFjdGl2YXRlUGFuZWxcbiAgICAgKiBAcGFyYW0ge30gcGFuZWxOYW1lc1xuICAgICAqIEBwYXJhbSB7fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGRlYWN0aXZhdGVQYW5lbCA9IGZ1bmN0aW9uKHBhbmVsTmFtZXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIE92ZXJ3cml0ZSBmdW5jdGlvblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVzY3JpcHRpb25cbiAgICAgICAgICogQG1ldGhvZCBkZWFjdGl2YXRlUGFuZWxcbiAgICAgICAgICogQHBhcmFtIHt9IHBhbmVsTmFtZVxuICAgICAgICAgKiBAcmV0dXJuIFxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGRlYWN0aXZhdGVQYW5lbCA9IGZ1bmN0aW9uKHBhbmVsTmFtZSkge1xuICAgICAgICAgICAgdmFyIHBhbmVsID0gJCgnW2RhdGEtcGFuZWwtbmFtZT1cIicgKyBwYW5lbE5hbWUgKyAnXCJdJyksXG4gICAgICAgICAgICAgICAgcGFuZWxCb2R5Q29udGVudCA9IHBhbmVsLmZpbmQoJy53Z3N0LXBhbmVsLWJvZHktY29udGVudCcpO1xuXG4gICAgICAgICAgICBwYW5lbC5oaWRlKCk7XG4gICAgICAgICAgICBwYW5lbC5yZW1vdmVDbGFzcygnd2dzdC1wYW5lbC0tYWN0aXZlJyk7XG4gICAgICAgICAgICBwYW5lbC5yZW1vdmVDbGFzcygnd2dzdC1wYW5lbC0tdmlzaWJsZScpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFByb2Nlc3MgbXVsdGlwbGUgcGFuZWxzXG4gICAgICAgIGlmICgkLmlzQXJyYXkocGFuZWxOYW1lcykpIHtcblxuICAgICAgICAgICAgdmFyIHBhbmVsTmFtZUNvdW50ZXIgPSBwYW5lbE5hbWVzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBwYW5lbE5hbWU7XG5cbiAgICAgICAgICAgIGZvciAoO3BhbmVsTmFtZUNvdW50ZXIgIT09IDA7KSB7XG4gICAgICAgICAgICAgICAgcGFuZWxOYW1lQ291bnRlciA9IHBhbmVsTmFtZUNvdW50ZXIgLSAxO1xuXG4gICAgICAgICAgICAgICAgcGFuZWxOYW1lID0gcGFuZWxOYW1lc1twYW5lbE5hbWVDb3VudGVyXTtcblxuICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVQYW5lbChwYW5lbE5hbWUpO1xuICAgICAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICAvLyBQcm9jZXNzIHNpbmdsZSBwYW5lbFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVhY3RpdmF0ZVBhbmVsKHBhbmVsTmFtZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIC8vIENhbGxiYWNrXG4gICAgICAgIC8vIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIC8vIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGJyaW5nUGFuZWxUb1RvcFxuICAgICAqIEBwYXJhbSB7fSBwYW5lbE5hbWVcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBicmluZ1BhbmVsVG9Ub3AgPSBmdW5jdGlvbihwYW5lbE5hbWUpIHtcbiAgICAgICAgdmFyIHpJbmRleEhpZ2hlc3QgPSAwO1xuXG4gICAgICAgICQoJy53Z3N0LXBhbmVsJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgdmFyIHpJbmRleEN1cnJlbnQgPSBwYXJzZUludCgkKHRoaXMpLmNzcygnekluZGV4JyksIDEwKTtcbiAgICAgICAgICAgIGlmICh6SW5kZXhDdXJyZW50ID4gekluZGV4SGlnaGVzdCkge1xuICAgICAgICAgICAgICAgIHpJbmRleEhpZ2hlc3QgPSB6SW5kZXhDdXJyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkKCdbZGF0YS1wYW5lbC1uYW1lPVwiJyArIHBhbmVsTmFtZSArICdcIl0nKS5jc3MoJ3pJbmRleCcsIHpJbmRleEhpZ2hlc3QgKyAxKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIG9wZW5QYW5lbFxuICAgICAqIEBwYXJhbSB7fSBwYW5lbE5hbWVcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBvcGVuUGFuZWwgPSBmdW5jdGlvbihwYW5lbE5hbWUpIHtcbiAgICAgICAgYWN0aXZhdGVQYW5lbChwYW5lbE5hbWUpO1xuICAgICAgICBlbmRQYW5lbExvYWRpbmdJbmRpY2F0b3IocGFuZWxOYW1lKTtcbiAgICAgICAgc2hvd1BhbmVsQm9keUNvbnRlbnQocGFuZWxOYW1lKTtcbiAgICAgICAgc2hvd1BhbmVsKHBhbmVsTmFtZSk7XG4gICAgICAgIGJyaW5nUGFuZWxUb1RvcChwYW5lbE5hbWUpO1xuICAgIH07XG5cbiAgICAvLyB2YXIgaXNPcGVuZWRQYW5lbCA9IGZ1bmN0aW9uKHBhbmVsTmFtZSkge1xuICAgIC8vICAgICB2YXIgcGFuZWwgPSAkKCdbZGF0YS1wYW5lbC1uYW1lPVwiJyArIHBhbmVsTmFtZSArICdcIl0nKTtcblxuICAgIC8vICAgICBpZiAocGFuZWwuaGFzQ2xhc3MoJ3dnc3QtcGFuZWwtLWFjdGl2ZScpKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAvLyAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyAgICAgfVxuICAgIC8vIH07XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBSZXByZXNlbnRhdGl2ZSBDb2xsZWN0aW9uIFRyZWUgTWV0YWRhdGFcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBnZXRSZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlTWV0YWRhdGFcbiAgICAgKiBAcGFyYW0ge30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBnZXRSZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlTWV0YWRhdGEgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdIEdldHRpbmcgcmVwcmVzZW50YXRpdmUgY29sbGVjdGlvbiB0cmVlIG1ldGFkYXRhJyk7XG4gICAgICAgIC8vIEdldCByZXByZXNlbnRhdGl2ZSBjb2xsZWN0aW9uIG1ldGFkYXRhXG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiAnR0VUJyxcbiAgICAgICAgICAgIHVybDogJy9hcGkvY29sbGVjdGlvbi9yZXByZXNlbnRhdGl2ZS9tZXRhZGF0YScsXG4gICAgICAgICAgICBkYXRhdHlwZTogJ2pzb24nIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzkxNTUyMTdcbiAgICAgICAgfSlcbiAgICAgICAgLmRvbmUoZnVuY3Rpb24ocmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uTWV0YWRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdIEdvdCByZXByZXNlbnRhdGl2ZSBjb2xsZWN0aW9uIHRyZWUgbWV0YWRhdGEnKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZGlyKHJlcHJlc2VudGF0aXZlQ29sbGVjdGlvbk1ldGFkYXRhKTtcblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uTWV0YWRhdGEpO1xuICAgICAgICB9KVxuICAgICAgICAuZmFpbChmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tXR1NUXVtFcnJvcl0g4pyXIEZhaWxlZCB0byBnZXQgcmVwcmVzZW50YXRpdmUgY29sbGVjdGlvbiB0cmVlIG1ldGFkYXRhJyk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHRleHRTdGF0dXMpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvclRocm93bik7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGpxWEhSKTtcblxuICAgICAgICAgICAgY2FsbGJhY2sodGV4dFN0YXR1cywgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2Qgc2hvd0FsZXJ0XG4gICAgICogQHBhcmFtIHt9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge30gc3RhdHVzXG4gICAgICogQHBhcmFtIHt9IGhpZGVBZnRlclNob3dcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBzaG93QWxlcnQgPSBmdW5jdGlvbihtZXNzYWdlLCBzdGF0dXMsIGhpZGVBZnRlclNob3cpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignW1dHU1RdW0Vycm9yXSDinJcgJyArIG1lc3NhZ2UpO1xuXG4gICAgICAgIGlmIChXR1NULnNwZWFrKSB7XG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG5ldyBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UobWVzc2FnZSk7XG4gICAgICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnNwZWFrKG1lc3NhZ2UpO1xuICAgICAgICAgICAgV0dTVC5zcGVhayA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFsZXJ0SHRtbEVsZW1lbnQgPSAkKCcud2dzdC1hbGVydCcpO1xuICAgICAgICAvLyBSZW1vdmUgYWxsIHByZXZpb3VzIHN0YXR1cyBjbGFzc2VzIGFuZCBhZGQgdGhlIGN1cnJlbnQgb25lXG4gICAgICAgIGFsZXJ0SHRtbEVsZW1lbnQuYXR0cignY2xhc3MnLCAnd2dzdC1hbGVydCcpLmFkZENsYXNzKCd3Z3N0LWFsZXJ0X18nICsgc3RhdHVzKTtcbiAgICAgICAgLy8gQWRkIHRleHQgbWVzc2FnZSBhbmQgc2hvdyBhbGVydCBlbGVtZW50XG4gICAgICAgIGFsZXJ0SHRtbEVsZW1lbnQuaHRtbChtZXNzYWdlKS5zaG93KCk7XG4gICAgICAgIC8vIEhpZGUgYWxlcnQgZWxlbWVudCBhZnRlciBzb21ldGltZSBpZiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKGhpZGVBZnRlclNob3cpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBhbGVydEh0bWxFbGVtZW50LmZhZGVPdXQoJ2Zhc3QnKTtcbiAgICAgICAgICAgIH0sIDMwMDApO1xuICAgICAgICB9IC8vIGlmXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBzaG93Tm90aWZpY2F0aW9uXG4gICAgICogQHBhcmFtIHt9IG1lc3NhZ2VcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBzaG93Tm90aWZpY2F0aW9uID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICAvL2NvbnNvbGUuZXJyb3IoJ+KclyBbV0dTVF1bRXJyb3JdICcgKyBtZXNzYWdlKTtcbiAgICAgICAgdmFyIGVycm9ySHRtbEVsZW1lbnQgPSAkKCcud2dzdC1ub3RpZmljYXRpb25fX2Vycm9yJyk7XG4gICAgICAgIC8vZXJyb3JIdG1sRWxlbWVudC5odG1sKG1lc3NhZ2UpLnNob3coKTtcbiAgICAgICAgZXJyb3JIdG1sRWxlbWVudC5odG1sKCdQbGVhc2UgcmVmcmVzaCB5b3VyIHBhZ2UuJykuc2hvdygpO1xuICAgICAgICAvL2lmIChlcnJvckh0bWxFbGVtZW50LmlzKCc6dmlzaWJsZScpKSB7fVxuICAgICAgICAvLyBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICBlcnJvckh0bWxFbGVtZW50LmhpZGUoKTtcbiAgICAgICAgLy8gICAgIGVycm9ySHRtbEVsZW1lbnQuaHRtbCgnJyk7XG4gICAgICAgIC8vIH0sIDUwMDApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2Qgc2hvd1dhcm5pbmdcbiAgICAgKiBAcGFyYW0ge30gbWVzc2FnZVxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIHNob3dXYXJuaW5nID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICBjb25zb2xlLmxvZygn4oCiIFtXR1NUXVtXYXJuaW5nXSAnICsgbWVzc2FnZSk7XG4gICAgICAgIHZhciBlcnJvckh0bWxFbGVtZW50ID0gJCgnLndnc3Qtbm90aWZpY2F0aW9uX193YXJuaW5nJyk7XG4gICAgICAgIGVycm9ySHRtbEVsZW1lbnQuaHRtbChtZXNzYWdlKS5zaG93KCk7XG4gICAgICAgIC8vaWYgKGVycm9ySHRtbEVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHt9XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGVycm9ySHRtbEVsZW1lbnQuaGlkZSgpO1xuICAgICAgICAgICAgZXJyb3JIdG1sRWxlbWVudC5odG1sKCcnKTtcbiAgICAgICAgfSwgNTAwMCk7XG4gICAgfTtcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIEluaXQgYXBwXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAvLyBJbml0XG4gICAgKGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgLy8gSW5pdCBqUXVlcnkgVUkgZHJhZ2dhYmxlIGludGVyYWN0aW9uXG4gICAgICAgICQoJy53Z3N0LWRyYWdnYWJsZScpLmRyYWdnYWJsZSh7XG4gICAgICAgICAgICBoYW5kbGU6IFwiLndnc3QtZHJhZ2dhYmxlLWhhbmRsZVwiLFxuICAgICAgICAgICAgYXBwZW5kVG86IFwiYm9keVwiLFxuICAgICAgICAgICAgc2Nyb2xsOiBmYWxzZSxcbiAgICAgICAgICAgIC8vY29udGFpbm1lbnQ6IFwid2luZG93XCIsXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlc2NyaXB0aW9uXG4gICAgICAgICAgICAgKiBAbWV0aG9kIHN0YXJ0XG4gICAgICAgICAgICAgKiBAcmV0dXJuIFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmluZ0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlc2NyaXB0aW9uXG4gICAgICAgICAgICAgKiBAbWV0aG9kIHN0b3BcbiAgICAgICAgICAgICAqIEBwYXJhbSB7fSBldmVudFxuICAgICAgICAgICAgICogQHBhcmFtIHt9IHVpXG4gICAgICAgICAgICAgKiBAcmV0dXJuIFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzdG9wOiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAgICAgICAgICAgICByaW5nRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBTdG9yZSBjdXJyZW50IHBhbmVsIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgdmFyIHBhbmVsTmFtZSA9IHVpLmhlbHBlci5hdHRyKCdkYXRhLXBhbmVsLW5hbWUnKTtcbiAgICAgICAgICAgICAgICBXR1NULnBhbmVsc1twYW5lbE5hbWVdLnRvcCA9IHVpLnBvc2l0aW9uLnRvcDtcbiAgICAgICAgICAgICAgICBXR1NULnBhbmVsc1twYW5lbE5hbWVdLmxlZnQgPSB1aS5wb3NpdGlvbi5sZWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJbml0IGpRdWVyeSBVSSBzbGlkZXIgd2lkZ2V0XG4gICAgICAgICQoJy5hc3NlbWJseS1saXN0LXNsaWRlcicpLnNsaWRlcih7XG4gICAgICAgICAgICByYW5nZTogXCJtYXhcIixcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogMTAsXG4gICAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICAgIGFuaW1hdGU6ICdmYXN0JyxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVzY3JpcHRpb25cbiAgICAgICAgICAgICAqIEBtZXRob2Qgc2xpZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7fSBldmVudFxuICAgICAgICAgICAgICogQHBhcmFtIHt9IHVpXG4gICAgICAgICAgICAgKiBAcmV0dXJuIFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzbGlkZTogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAgICAgJCgnLnNlbGVjdGVkLWFzc2VtYmx5LWNvdW50ZXInKS50ZXh0KHVpLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUG9wb3ZlclxuICAgICAgICAkKCcuYWRkLWRhdGEgYnV0dG9uJykucG9wb3Zlcih7XG4gICAgICAgICAgICBodG1sOiB0cnVlLFxuICAgICAgICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgICAgICAgIHRpdGxlOiAnQWRkIHlvdXIgZGF0YScsXG4gICAgICAgICAgICBjb250ZW50OiAnPGRpdiBjbGFzcz1cInVwbG9hZC1kYXRhXCI+PHNwYW4+WW91IGNhbiBkcmFnIGFuZCBkcm9wIHlvdXIgQ1NWIGZpbGVzIGFueXdoZXJlIG9uIHRoZSBtYXAuPC9zcGFuPjxpbnB1dCB0eXBlPVwiZmlsZVwiIGlkPVwiZXhhbXBsZUlucHV0RmlsZVwiPjwvZGl2PidcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVG9nZ2xlIHRpbWVsaW5lXG4gICAgICAgICQoJy50aW1lbGluZS10b2dnbGUtYnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgICQoJyN0aW1lbGluZScpLmhpZGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCgnI3RpbWVsaW5lJykuY3NzKCdib3R0b20nLCAnMCcpO1xuICAgICAgICAgICAgICAgICQoJyN0aW1lbGluZScpLnNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVG9nZ2xlIGdyYXBoXG4gICAgICAgICQoJy5ncmFwaC10b2dnbGUtYnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgICQoJy50cmVlLXBhbmVsJykuaGlkZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCcudHJlZS1wYW5lbCcpLnNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVG9nZ2xlIGFsbCBwYW5lbHNcbiAgICAgICAgJCgnLmFsbC1wYW5lbHMtdG9nZ2xlLWJ1dHRvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcbiAgICAgICAgICAgICAgICAkKCcud2dzdC1wYW5lbC0tYWN0aXZlJykuaGlkZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCcud2dzdC1wYW5lbC0tYWN0aXZlJykuc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTaG93IGdyYXBoXG4gICAgICAgICQoJy5ncmFwaC10b2dnbGUtYnV0dG9uJykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNldCBzb2NrZXQgcm9vbSBpZFxuICAgICAgICBXR1NULnNvY2tldC5jb25uZWN0aW9uLm9uKCdyb29tSWQnLCBmdW5jdGlvbihyb29tSWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF1bU29ja2V0LmlvXSBSZWNlaXZlZCByb29tIHV1aWQnKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF1bU29ja2V0LmlvXSBSZWFkeScpO1xuXG4gICAgICAgICAgICAvLyBTZXQgcm9vbSBpZCBmb3IgdGhpcyBjbGllbnRcbiAgICAgICAgICAgIFdHU1Quc29ja2V0LnJvb21JZCA9IHJvb21JZDtcblxuICAgICAgICAgICAgaW5pdEFwcChXR1NULmluaXQuYWxsLlNPQ0tFVF9ST09NX0lEKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gR2V0IHNvY2tldCByb29tIGlkXG4gICAgICAgIFdHU1Quc29ja2V0LmNvbm5lY3Rpb24uZW1pdCgnZ2V0Um9vbUlkJyk7XG5cbiAgICAgICAgV0dTVC5zb2NrZXQuY29ubmVjdGlvbi5vbignY29ubmVjdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gVGhpcyBldmVudCBjYW4gZmlyZSBhZnRlciBhcHAgd2FzIGluaXRpYWxpc2VkLCBzbyBuZWVkIHRvIGNoZWNrIGZvciB0aGF0IGZpcnN0XG4gICAgICAgICAgICBpZiAodHlwZW9mIFdHU1QuaW5pdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBpbml0QXBwKFdHU1QuaW5pdC5hbGwuU09DS0VUX0NPTk5FQ1QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gV0dTVC5zb2NrZXQuY29ubmVjdGlvbi5vbignY29ubmVjdGluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyAgICAgc2hvd0FsZXJ0KCdDb25uZWN0aW5nIHRvIHRoZSBzZXJ2ZXIuLi4nKTtcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIFdHU1Quc29ja2V0LmNvbm5lY3Rpb24ub24oJ2Nvbm5lY3RfZmFpbGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vICAgICBzaG93QWxlcnQoJ0ZhaWxlZCB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIuJyk7XG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIC8vIFNvY2tldCBlcnJvcnNcbiAgICAgICAgV0dTVC5zb2NrZXQuY29ubmVjdGlvbi5vbignZXJyb3InLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNob3dBbGVydCgnVW5leHBlY3RlZCBlcnJvciBoYXMgb2NjdXJlZC4nLCBXR1NULmFsZXJ0LnN0YXR1cy5GQUlMVVJFLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBXR1NULnNvY2tldC5jb25uZWN0aW9uLm9uKCdkaXNjb25uZWN0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzaG93QWxlcnQoJ0Rpc2Nvbm5lY3RlZCBmcm9tIHRoZSBzZXJ2ZXIuJywgV0dTVC5hbGVydC5zdGF0dXMuRkFJTFVSRSwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgV0dTVC5zb2NrZXQuY29ubmVjdGlvbi5vbigncmVjb25uZWN0aW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzaG93QWxlcnQoJ1JlY29ubmVjdGluZyB0byB0aGUgc2VydmVyLi4uJywgV0dTVC5hbGVydC5zdGF0dXMuRkFJTFVSRSwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgV0dTVC5zb2NrZXQuY29ubmVjdGlvbi5vbigncmVjb25uZWN0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzaG93QWxlcnQoJ1JlY29ubmVjdGVkIHRvIHRoZSBzZXJ2ZXIuJywgV0dTVC5hbGVydC5zdGF0dXMuU1VDQ0VTUywgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBXR1NULnNvY2tldC5jb25uZWN0aW9uLm9uKCdyZWNvbm5lY3RfZmFpbGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzaG93QWxlcnQoJ0ZhaWxlZCB0byByZWNvbm5lY3QgdG8gdGhlIHNlcnZlci4nLCBXR1NULmFsZXJ0LnN0YXR1cy5GQUlMVVJFLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEdldCByZXByZXNlbnRhdGl2ZSBjb2xsZWN0aW9uIHRyZWUgbWV0YWRhdGFcbiAgICAgICAgZ2V0UmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZU1ldGFkYXRhKGZ1bmN0aW9uKGVycm9yLCByZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlTWF0YWRhdGEpe1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gU2hvdyBub3RpZmljYXRpb25cbiAgICAgICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFdHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS5tZXRhZGF0YSA9IHJlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWVNYXRhZGF0YTtcblxuICAgICAgICAgICAgYWN0aXZhdGVQYW5lbCgncmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgc3RhcnRQYW5lbExvYWRpbmdJbmRpY2F0b3IoJ3JlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUnKTtcblxuICAgICAgICAgICAgICAgIHJlbmRlclJlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpbml0QXBwKFdHU1QuaW5pdC5hbGwuUkVQUkVTRU5UQVRJVkVfQ09MTEVDVElPTl9UUkVFX01FVEFEQVRBKTtcbiAgICAgICAgfSk7XG5cbiAgICB9KSgpO1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZUFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVQcmV2aWV3U3RyaW5nXG4gICAgICogQHBhcmFtIHt9IGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVcbiAgICAgKiBAcGFyYW0ge30gYW50aWJpb3RpY3NcbiAgICAgKiBAcmV0dXJuIGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVIdG1sXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZUFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVQcmV2aWV3U3RyaW5nID0gZnVuY3Rpb24oYXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZSwgYW50aWJpb3RpY3MpIHtcbiAgICAgICAgdmFyIGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVIdG1sID0gJycsXG4gICAgICAgICAgICBhbnRpYmlvdGljR3JvdXAsXG4gICAgICAgICAgICBhbnRpYmlvdGljR3JvdXBOYW1lLFxuICAgICAgICAgICAgYW50aWJpb3RpY0dyb3VwSHRtbCxcbiAgICAgICAgICAgIGFudGliaW90aWNOYW1lLFxuICAgICAgICAgICAgLy8gU3RvcmUgc2luZ2xlIGFudGliaW90aWMgSFRNTCBzdHJpbmdcbiAgICAgICAgICAgIGFudGliaW90aWNIdG1sLFxuICAgICAgICAgICAgLy8gU3RvcmUgYWxsIGFudGliaW90aWMgSFRNTCBzdHJpbmdzXG4gICAgICAgICAgICBhbnRpYmlvdGljc0h0bWwsXG4gICAgICAgICAgICBhbnRpYmlvdGljUmVzaXN0YW5jZVN0YXRlO1xuXG4gICAgICAgIC8vIFBhcnNlIGVhY2ggYW50aWJpb3RpYyBncm91cFxuICAgICAgICBmb3IgKGFudGliaW90aWNHcm91cE5hbWUgaW4gYW50aWJpb3RpY3MpIHtcbiAgICAgICAgICAgIGlmIChhbnRpYmlvdGljcy5oYXNPd25Qcm9wZXJ0eShhbnRpYmlvdGljR3JvdXBOYW1lKSkge1xuICAgICAgICAgICAgICAgIGFudGliaW90aWNHcm91cCA9IGFudGliaW90aWNzW2FudGliaW90aWNHcm91cE5hbWVdO1xuICAgICAgICAgICAgICAgIGFudGliaW90aWNHcm91cEh0bWwgPSAnICAnO1xuICAgICAgICAgICAgICAgIGFudGliaW90aWNzSHRtbCA9ICcnO1xuICAgICAgICAgICAgICAgIC8vIFBhcnNlIGVhY2ggYW50aWJpb3RpY1xuICAgICAgICAgICAgICAgIGZvciAoYW50aWJpb3RpY05hbWUgaW4gYW50aWJpb3RpY0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbnRpYmlvdGljR3JvdXAuaGFzT3duUHJvcGVydHkoYW50aWJpb3RpY05hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSBzaW5nbGUgYW50aWJpb3RpYyBIVE1MIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgYW50aWJpb3RpY0h0bWwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFudGliaW90aWMgZm91bmQgaW4gUmVzaXN0YW5jZSBQcm9maWxlIGZvciB0aGlzIGFzc2VtYmx5XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVbYW50aWJpb3RpY0dyb3VwTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlW2FudGliaW90aWNHcm91cE5hbWVdW2FudGliaW90aWNOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW50aWJpb3RpY1Jlc2lzdGFuY2VTdGF0ZSA9IGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVbYW50aWJpb3RpY0dyb3VwTmFtZV1bYW50aWJpb3RpY05hbWVdLnJlc2lzdGFuY2VTdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFudGliaW90aWNSZXNpc3RhbmNlU3RhdGUgPT09ICdSRVNJU1RBTlQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnRpYmlvdGljSHRtbCA9IGFudGliaW90aWNIdG1sICsgJ+Kmvyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYW50aWJpb3RpY1Jlc2lzdGFuY2VTdGF0ZSA9PT0gJ1NFTlNJVElWRScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNIdG1sID0gYW50aWJpb3RpY0h0bWwgKyAn4peLJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNIdG1sID0gYW50aWJpb3RpY0h0bWwgKyAn4peLJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNIdG1sID0gYW50aWJpb3RpY0h0bWwgKyAn4peLJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNIdG1sID0gYW50aWJpb3RpY0h0bWwgKyAn4peLJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbmNhdGVuYXRlIGFsbCBhbnRpYmlvdGljIEhUTUwgc3RyaW5ncyBpbnRvIGEgc2luZ2xlIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgYW50aWJpb3RpY3NIdG1sID0gYW50aWJpb3RpY3NIdG1sICsgYW50aWJpb3RpY0h0bWw7XG4gICAgICAgICAgICAgICAgICAgIH0gLy8gaWZcbiAgICAgICAgICAgICAgICB9IC8vIGZvclxuICAgICAgICAgICAgICAgIGFudGliaW90aWNHcm91cEh0bWwgPSBhbnRpYmlvdGljR3JvdXBIdG1sICsgYW50aWJpb3RpY3NIdG1sO1xuICAgICAgICAgICAgICAgIGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVIdG1sID0gYXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZUh0bWwgKyBhbnRpYmlvdGljR3JvdXBIdG1sO1xuICAgICAgICAgICAgfSAvLyBpZlxuICAgICAgICB9IC8vIGZvclxuXG4gICAgICAgIHJldHVybiBhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlSHRtbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZUFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVQcmV2aWV3SHRtbFxuICAgICAqIEBwYXJhbSB7fSBhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlXG4gICAgICogQHBhcmFtIHt9IGFudGliaW90aWNzXG4gICAgICogQHJldHVybiBhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlSHRtbFxuICAgICAqL1xuICAgIHZhciBjcmVhdGVBc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlUHJldmlld0h0bWwgPSBmdW5jdGlvbihhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlLCBhbnRpYmlvdGljcykge1xuICAgICAgICB2YXIgYXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZUh0bWwgPSAnJyxcbiAgICAgICAgICAgIGFudGliaW90aWNHcm91cCxcbiAgICAgICAgICAgIGFudGliaW90aWNHcm91cE5hbWUsXG4gICAgICAgICAgICBhbnRpYmlvdGljR3JvdXBIdG1sLFxuICAgICAgICAgICAgYW50aWJpb3RpY05hbWUsXG4gICAgICAgICAgICAvLyBTdG9yZSBzaW5nbGUgYW50aWJpb3RpYyBIVE1MIHN0cmluZ1xuICAgICAgICAgICAgYW50aWJpb3RpY0h0bWwsXG4gICAgICAgICAgICAvLyBTdG9yZSBhbGwgYW50aWJpb3RpYyBIVE1MIHN0cmluZ3NcbiAgICAgICAgICAgIGFudGliaW90aWNzSHRtbCxcbiAgICAgICAgICAgIGFudGliaW90aWNSZXNpc3RhbmNlU3RhdGU7XG5cbiAgICAgICAgLypcblxuICAgICAgICBUTyBETzogVHJ5IGNoYW5naW5nIC5hbnRpYmlvdGljIHNwYW4gZWxlbWVudHMgdG8gZGl2IGFuZCBzZWUgaWYgdGhhdCB3aWxsIGludHJvZHVjZSBob3ZlciByaWdodCBib3JkZXIgYnVnLFxuICAgICAgICB3aGVuIEJvb3RzdHJhcCBUb29sdGlwIGlzIGFjdGl2YXRlZC5cblxuICAgICAgICBUTyBETzogUmVmYWN0b3IuIFVzZSAkLm1hcCgpXG5cbiAgICAgICAgKi9cblxuICAgICAgICAvLyBQYXJzZSBlYWNoIGFudGliaW90aWMgZ3JvdXBcbiAgICAgICAgZm9yIChhbnRpYmlvdGljR3JvdXBOYW1lIGluIGFudGliaW90aWNzKSB7XG4gICAgICAgICAgICBpZiAoYW50aWJpb3RpY3MuaGFzT3duUHJvcGVydHkoYW50aWJpb3RpY0dyb3VwTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBhbnRpYmlvdGljR3JvdXAgPSBhbnRpYmlvdGljc1thbnRpYmlvdGljR3JvdXBOYW1lXTtcbiAgICAgICAgICAgICAgICBhbnRpYmlvdGljR3JvdXBIdG1sID0gJzxkaXYgY2xhc3M9XCJhbnRpYmlvdGljLWdyb3VwXCIgZGF0YS1hbnRpYmlvdGljLWdyb3VwLW5hbWU9XCInICsgYW50aWJpb3RpY0dyb3VwTmFtZSArICdcIj57e2FudGliaW90aWNzSHRtbH19PC9kaXY+JztcbiAgICAgICAgICAgICAgICBhbnRpYmlvdGljc0h0bWwgPSAnJztcbiAgICAgICAgICAgICAgICAvLyBQYXJzZSBlYWNoIGFudGliaW90aWNcbiAgICAgICAgICAgICAgICBmb3IgKGFudGliaW90aWNOYW1lIGluIGFudGliaW90aWNHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW50aWJpb3RpY0dyb3VwLmhhc093blByb3BlcnR5KGFudGliaW90aWNOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgc2luZ2xlIGFudGliaW90aWMgSFRNTCBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNIdG1sID0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFudGliaW90aWMgZm91bmQgaW4gUmVzaXN0YW5jZSBQcm9maWxlIGZvciB0aGlzIGFzc2VtYmx5XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVbYW50aWJpb3RpY0dyb3VwTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlW2FudGliaW90aWNHcm91cE5hbWVdW2FudGliaW90aWNOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW50aWJpb3RpY1Jlc2lzdGFuY2VTdGF0ZSA9IGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVbYW50aWJpb3RpY0dyb3VwTmFtZV1bYW50aWJpb3RpY05hbWVdLnJlc2lzdGFuY2VTdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFudGliaW90aWNSZXNpc3RhbmNlU3RhdGUgPT09ICdSRVNJU1RBTlQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnRpYmlvdGljSHRtbCA9IGFudGliaW90aWNIdG1sICsgJzxzcGFuIGNsYXNzPVwiYW50aWJpb3RpYyByZXNpc3RhbmNlLWZhaWxcIiBkYXRhLWFudGliaW90aWMtbmFtZT1cIicgKyBhbnRpYmlvdGljTmFtZSArICdcIiBkYXRhLWFudGliaW90aWMtcmVzaXN0YW5jZS1zdGF0ZT1cIicgKyBhbnRpYmlvdGljUmVzaXN0YW5jZVN0YXRlICsgJ1wiIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwidG9wXCIgdGl0bGU9XCInICsgYW50aWJpb3RpY05hbWUgKyAnXCI+PC9zcGFuPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYW50aWJpb3RpY1Jlc2lzdGFuY2VTdGF0ZSA9PT0gJ1NFTlNJVElWRScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNIdG1sID0gYW50aWJpb3RpY0h0bWwgKyAnPHNwYW4gY2xhc3M9XCJhbnRpYmlvdGljIHJlc2lzdGFuY2Utc3VjY2Vzc1wiIGRhdGEtYW50aWJpb3RpYy1uYW1lPVwiJyArIGFudGliaW90aWNOYW1lICsgJ1wiIGRhdGEtYW50aWJpb3RpYy1yZXNpc3RhbmNlLXN0YXRlPVwiJyArIGFudGliaW90aWNSZXNpc3RhbmNlU3RhdGUgKyAnXCIgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT1cIicgKyBhbnRpYmlvdGljTmFtZSArICdcIj48L3NwYW4+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNIdG1sID0gYW50aWJpb3RpY0h0bWwgKyAnPHNwYW4gY2xhc3M9XCJhbnRpYmlvdGljIHJlc2lzdGFuY2UtdW5rbm93blwiIGRhdGEtYW50aWJpb3RpYy1uYW1lPVwiJyArIGFudGliaW90aWNOYW1lICsgJ1wiIGRhdGEtYW50aWJpb3RpYy1yZXNpc3RhbmNlLXN0YXRlPVwiJyArIGFudGliaW90aWNSZXNpc3RhbmNlU3RhdGUgKyAnXCIgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT1cIicgKyBhbnRpYmlvdGljTmFtZSArICdcIj48L3NwYW4+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNIdG1sID0gYW50aWJpb3RpY0h0bWwgKyAnPHNwYW4gY2xhc3M9XCJhbnRpYmlvdGljIHJlc2lzdGFuY2UtdW5rbm93blwiIGRhdGEtYW50aWJpb3RpYy1uYW1lPVwiJyArIGFudGliaW90aWNOYW1lICsgJ1wiIGRhdGEtYW50aWJpb3RpYy1yZXNpc3RhbmNlLXN0YXRlPVwiJyArIGFudGliaW90aWNSZXNpc3RhbmNlU3RhdGUgKyAnXCIgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT1cIicgKyBhbnRpYmlvdGljTmFtZSArICdcIj48L3NwYW4+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbIV0gQXNzZW1ibHkgcmVzaXN0YXRhbmNlIHByb2ZpbGUgaGFzIG5vIGFudGliaW90aWM6ICcgKyBhbnRpYmlvdGljTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnRpYmlvdGljSHRtbCA9IGFudGliaW90aWNIdG1sICsgJzxzcGFuIGNsYXNzPVwiYW50aWJpb3RpYyBuby1yZXNpc3RhbmNlLWRhdGFcIiBkYXRhLWFudGliaW90aWMtbmFtZT1cIicgKyBhbnRpYmlvdGljTmFtZSArICdcIiBkYXRhLWFudGliaW90aWMtcmVzaXN0YW5jZS1zdGF0ZT1cIicgKyBhbnRpYmlvdGljUmVzaXN0YW5jZVN0YXRlICsgJ1wiIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwidG9wXCIgdGl0bGU9XCInICsgYW50aWJpb3RpY05hbWUgKyAnXCI+PC9zcGFuPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbIV0gQXNzZW1ibHkgcmVzaXN0YXRhbmNlIHByb2ZpbGUgaGFzIG5vIGFudGliaW90aWMgZ3JvdXA6ICcgKyBhbnRpYmlvdGljR3JvdXBOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbmNhdGVuYXRlIGFsbCBhbnRpYmlvdGljIEhUTUwgc3RyaW5ncyBpbnRvIGEgc2luZ2xlIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgYW50aWJpb3RpY3NIdG1sID0gYW50aWJpb3RpY3NIdG1sICsgYW50aWJpb3RpY0h0bWw7XG4gICAgICAgICAgICAgICAgICAgIH0gLy8gaWZcbiAgICAgICAgICAgICAgICB9IC8vIGZvclxuICAgICAgICAgICAgICAgIGFudGliaW90aWNHcm91cEh0bWwgPSBhbnRpYmlvdGljR3JvdXBIdG1sLnJlcGxhY2UoL3t7YW50aWJpb3RpY3NIdG1sfX0vZywgYW50aWJpb3RpY3NIdG1sKTtcbiAgICAgICAgICAgICAgICBhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlSHRtbCA9IGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVIdG1sICsgYW50aWJpb3RpY0dyb3VwSHRtbDtcbiAgICAgICAgICAgIH0gLy8gaWZcbiAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICByZXR1cm4gYXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZUh0bWw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCByZW5kZXJBc3NlbWJseUFuYWx5c2lzTGlzdFxuICAgICAqIEBwYXJhbSB7fSBjb2xsZWN0aW9uSWRcbiAgICAgKiBAcGFyYW0ge30gYW50aWJpb3RpY3NcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciByZW5kZXJBc3NlbWJseUFuYWx5c2lzTGlzdCA9IGZ1bmN0aW9uKGNvbGxlY3Rpb25JZCwgYW50aWJpb3RpY3MpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBSZW5kZXJpbmcgYXNzZW1ibHkgYW5hbHlzaXMgbGlzdCcpO1xuXG4gICAgICAgIHZhciBhc3NlbWJsaWVzID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllcyxcbiAgICAgICAgICAgIHNvcnRlZEFzc2VtYmx5SWRzID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uc29ydGVkQXNzZW1ibHlJZHMsXG4gICAgICAgICAgICBhc3NlbWJseUlkLFxuICAgICAgICAgICAgYXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZSxcbiAgICAgICAgICAgIGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVIdG1sLFxuICAgICAgICAgICAgYXNzZW1ibHlUb3BTY29yZSxcbiAgICAgICAgICAgIGFzc2VtYmx5TGF0aXR1ZGUsXG4gICAgICAgICAgICBhc3NlbWJseUxvbmdpdHVkZSxcbiAgICAgICAgICAgIGFzc2VtYmx5Q291bnRlciA9IDA7XG5cbiAgICAgICAgdmFyIGNvbGxlY3Rpb25Bc3NlbWJseUxpc3QgPSAkKCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0JyksXG4gICAgICAgICAgICBjb2xsZWN0aW9uQXNzZW1ibHlMaXN0RnVsbCA9ICQoJy5jb2xsZWN0aW9uLWFzc2VtYmx5LWxpc3QtZnVsbCcpLFxuICAgICAgICAgICAgYXNzZW1ibHlMaXN0SXRlbUh0bWwsXG4gICAgICAgICAgICBhc3NlbWJseUxpc3RJdGVtcyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgICAgICAvLyBSZW5kZXIgYXNzZW1ibGllcyBhY2NvcmRpbmcgdG8gdGhlIHNvcnRpbmcgb3JkZXJcbiAgICAgICAgZm9yICg7YXNzZW1ibHlDb3VudGVyIDwgc29ydGVkQXNzZW1ibHlJZHMubGVuZ3RoOykge1xuXG4gICAgICAgICAgICBhc3NlbWJseUlkID0gc29ydGVkQXNzZW1ibHlJZHNbYXNzZW1ibHlDb3VudGVyXTtcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbP10gQXNzZW1ibHkgcmVzaXN0YW5jZSBwcm9maWxlOicpO1xuICAgICAgICAgICAgY29uc29sZS5kaXIoYXNzZW1ibGllc1thc3NlbWJseUlkXS5QQUFSU05QX1JFU1VMVC5wYWFyUmVzdWx0LnJlc2lzdGFuY2VQcm9maWxlKTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGFzc2VtYmx5IHJlc2lzdGFuY2UgcHJvZmlsZSBwcmV2aWV3IGh0bWxcbiAgICAgICAgICAgIGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGUgPSBhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdLlBBQVJTTlBfUkVTVUxULnBhYXJSZXN1bHQucmVzaXN0YW5jZVByb2ZpbGU7XG4gICAgICAgICAgICBhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlSHRtbCA9IGNyZWF0ZUFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVQcmV2aWV3SHRtbChhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlLCBhbnRpYmlvdGljcyk7XG5cbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBhc3NlbWJseSB0b3Agc2NvcmVcbiAgICAgICAgICAgIGFzc2VtYmx5VG9wU2NvcmUgPSBjYWxjdWxhdGVBc3NlbWJseVRvcFNjb3JlKGFzc2VtYmxpZXNbYXNzZW1ibHlJZF1bJ0ZQX0NPTVAnXS5zY29yZXMpO1xuXG4gICAgICAgICAgICBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5hc3NlbWJsaWVzW2Fzc2VtYmx5SWRdWydGUF9DT01QJ10udG9wU2NvcmUgPSBhc3NlbWJseVRvcFNjb3JlO1xuXG4gICAgICAgICAgICAvLyBHZXQgYXNzZW1ibHkgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZVxuICAgICAgICAgICAgYXNzZW1ibHlMYXRpdHVkZSA9IGFzc2VtYmxpZXNbYXNzZW1ibHlJZF1bJ0FTU0VNQkxZX01FVEFEQVRBJ10uZ2VvZ3JhcGh5LnBvc2l0aW9uLmxhdGl0dWRlO1xuICAgICAgICAgICAgYXNzZW1ibHlMb25naXR1ZGUgPSBhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdWydBU1NFTUJMWV9NRVRBREFUQSddLmdlb2dyYXBoeS5wb3NpdGlvbi5sb25naXR1ZGU7XG5cbiAgICAgICAgICAgIGFzc2VtYmx5TGlzdEl0ZW1IdG1sID0gXG4gICAgICAgICAgICAgICAgJCgoKGFzc2VtYmx5Q291bnRlciAlIDIgPT09IDApID8gJzxkaXYgY2xhc3M9XCJyb3ctc3RyaXBlIGFzc2VtYmx5LWxpc3QtaXRlbVwiIGRhdGEtYXNzZW1ibHktaWQ9XCInICsgYXNzZW1ibGllc1thc3NlbWJseUlkXVsnRlBfQ09NUCddLmFzc2VtYmx5SWQgKyAnXCI+JyA6ICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktbGlzdC1pdGVtXCIgZGF0YS1hc3NlbWJseS1pZD1cIicgKyBhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdWydGUF9DT01QJ10uYXNzZW1ibHlJZCArICdcIj4nKVxuICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwic2hvdy1vbi10cmVlLXJhZGlvLWJ1dHRvbiBhc3NlbWJseS1saXN0LWhlYWRlci10cmVlXCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIGRhdGEtcmVmZXJlbmNlLWlkPVwiJyArIGFzc2VtYmx5VG9wU2NvcmUucmVmZXJlbmNlSWQgKyAnXCIgZGF0YS1hc3NlbWJseS1pZD1cIicgKyBhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdWydGUF9DT01QJ10uYXNzZW1ibHlJZCArICdcIiBuYW1lPVwib3B0aW9uc1JhZGlvc1wiIHZhbHVlPVwiJyArIGFzc2VtYmx5VG9wU2NvcmUucmVmZXJlbmNlSWQgKyAnXCI+J1xuICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJzaG93LW9uLW1hcC1jaGVja2JveCBhc3NlbWJseS1saXN0LWhlYWRlci1tYXBcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgZGF0YS1yZWZlcmVuY2UtaWQ9XCInICsgYXNzZW1ibHlUb3BTY29yZS5yZWZlcmVuY2VJZCArICdcIiBkYXRhLWFzc2VtYmx5LWlkPVwiJyArIGFzc2VtYmxpZXNbYXNzZW1ibHlJZF1bJ0ZQX0NPTVAnXS5hc3NlbWJseUlkICsgJ1wiIGRhdGEtbGF0aXR1ZGU9XCInICsgYXNzZW1ibHlMYXRpdHVkZSArICdcIiBkYXRhLWxvbmdpdHVkZT1cIicgKyBhc3NlbWJseUxvbmdpdHVkZSArICdcIj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgLy8rICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktbGlzdC1nZW5lcmF0aW9uXCI+PC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktbGlzdC1oZWFkZXItaWRcIj4nICsgJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJvcGVuLWFzc2VtYmx5LWJ1dHRvblwiIGRhdGEtYXNzZW1ibHktaWQ9XCInICsgYXNzZW1ibGllc1thc3NlbWJseUlkXVsnRlBfQ09NUCddLmFzc2VtYmx5SWQgKyAnXCIgdGl0bGU9XCJcIj4nICsgYXNzZW1ibGllc1thc3NlbWJseUlkXVsnQVNTRU1CTFlfTUVUQURBVEEnXVsndXNlckFzc2VtYmx5SWQnXSArICc8L2E+JyArICc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1saXN0LWhlYWRlci1uZWFyZXN0LXJlcHJlc2VudGF0aXZlXCI+JyArICc8YSBocmVmPVwiI1wiIGNsYXNzPVwic2hvdy1vbi1yZXByZXNlbnRhdGl2ZS10cmVlXCIgZGF0YS1hc3NlbWJseS1pZD1cIicgKyBhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdWydGUF9DT01QJ10uYXNzZW1ibHlJZCArICdcIj4nICsgYXNzZW1ibHlUb3BTY29yZS5yZWZlcmVuY2VJZCArICc8L2E+JyArICcgKCcgKyBNYXRoLnJvdW5kKGFzc2VtYmx5VG9wU2NvcmUuc2NvcmUudG9GaXhlZCgyKSAqIDEwMCkgKyAnJSk8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1saXN0LWhlYWRlci1zdFwiPicgKyAoYXNzZW1ibGllc1thc3NlbWJseUlkXVsnTUxTVF9SRVNVTFQnXS5zdFR5cGUubGVuZ3RoID09PSAwID8gJ05vdCBmb3VuZCc6IGFzc2VtYmxpZXNbYXNzZW1ibHlJZF1bJ01MU1RfUkVTVUxUJ10uc3RUeXBlKSArICc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1saXN0LWhlYWRlci1yZXNpc3RhbmNlLXByb2ZpbGVcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNpc3RhbmNlIHByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICsnPGRpdiBjbGFzcz1cImFzc2VtYmx5LXJlc2lzdGFuY2UtcHJvZmlsZS1jb250YWluZXJcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlSHRtbFxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgKyAnPC9kaXY+Jyk7XG5cbiAgICAgICAgICAgIGFzc2VtYmx5TGlzdEl0ZW1zLmFwcGVuZENoaWxkKGFzc2VtYmx5TGlzdEl0ZW1IdG1sWzBdKTtcbiAgICAgICAgICAgIGFzc2VtYmx5Q291bnRlciA9IGFzc2VtYmx5Q291bnRlciArIDE7XG4gICAgICAgIH0gLy8gZm9yXG5cbiAgICAgICAgY29sbGVjdGlvbkFzc2VtYmx5TGlzdFswXS5hcHBlbmRDaGlsZChhc3NlbWJseUxpc3RJdGVtcy5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgICBjb2xsZWN0aW9uQXNzZW1ibHlMaXN0RnVsbFswXS5hcHBlbmRDaGlsZChhc3NlbWJseUxpc3RJdGVtcy5jbG9uZU5vZGUodHJ1ZSkpO1xuXG4gICAgICAgICQoJy5hbnRpYmlvdGljW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGlzTmF2SXRlbUVuYWJsZWRcbiAgICAgKiBAcGFyYW0ge30gbmF2SXRlbU5hbWVcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBpc05hdkl0ZW1FbmFibGVkID0gZnVuY3Rpb24obmF2SXRlbU5hbWUpIHtcbiAgICAgICAgdmFyIG5hdkl0ZW0gPSAkKCcud2dzdC1uYXZpZ2F0aW9uLWl0ZW1fXycgKyBuYXZJdGVtTmFtZSk7XG5cbiAgICAgICAgaWYgKG5hdkl0ZW0uaGFzQ2xhc3MoJ3dnc3QtbmF2aWdhdGlvbi1pdGVtLS1hY3RpdmUnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGVuYWJsZU5hdkl0ZW1cbiAgICAgKiBAcGFyYW0ge30gbmF2SXRlbU5hbWVcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBlbmFibGVOYXZJdGVtID0gZnVuY3Rpb24obmF2SXRlbU5hbWUpIHtcbiAgICAgICAgdmFyIG5hdkl0ZW0gPSAkKCcud2dzdC1uYXZpZ2F0aW9uLWl0ZW1fXycgKyBuYXZJdGVtTmFtZSk7XG5cbiAgICAgICAgaWYgKCEgaXNOYXZJdGVtRW5hYmxlZChuYXZJdGVtTmFtZSkpIHtcbiAgICAgICAgICAgIG5hdkl0ZW0uYWRkQ2xhc3MoJ3dnc3QtbmF2aWdhdGlvbi1pdGVtLS1hY3RpdmUnKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgZGlzYWJsZU5hdkl0ZW1cbiAgICAgKiBAcGFyYW0ge30gbmF2SXRlbU5hbWVcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBkaXNhYmxlTmF2SXRlbSA9IGZ1bmN0aW9uKG5hdkl0ZW1OYW1lKSB7XG4gICAgICAgIHZhciBuYXZJdGVtID0gJCgnLndnc3QtbmF2aWdhdGlvbi1pdGVtX18nICsgbmF2SXRlbU5hbWUpO1xuXG4gICAgICAgIGlmIChpc05hdkl0ZW1FbmFibGVkKG5hdkl0ZW1OYW1lKSkge1xuICAgICAgICAgICAgbmF2SXRlbS5yZW1vdmVDbGFzcygnd2dzdC1uYXZpZ2F0aW9uLWl0ZW0tLWFjdGl2ZScpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBjbGVhckNvbGxlY3Rpb25Bc3NlbWJseUxpc3RcbiAgICAgKiBAcGFyYW0ge30gY29sbGVjdGlvbklkXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgY2xlYXJDb2xsZWN0aW9uQXNzZW1ibHlMaXN0ID0gZnVuY3Rpb24oY29sbGVjdGlvbklkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF0gQ2xlYXJpbmcgJyArIGNvbGxlY3Rpb25JZCArICcgY29sbGVjdGlvbiBhc3NlbWJseSBsaXN0Jyk7XG5cbiAgICAgICAgJCgnLndnc3QtcGFuZWxfX2NvbGxlY3Rpb24gLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdCcpLmh0bWwoJycpO1xuICAgIH07XG5cbiAgICB2YXIgcmVtb3ZlQ29sbGVjdGlvblRyZWVQYW5lbCA9IGZ1bmN0aW9uKGNvbGxlY3Rpb25JZCwgY29sbGVjdGlvblRyZWVUeXBlKSB7XG4gICAgICAgIHZhciBjb2xsZWN0aW9uVHJlZVBhbmVsSWQgPSAnY29sbGVjdGlvblRyZWUnICsgJ19fJyArIGNvbGxlY3Rpb25JZCArICdfXycgKyBjb2xsZWN0aW9uVHJlZVR5cGUsXG4gICAgICAgICAgICAkY29sbGVjdGlvblRyZWVQYW5lbCA9ICQoJy53Z3N0LXBhbmVsW2RhdGEtcGFuZWwtbmFtZT1cIicgKyBjb2xsZWN0aW9uVHJlZVBhbmVsSWQgKyAnXCJdJyk7XG5cbiAgICAgICAgJGNvbGxlY3Rpb25UcmVlUGFuZWwucmVtb3ZlKCk7XG4gICAgfTtcblxuICAgIHZhciByZW1vdmVDb2xsZWN0aW9uVHJlZVBhbmVscyA9IGZ1bmN0aW9uKGNvbGxlY3Rpb25JZCkge1xuICAgICAgICB2YXIgY29sbGVjdGlvblRyZWVzID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZTtcblxuICAgICAgICAkLmVhY2goY29sbGVjdGlvblRyZWVzLCBmdW5jdGlvbihjb2xsZWN0aW9uVHJlZVR5cGUsIGNvbGxlY3Rpb25UcmVlRGF0YSkge1xuICAgICAgICAgICAgLy8gUmVuZGVyIGNvbGxlY3Rpb24gdHJlZSBidXR0b25cbiAgICAgICAgICAgIHJlbW92ZUNvbGxlY3Rpb25UcmVlUGFuZWwoY29sbGVjdGlvbklkLCBjb2xsZWN0aW9uVHJlZVR5cGUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGNsb3NlQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7fSBjb2xsZWN0aW9uSWRcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBjbG9zZUNvbGxlY3Rpb24gPSBmdW5jdGlvbihjb2xsZWN0aW9uSWQpIHtcbiAgICAgICAgLypcbiAgICAgICAgKiBJZiBjb2xsZWN0aW9uIG9iamVjdCBkb2Vzbid0IGV4aXN0IHRoZW4gY29sbGVjdGlvbiB3YXMgY2xvc2VkIHByZXZpb3VzbHkuXG4gICAgICAgICogRG8gbm90aGluZyBpbiB0aGlzIGNhc2UuXG4gICAgICAgICovXG4gICAgICAgIGlmICh0eXBlb2YgV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdIENsb3NpbmcgY29sbGVjdGlvbiAnICsgY29sbGVjdGlvbklkKTtcbiAgICAgICAgLy9jb25zb2xlLmRpcihXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXSk7XG5cbiAgICAgICAgY2xlYXJDb2xsZWN0aW9uQXNzZW1ibHlMaXN0KGNvbGxlY3Rpb25JZCk7XG5cbiAgICAgICAgZGVhY3RpdmF0ZVBhbmVsKFsnY29sbGVjdGlvbicsICdjb2xsZWN0aW9uVHJlZSddKTtcblxuICAgICAgICAvLyBSZW1vdmUgY29sbGVjdGlvbiB0cmVlIHBhbmVsc1xuICAgICAgICByZW1vdmVDb2xsZWN0aW9uVHJlZVBhbmVscyhjb2xsZWN0aW9uSWQpO1xuXG4gICAgICAgIC8vIENoYW5nZSBVUkxcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKCdPYmplY3QnLCAnV0dTVCBDb2xsZWN0aW9uJywgJycpO1xuXG4gICAgICAgIC8vIFJlbW92ZSBhbGwgJ09wZW4gdHJlZScgYnV0dG9uc1xuICAgICAgICAkKCcud2dzdC1jb2xsZWN0aW9uLWNvbnRyb2xzX19zaG93LXRyZWUgLmJ0bi1ncm91cCcpLmh0bWwoJycpO1xuXG4gICAgICAgIC8vIERpc2FibGUgJ0NvbGxlY3Rpb24nIG5hdiBpdGVtXG4gICAgICAgIGRpc2FibGVOYXZJdGVtKCdjb2xsZWN0aW9uJyk7XG5cbiAgICAgICAgLy8gRGVsZXRlIGNvbGxlY3Rpb24gb2JqZWN0XG4gICAgICAgIGRlbGV0ZSBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGluaXRFbXB0eUNvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge30gY29sbGVjdGlvbklkXG4gICAgICogQHBhcmFtIHt9IGNvbGxlY3Rpb25UcmVlVHlwZXNcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBpbml0RW1wdHlDb2xsZWN0aW9uID0gZnVuY3Rpb24oY29sbGVjdGlvbklkLCBjb2xsZWN0aW9uVHJlZVR5cGVzKSB7XG4gICAgICAgIFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdID0ge1xuICAgICAgICAgICAgYXNzZW1ibGllczoge30sXG4gICAgICAgICAgICB0cmVlOiB7fVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEluaXQgZWFjaCBjb2xsZWN0aW9uIHRyZWUgdHlwZVxuICAgICAgICBpZiAoJC5pc0FycmF5KGNvbGxlY3Rpb25UcmVlVHlwZXMpKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uVHJlZVR5cGVzLmZvckVhY2goZnVuY3Rpb24oY29sbGVjdGlvblRyZWVUeXBlKXtcbiAgICAgICAgICAgICAgICBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS50cmVlW2NvbGxlY3Rpb25UcmVlVHlwZV0gPSB7fTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZW5kZXJDb2xsZWN0aW9uVHJlZUJ1dHRvbnMgPSBmdW5jdGlvbihjb2xsZWN0aW9uSWQpIHtcbiAgICAgICAgLy8gSW5pdCBhbGwgY29sbGVjdGlvbiB0cmVlc1xuICAgICAgICB2YXIgY29sbGVjdGlvblRyZWVzID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZTtcblxuICAgICAgICAkLmVhY2goY29sbGVjdGlvblRyZWVzLCBmdW5jdGlvbihjb2xsZWN0aW9uVHJlZVR5cGUsIGNvbGxlY3Rpb25UcmVlRGF0YSkge1xuICAgICAgICAgICAgLy8gUmVuZGVyIGNvbGxlY3Rpb24gdHJlZSBidXR0b25cbiAgICAgICAgICAgIHJlbmRlckNvbGxlY3Rpb25UcmVlQnV0dG9uKGNvbGxlY3Rpb25JZCwgY29sbGVjdGlvblRyZWVUeXBlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciByZW5kZXJDb2xsZWN0aW9uVHJlZUJ1dHRvbiA9IGZ1bmN0aW9uKGNvbGxlY3Rpb25JZCwgY29sbGVjdGlvblRyZWVUeXBlKSB7XG4gICAgICAgIC8vIEluaXQgYWxsIGNvbGxlY3Rpb24gdHJlZXNcbiAgICAgICAgdmFyIGNvbGxlY3Rpb25UcmVlID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZVtjb2xsZWN0aW9uVHJlZVR5cGVdLFxuICAgICAgICAgICAgY29sbGVjdGlvblRyZWVOYW1lID0gY29sbGVjdGlvblRyZWUubmFtZSxcbiAgICAgICAgICAgIG9wZW5UcmVlQnV0dG9uLFxuICAgICAgICAgICAgb3BlblRyZWVCdXR0b25UZW1wbGF0ZSA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWRlZmF1bHQgd2dzdC1jb2xsZWN0aW9uLWNvbnRyb2xfX3Nob3ctdHJlZVwiIGRhdGEtdHJlZS10eXBlPVwie3tjb2xsZWN0aW9uVHJlZVR5cGV9fVwiIGRhdGEtY29sbGVjdGlvbi1pZD1cInt7Y29sbGVjdGlvbklkfX1cIj57e2NvbGxlY3Rpb25UcmVlTmFtZX19PC9idXR0b24+JyxcbiAgICAgICAgICAgICRjb2xsZWN0aW9uQ29udHJvbHNTaG93VHJlZSA9ICQoJy53Z3N0LWNvbGxlY3Rpb24tY29udHJvbHNfX3Nob3ctdHJlZSAuYnRuLWdyb3VwJyk7XG5cbiAgICAgICAgLy8gQWRkIFwiT3BlbiB0cmVlXCIgYnV0dG9uIHRvIHRoaXMgY29sbGVjdGlvbiBwYW5lbFxuICAgICAgICBvcGVuVHJlZUJ1dHRvbiA9IG9wZW5UcmVlQnV0dG9uVGVtcGxhdGUucmVwbGFjZSgve3tjb2xsZWN0aW9uVHJlZVR5cGV9fS9nLCBjb2xsZWN0aW9uVHJlZVR5cGUpO1xuICAgICAgICBvcGVuVHJlZUJ1dHRvbiA9IG9wZW5UcmVlQnV0dG9uLnJlcGxhY2UoL3t7Y29sbGVjdGlvbklkfX0vZywgY29sbGVjdGlvbklkKTtcbiAgICAgICAgb3BlblRyZWVCdXR0b24gPSBvcGVuVHJlZUJ1dHRvbi5yZXBsYWNlKC97e2NvbGxlY3Rpb25UcmVlTmFtZX19L2csIGNvbGxlY3Rpb25UcmVlTmFtZSk7XG4gICAgICAgICRjb2xsZWN0aW9uQ29udHJvbHNTaG93VHJlZS5hcHBlbmQoJChvcGVuVHJlZUJ1dHRvbikpO1xuICAgIH07XG5cbiAgICB2YXIgcmVuZGVyQ29sbGVjdGlvblRyZWVzID0gZnVuY3Rpb24oY29sbGVjdGlvbklkLCBjb2xsZWN0aW9uVHJlZU9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNvbGxlY3Rpb25UcmVlcyA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWU7XG4gICAgICAgICQuZWFjaChjb2xsZWN0aW9uVHJlZXMsIGZ1bmN0aW9uKGNvbGxlY3Rpb25UcmVlVHlwZSwgY29sbGVjdGlvblRyZWVEYXRhKSB7XG4gICAgICAgICAgICAvLyBSZW5kZXIgY29sbGVjdGlvbiB0cmVlXG4gICAgICAgICAgICByZW5kZXJDb2xsZWN0aW9uVHJlZShjb2xsZWN0aW9uSWQsIGNvbGxlY3Rpb25UcmVlVHlwZSwgY29sbGVjdGlvblRyZWVPcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBpbml0Q29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7fSBjb2xsZWN0aW9uSWRcbiAgICAgKiBAcGFyYW0ge30gYXNzZW1ibGllc1xuICAgICAqIEBwYXJhbSB7fSB0cmVlc1xuICAgICAqIEBwYXJhbSB7fSB0cmVlT3B0aW9uc1xuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGluaXRDb2xsZWN0aW9uID0gZnVuY3Rpb24oY29sbGVjdGlvbklkLCBjb2xsZWN0aW9uQXNzZW1ibGllcywgY29sbGVjdGlvblRyZWVzKSB7XG4gICAgICAgIGluaXRFbXB0eUNvbGxlY3Rpb24oY29sbGVjdGlvbklkKTtcbiAgICAgICAgV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllcyA9IGNvbGxlY3Rpb25Bc3NlbWJsaWVzO1xuXG4gICAgICAgICQuZWFjaChjb2xsZWN0aW9uVHJlZXMsIGZ1bmN0aW9uKGNvbGxlY3Rpb25UcmVlVHlwZSwgY29sbGVjdGlvblRyZWVEYXRhKSB7XG4gICAgICAgICAgICAvLyBJbml0IGNvbGxlY3Rpb24gdHJlZVxuICAgICAgICAgICAgV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZVtjb2xsZWN0aW9uVHJlZVR5cGVdID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IGNvbGxlY3Rpb25UcmVlVHlwZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBjb2xsZWN0aW9uVHJlZURhdGEuZGF0YSxcbiAgICAgICAgICAgICAgICBuYW1lOiBjb2xsZWN0aW9uVHJlZURhdGEubmFtZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBnZXRDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHt9IGNvbGxlY3Rpb25JZFxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGdldENvbGxlY3Rpb24gPSBmdW5jdGlvbihjb2xsZWN0aW9uSWQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBHZXR0aW5nIGNvbGxlY3Rpb24gJyArIGNvbGxlY3Rpb25JZCk7XG5cbiAgICAgICAgaWYgKFdHU1Quc3BlYWspIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSgnTG9hZGluZyBjb2xsZWN0aW9uJyk7XG4gICAgICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnNwZWFrKG1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2hlbiBleHRlbmRpbmcgY3VycmVudCBjb2xsZWN0aW9uLCBjbG9zZSBpdCBhbmQgdGhlbiBvcGVuIGl0IGFnYWluXG4gICAgICAgIGNsb3NlQ29sbGVjdGlvbihjb2xsZWN0aW9uSWQpO1xuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gSW5pdCBjb2xsZWN0aW9uIHBhbmVsXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgdmFyICRjb2xsZWN0aW9uUGFuZWwgPSAkKCcud2dzdC1wYW5lbF9fY29sbGVjdGlvbicpO1xuICAgICAgICAvLyBTZXQgcGFuZWwgaWRcbiAgICAgICAgJGNvbGxlY3Rpb25QYW5lbC5hdHRyKCdkYXRhLXBhbmVsLWlkJywgJ2NvbGxlY3Rpb25fJyArIGNvbGxlY3Rpb25JZCk7XG4gICAgICAgIC8vIFNldCBjb2xsZWN0aW9uIGlkIHRvIGNvbGxlY3Rpb24gcGFuZWxcbiAgICAgICAgJGNvbGxlY3Rpb25QYW5lbC5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnLCBjb2xsZWN0aW9uSWQpO1xuICAgICAgICAvLyBTZXQgY29sbGVjdGlvbiBpZFxuICAgICAgICAkY29sbGVjdGlvblBhbmVsLmZpbmQoJy5jb2xsZWN0aW9uLWRldGFpbHMnKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnLCBjb2xsZWN0aW9uSWQpO1xuICAgICAgICAkY29sbGVjdGlvblBhbmVsLmZpbmQoJy53Z3N0LWNvbGxlY3Rpb24tY29udHJvbF9fc2hvdy10cmVlJykuYXR0cignY29sbGVjdGlvbi1pZCcsIGNvbGxlY3Rpb25JZCk7O1xuXG4gICAgICAgIGFjdGl2YXRlUGFuZWwoJ2NvbGxlY3Rpb24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc3RhcnRQYW5lbExvYWRpbmdJbmRpY2F0b3IoJ2NvbGxlY3Rpb24nKTtcbiAgICAgICAgICAgIHNob3dQYW5lbCgnY29sbGVjdGlvbicpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBHZXQgY29sbGVjdGlvbiBkYXRhXG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6ICcvY29sbGVjdGlvbi8nLFxuICAgICAgICAgICAgZGF0YXR5cGU6ICdqc29uJywgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvOTE1NTIxN1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZDogY29sbGVjdGlvbklkXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5kb25lKGZ1bmN0aW9uKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdIEdvdCBjb2xsZWN0aW9uICcgKyBjb2xsZWN0aW9uSWQgKyAnIGRhdGEnKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZGlyKGRhdGEpO1xuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGxpc3Qgb2YgYW50aWJpb3RpY3NcbiAgICAgICAgICAgICAgICBXR1NULmFudGliaW90aWNzID0gZGF0YS5hbnRpYmlvdGljcztcblxuICAgICAgICAgICAgICAgIGluaXRDb2xsZWN0aW9uKGNvbGxlY3Rpb25JZCwgZGF0YS5jb2xsZWN0aW9uLmFzc2VtYmxpZXMsIGRhdGEuY29sbGVjdGlvbi50cmVlKTtcbiAgICAgICAgICAgICAgICByZW5kZXJDb2xsZWN0aW9uVHJlZXMoY29sbGVjdGlvbklkKTtcbiAgICAgICAgICAgICAgICByZW5kZXJDb2xsZWN0aW9uVHJlZUJ1dHRvbnMoY29sbGVjdGlvbklkKTtcbiAgICAgICAgICAgICAgICBhZGRSZXNpc3RhbmNlUHJvZmlsZVRvQ29sbGVjdGlvbihjb2xsZWN0aW9uSWQpO1xuXG4gICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgIC8vIFJlbmRlciBhc3NlbWJseSBtZXRhZGF0YSBsaXN0XG4gICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgIHZhciBhc3NlbWJsaWVzID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllcyxcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkQXNzZW1ibGllcyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBzb3J0ZWRBc3NlbWJseUlkcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLy8gU29ydCBhc3NlbWJsaWVzIGluIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlIGRpc3BsYXllZCBvbiB0cmVlXG4gICAgICAgICAgICAgICAgJC5lYWNoKFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWVbJ0NPUkVfVFJFRV9SRVNVTFQnXS5sZWF2ZXNPcmRlciwgZnVuY3Rpb24obGVhZkNvdW50ZXIsIGxlYWYpe1xuICAgICAgICAgICAgICAgICAgICBzb3J0ZWRBc3NlbWJsaWVzLnB1c2goYXNzZW1ibGllc1tsZWFmLmlkXSk7XG4gICAgICAgICAgICAgICAgICAgIHNvcnRlZEFzc2VtYmx5SWRzLnB1c2gobGVhZi5pZCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5zb3J0ZWRBc3NlbWJseUlkcyA9IHNvcnRlZEFzc2VtYmx5SWRzO1xuXG4gICAgICAgICAgICAgICAgcmVuZGVyQXNzZW1ibHlBbmFseXNpc0xpc3QoY29sbGVjdGlvbklkLCBXR1NULmFudGliaW90aWNzKTtcblxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICAvLyBQcmVwYXJlIGNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBDb2xsZWN0aW9uICcgKyBjb2xsZWN0aW9uSWQgKyAnIGhhcyAnICsgT2JqZWN0LmtleXMoYXNzZW1ibGllcykubGVuZ3RoICsgJyBhc3NlbWJsaWVzJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgY29sbGVjdGlvbiBjcmVhdGlvbiB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICB2YXIgYXNzZW1ibHlJZHMgPSBPYmplY3Qua2V5cyhhc3NlbWJsaWVzKSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdEFzc2VtYmx5SWQgPSBhc3NlbWJseUlkc1thc3NlbWJseUlkcy5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdEFzc2VtYmx5VGltZXN0YW1wID0gYXNzZW1ibGllc1tsYXN0QXNzZW1ibHlJZF1bJ0ZQX0NPTVAnXS50aW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgLy8gRm9ybWF0IHRvIHJlYWRhYmxlIHN0cmluZyBzbyB0aGF0IHVzZXIgY291bGQgcmVhZCBkZXRhaWxlZCB0aW1lc3RhbXAgb24gbW91c2Ugb3ZlclxuICAgICAgICAgICAgICAgICQoJy5hc3NlbWJseS1jcmVhdGVkLWRhdGV0aW1lJykuYXR0cigndGl0bGUnLCBtb21lbnQobGFzdEFzc2VtYmx5VGltZXN0YW1wLCBcIllZWVlNTUREX0hIbW1zc1wiKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKSk7XG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCB0byB0aW1lIGFnbyBzdHJpbmdcbiAgICAgICAgICAgICAgICAkKCcudGltZWFnbycpLnRpbWVhZ28oKTtcblxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICAvLyBQcmVwYXJlIGNvbGxlY3Rpb24gc3RhdHNcbiAgICAgICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgJCgnLndnc3Qtc3RhdHNfX2NvbGxlY3Rpb24gLndnc3Qtc3RhdHMtdmFsdWVfX3RvdGFsLW51bWJlci1vZi1hc3NlbWJsaWVzJykuaHRtbChzb3J0ZWRBc3NlbWJsaWVzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgJCgnLndnc3Qtc3RhdHNfX2NvbGxlY3Rpb24gLndnc3Qtc3RhdHMtdmFsdWVfX251bWJlci1vZi1kaXNwbGF5ZWQtYXNzZW1ibGllcycpLmh0bWwoc29ydGVkQXNzZW1ibGllcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICQoJy53Z3N0LXN0YXRzX19jb2xsZWN0aW9uIC53Z3N0LXN0YXRzLXZhbHVlX19udW1iZXItb2Ytc2VsZWN0ZWQtYXNzZW1ibGllcycpLmh0bWwoJzAnKTtcbiAgICAgICAgICAgICAgICAkKCcud2dzdC1zdGF0c19fY29sbGVjdGlvbiAud2dzdC1zdGF0cy12YWx1ZV9fY3JlYXRlZC1vbicpLmh0bWwobW9tZW50KG5ldyBEYXRlKCkpLmZvcm1hdCgnREQvTU0vWVlZWScpKTtcbiAgICAgICAgICAgICAgICAkKCcud2dzdC1zdGF0c19fY29sbGVjdGlvbiAud2dzdC1zdGF0cy12YWx1ZV9fYXV0aG9yJykuaHRtbCgnQW5vbnltb3VzJyk7XG4gICAgICAgICAgICAgICAgJCgnLndnc3Qtc3RhdHNfX2NvbGxlY3Rpb24gLndnc3Qtc3RhdHMtdmFsdWVfX3ByaXZhY3knKS5odG1sKCdQdWJsaWMnKTtcblxuICAgICAgICAgICAgICAgIC8vIFNjcm9sbGluZyBoaW50XG4gICAgICAgICAgICAgICAgLy8gaWYgKCQoJy5jb2xsZWN0aW9uLWFzc2VtYmx5LWxpc3QgLmFzc2VtYmx5LWxpc3QtaXRlbTp2aXNpYmxlJykubGVuZ3RoID4gNykge1xuICAgICAgICAgICAgICAgIC8vICAgICAkKCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0LW1vcmUtYXNzZW1ibGllcycpLnNob3coKTtcbiAgICAgICAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vICAgICAkKCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0LW1vcmUtYXNzZW1ibGllcycpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgICAgICAvL3Nob3dQYW5lbCgnY29sbGVjdGlvbicpO1xuICAgICAgICAgICAgICAgIGVuZFBhbmVsTG9hZGluZ0luZGljYXRvcignY29sbGVjdGlvbicpO1xuICAgICAgICAgICAgICAgIHNob3dQYW5lbEJvZHlDb250ZW50KCdjb2xsZWN0aW9uJyk7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIElmIGNvbGxlY3Rpb24gaGFzIG1vcmUgdGhhbiAxMDAgYXNzZW1ibGllcyB0aGVuIHNob3cgZnVsbHNjcmVlbiBpbnN0ZWFkIG9mIHBhbmVsLlxuICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAqIENvbGxlY3Rpb24gaGFzIG1vcmUgdGhhbiAxMDAgYXNzZW1ibGllcyAtIHNob3cgZnVsbHNjcmVlbiwgb3RoZXJ3aXNlIHNob3cgcGFuZWwuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllcykubGVuZ3RoID4gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF0gQ29sbGVjdGlvbiAnICsgY29sbGVjdGlvbklkICsgJyB3aWxsIGJlIGRpc3BsYXllZCBmdWxsc2NyZWVuJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXhpbWl6ZUNvbGxlY3Rpb24oY29sbGVjdGlvbklkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFbmFibGUgJ0NvbGxlY3Rpb24nIG5hdiBpdGVtXG4gICAgICAgICAgICAgICAgZW5hYmxlTmF2SXRlbSgnY29sbGVjdGlvbicpO1xuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGFkZHJlc3MgYmFyXG4gICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKCdPYmplY3QnLCAnV0dTVCBDb2xsZWN0aW9uJywgJy9jb2xsZWN0aW9uLycgKyBjb2xsZWN0aW9uSWQpOyAgICBcbiAgICAgICAgICAgIH0gLy8gaWZcbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdW0VSUk9SXSBGYWlsZWQgdG8gZ2V0IGNvbGxlY3Rpb24gaWQnKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IodGV4dFN0YXR1cyk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yVGhyb3duKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanFYSFIpO1xuXG4gICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKHRleHRTdGF0dXMpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gSWYgdXNlciBwcm92aWRlZCBjb2xsZWN0aW9uIGlkIGluIHVybCB0aGVuIGxvYWQgcmVxdWVzdGVkIGNvbGxlY3Rpb25cbiAgICBpZiAodHlwZW9mIFdHU1QucmVxdWVzdGVkQ29sbGVjdGlvbklkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBnZXRDb2xsZWN0aW9uKFdHU1QucmVxdWVzdGVkQ29sbGVjdGlvbklkKTtcbiAgICB9XG5cbiAgICAkKCcudHJlZS1jb250cm9scy1zaG93LWxhYmVscycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vIEdldCBjb2xsZWN0aW9uIGlkXG4gICAgICAgIHZhciBjb2xsZWN0aW9uSWQgPSAkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyk7XG5cbiAgICAgICAgV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZVsnQ09SRV9UUkVFX1JFU1VMVCddLmNhbnZhcy5kaXNwbGF5TGFiZWxzKCk7XG4gICAgfSk7XG5cbiAgICAkKCcudHJlZS1jb250cm9scy1oaWRlLWxhYmVscycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vIEdldCBjb2xsZWN0aW9uIGlkXG4gICAgICAgIHZhciBjb2xsZWN0aW9uSWQgPSAkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyk7XG5cbiAgICAgICAgV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZVsnQ09SRV9UUkVFX1JFU1VMVCddLmNhbnZhcy5oaWRlTGFiZWxzKCk7XG4gICAgfSk7XG5cbiAgICAvLyAkKCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0Jykub24oJ3Njcm9sbCcsIGZ1bmN0aW9uKCl7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdTY3JvbGxpbmcuLi4nKTtcblxuICAgIC8vICAgICB2YXIgY29sbGVjdGlvbklkID0gJCh0aGlzKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKTtcblxuICAgIC8vICAgICBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5kaXNwbGF5ZWRBc3NlbWJsaWVzID0gW107XG4gICAgLy8gfSk7XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgZ3JvdXBBc3NlbWJsaWVzQnlQb3NpdGlvblxuICAgICAqIEBwYXJhbSB7fSBjb2xsZWN0aW9uSWRcbiAgICAgKiBAcGFyYW0ge30gYXNzZW1ibHlJZHNcbiAgICAgKiBAcmV0dXJuIGdyb3VwZWRQb3NpdGlvbnNcbiAgICAgKi9cbiAgICB2YXIgZ3JvdXBBc3NlbWJsaWVzQnlQb3NpdGlvbiA9IGZ1bmN0aW9uKGNvbGxlY3Rpb25JZCwgYXNzZW1ibHlJZHMpIHtcbiAgICAgICAgdmFyIGdyb3VwZWRQb3NpdGlvbnMgPSB7fSxcbiAgICAgICAgICAgIGFzc2VtYmxpZXMgPSBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5hc3NlbWJsaWVzLFxuICAgICAgICAgICAgYXNzZW1ibHlJZCxcbiAgICAgICAgICAgIGFzc2VtYmx5UG9zaXRpb25MYXRpdHVkZSxcbiAgICAgICAgICAgIGFzc2VtYmx5UG9zaXRpb25Mb25naXR1ZGUsXG4gICAgICAgICAgICBhc3NlbWJseUxhdExuZztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFzc2VtYmx5SWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhc3NlbWJseUlkID0gYXNzZW1ibHlJZHNbaV07XG4gICAgICAgICAgICBhc3NlbWJseVBvc2l0aW9uTGF0aXR1ZGUgPSBhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdLkFTU0VNQkxZX01FVEFEQVRBLmdlb2dyYXBoeS5wb3NpdGlvbi5sYXRpdHVkZTtcbiAgICAgICAgICAgIGFzc2VtYmx5UG9zaXRpb25Mb25naXR1ZGUgPSBhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdLkFTU0VNQkxZX01FVEFEQVRBLmdlb2dyYXBoeS5wb3NpdGlvbi5sb25naXR1ZGU7XG4gICAgICAgICAgICBhc3NlbWJseUxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoYXNzZW1ibHlQb3NpdGlvbkxhdGl0dWRlLCBhc3NlbWJseVBvc2l0aW9uTG9uZ2l0dWRlKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBncm91cGVkUG9zaXRpb25zW2Fzc2VtYmx5TGF0TG5nLnRvU3RyaW5nKCldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGdyb3VwZWRQb3NpdGlvbnNbYXNzZW1ibHlMYXRMbmcudG9TdHJpbmcoKV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZ3JvdXBlZFBvc2l0aW9uc1thc3NlbWJseUxhdExuZy50b1N0cmluZygpXS5wdXNoKGFzc2VtYmx5SWQpO1xuICAgICAgICB9IC8vIGZvclxuXG4gICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF0gR3JvdXBlZCBhc3NlbWJsaWVzIGJ5IHBvc2l0aW9uOicpO1xuICAgICAgICBjb25zb2xlLmRpcihncm91cGVkUG9zaXRpb25zKTtcblxuICAgICAgICByZXR1cm4gZ3JvdXBlZFBvc2l0aW9ucztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZUdyb3VwTWFya2VyXG4gICAgICogQHBhcmFtIHt9IGdyb3VwQXNzZW1ibHlJZHNcbiAgICAgKiBAcGFyYW0ge30gZ3JvdXBNYXJrZXJMYXRcbiAgICAgKiBAcGFyYW0ge30gZ3JvdXBNYXJrZXJMbmdcbiAgICAgKiBAcGFyYW0ge30gZ3JvdXBTaXplXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlR3JvdXBNYXJrZXIgPSBmdW5jdGlvbihncm91cEFzc2VtYmx5SWRzLCBncm91cE1hcmtlckxhdCwgZ3JvdXBNYXJrZXJMbmcsIGdyb3VwU2l6ZSkge1xuICAgICAgICB2YXIgbWFya2VySWNvbiA9ICcvL2NoYXJ0LmFwaXMuZ29vZ2xlLmNvbS9jaGFydD9jaHN0PWRfbWFwX3Bpbl9sZXR0ZXImY2hsZD0nICsgZ3JvdXBTaXplICsgJ3wwMEZGRkZ8MDAwMDAwJyxcbiAgICAgICAgICAgIGdyb3VwUG9zaXRpb24gPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGdyb3VwTWFya2VyTGF0LCBncm91cE1hcmtlckxuZyksXG4gICAgICAgICAgICBncm91cFBvc2l0aW9uU3RyaW5nID0gZ3JvdXBQb3NpdGlvbi50b1N0cmluZygpO1xuXG4gICAgICAgIFdHU1QuZ2VvLm1hcC5tYXJrZXJzLmdyb3VwW2dyb3VwUG9zaXRpb25TdHJpbmddID0ge1xuICAgICAgICAgICAgYXNzZW1ibHlJZHM6IGdyb3VwQXNzZW1ibHlJZHMsXG4gICAgICAgICAgICBtYXJrZXI6IHt9XG4gICAgICAgIH07XG5cbiAgICAgICAgV0dTVC5nZW8ubWFwLm1hcmtlcnMuZ3JvdXBbZ3JvdXBQb3NpdGlvblN0cmluZ10ubWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhncm91cE1hcmtlckxhdCwgZ3JvdXBNYXJrZXJMbmcpLFxuICAgICAgICAgICAgbWFwOiBXR1NULmdlby5tYXAuY2FudmFzLFxuICAgICAgICAgICAgaWNvbjogbWFya2VySWNvbixcbiAgICAgICAgICAgIC8vZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgb3B0aW1pemVkOiB0cnVlIC8vIGh0dHA6Ly93d3cuZ3V0ZW5zaXRlLmNvbS9Hb29nbGUtTWFwcy1DdXN0b20tTWFya2Vycy1DdXQtT2ZmLUJ5LUNhbnZhcy1UaWxlc1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBIYW5kbGUgbWFya2VyIGNsaWNrXG4gICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKFdHU1QuZ2VvLm1hcC5tYXJrZXJzLmdyb3VwW2dyb3VwUG9zaXRpb25TdHJpbmddLm1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgb25seSBvbmUgYXNzZW1ibHkgaWQgaW4gYSBncm91cCB0aGVuIG9wZW4gdGhhdCBhc3NlbWJseVxuICAgICAgICAgICAgaWYgKFdHU1QuZ2VvLm1hcC5tYXJrZXJzLmdyb3VwW2dyb3VwUG9zaXRpb25TdHJpbmddLmFzc2VtYmx5SWRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIG9wZW5Bc3NlbWJseVBhbmVsKFdHU1QuZ2VvLm1hcC5tYXJrZXJzLmdyb3VwW2dyb3VwUG9zaXRpb25TdHJpbmddLmFzc2VtYmx5SWRzWzBdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRG8gbm90aGluZyB5ZXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCByZW1vdmVBbGxHcm91cE1hcmtlcnNcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciByZW1vdmVBbGxHcm91cE1hcmtlcnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFsbEdyb3VwTWFya2VycyA9IFdHU1QuZ2VvLm1hcC5tYXJrZXJzLmdyb3VwLFxuICAgICAgICAgICAgZ3JvdXBQb3NpdGlvblN0cmluZyxcbiAgICAgICAgICAgIGdyb3VwTWFya2VyO1xuXG4gICAgICAgIGZvciAoZ3JvdXBQb3NpdGlvblN0cmluZyBpbiBhbGxHcm91cE1hcmtlcnMpIHtcbiAgICAgICAgICAgIGdyb3VwTWFya2VyID0gYWxsR3JvdXBNYXJrZXJzW2dyb3VwUG9zaXRpb25TdHJpbmddLm1hcmtlcjtcbiAgICAgICAgICAgIGdyb3VwTWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgIGRlbGV0ZSBXR1NULmdlby5tYXAubWFya2Vycy5ncm91cFtncm91cFBvc2l0aW9uU3RyaW5nXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuY2hlY2sgQWxsIEFzc2VtYmxpZXMgT24gTWFwIGNoZWNrYm94XG4gICAgICAgICQoJy5zaG93LWFsbC1hc3NlbWJsaWVzLW9uLW1hcCcpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCB0cmlnZ2VyTWFwTWFya2Vyc1xuICAgICAqIEBwYXJhbSB7fSBjb2xsZWN0aW9uSWRcbiAgICAgKiBAcGFyYW0ge30gc2VsZWN0ZWRBc3NlbWJseUlkc1xuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIHRyaWdnZXJNYXBNYXJrZXJzID0gZnVuY3Rpb24oY29sbGVjdGlvbklkLCBzZWxlY3RlZEFzc2VtYmx5SWRzKSB7XG5cbiAgICAgICAgdmFyIGFzc2VtYmx5TWFya2VyQm91bmRzID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcygpO1xuXG4gICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyBtYXJrZXJzXG4gICAgICAgIHJlbW92ZUFsbEdyb3VwTWFya2VycygpO1xuXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgbWFya2VycyBpZiB0aGVyZSBhcmUgYW55XG4gICAgICAgIGlmIChzZWxlY3RlZEFzc2VtYmx5SWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBncm91cGVkUG9zaXRpb25zID0gZ3JvdXBBc3NlbWJsaWVzQnlQb3NpdGlvbihjb2xsZWN0aW9uSWQsIHNlbGVjdGVkQXNzZW1ibHlJZHMpLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uU3RyaW5nLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uR3JvdXAsXG4gICAgICAgICAgICAgICAgYXNzZW1ibGllcyA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLmFzc2VtYmxpZXMsXG4gICAgICAgICAgICAgICAgYXNzZW1ibHlJZCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkdyb3VwTGF0LFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uR3JvdXBMbmc7XG5cbiAgICAgICAgICAgIGZvciAocG9zaXRpb25TdHJpbmcgaW4gZ3JvdXBlZFBvc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uR3JvdXAgPSBncm91cGVkUG9zaXRpb25zW3Bvc2l0aW9uU3RyaW5nXTtcbiAgICAgICAgICAgICAgICBhc3NlbWJseUlkID0gcG9zaXRpb25Hcm91cFswXTtcblxuICAgICAgICAgICAgICAgIHBvc2l0aW9uR3JvdXBMYXQgPSBhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdLkFTU0VNQkxZX01FVEFEQVRBLmdlb2dyYXBoeS5wb3NpdGlvbi5sYXRpdHVkZTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkdyb3VwTG5nID0gYXNzZW1ibGllc1thc3NlbWJseUlkXS5BU1NFTUJMWV9NRVRBREFUQS5nZW9ncmFwaHkucG9zaXRpb24ubG9uZ2l0dWRlO1xuXG4gICAgICAgICAgICAgICAgY3JlYXRlR3JvdXBNYXJrZXIocG9zaXRpb25Hcm91cCwgcG9zaXRpb25Hcm91cExhdCwgcG9zaXRpb25Hcm91cExuZywgcG9zaXRpb25Hcm91cC5sZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgYXNzZW1ibHlNYXJrZXJCb3VuZHMuZXh0ZW5kKG5ldyBnb29nbGUubWFwcy5MYXRMbmcocG9zaXRpb25Hcm91cExhdCwgcG9zaXRpb25Hcm91cExuZykpO1xuICAgICAgICAgICAgfSAvLyBmb3JcbiAgICAgICAgfSAvLyBpZlxuXG4gICAgICAgIGlmIChhc3NlbWJseU1hcmtlckJvdW5kcy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIFdHU1QuZ2VvLm1hcC5jYW52YXMuc2V0Q2VudGVyKG5ldyBnb29nbGUubWFwcy5MYXRMbmcoNDguNjkwODMzMzMzMywgOS4xNDA1NTU1NTU1NikpO1xuICAgICAgICAgICAgV0dTVC5nZW8ubWFwLmNhbnZhcy5zZXRab29tKDUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUGFuIHRvIG1hcmtlciBib3VuZHNcbiAgICAgICAgICAgIFdHU1QuZ2VvLm1hcC5jYW52YXMucGFuVG9Cb3VuZHMoYXNzZW1ibHlNYXJrZXJCb3VuZHMpO1xuICAgICAgICAgICAgLy8gU2V0IHRoZSBtYXAgdG8gZml0IG1hcmtlciBib3VuZHNcbiAgICAgICAgICAgIFdHU1QuZ2VvLm1hcC5jYW52YXMuZml0Qm91bmRzKGFzc2VtYmx5TWFya2VyQm91bmRzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2Qgc2VsZWN0VHJlZU5vZGVzXG4gICAgICogQHBhcmFtIHt9IGNvbGxlY3Rpb25JZFxuICAgICAqIEBwYXJhbSB7fSBzZWxlY3RlZEFzc2VtYmx5SWRzXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgc2VsZWN0VHJlZU5vZGVzID0gZnVuY3Rpb24oY29sbGVjdGlvbklkLCBzZWxlY3RlZEFzc2VtYmx5SWRzKSB7XG4gICAgICAgIHZhciBhc3NlbWJsaWVzID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllcztcblxuICAgICAgICAvLyBpZiAoc2VsZWN0ZWRBc3NlbWJseUlkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vICAgICBzZWxlY3RlZEFzc2VtYmx5SWRzID0gc2VsZWN0ZWRBc3NlbWJseUlkcy5zcGxpdCgnLCcpO1xuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgc2VsZWN0ZWRBc3NlbWJseUlkcyA9IFtdO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gVW5jaGVjayBhbGwgcmFkaW8gYnV0dG9uc1xuICAgICAgICAkKCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0IC5hc3NlbWJseS1saXN0LWl0ZW0gW3R5cGU9XCJyYWRpb1wiXScpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gQWRkL1JlbW92ZSByb3cgaGlnaGxpZ2h0XG4gICAgICAgICQuZWFjaChhc3NlbWJsaWVzLCBmdW5jdGlvbihhc3NlbWJseUlkLCBhc3NlbWJseSkge1xuICAgICAgICAgICAgaWYgKCQuaW5BcnJheShhc3NlbWJseUlkLCBzZWxlY3RlZEFzc2VtYmx5SWRzKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBTZWxlY3Qgcm93XG4gICAgICAgICAgICAgICAgJCgnLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdCAuYXNzZW1ibHktbGlzdC1pdGVtW2RhdGEtYXNzZW1ibHktaWQ9XCInICsgYXNzZW1ibHlJZCArICdcIl0nKS5hZGRDbGFzcygncm93LXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgY2hlY2tib3hcbiAgICAgICAgICAgICAgICAkKCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0IC5hc3NlbWJseS1saXN0LWl0ZW1bZGF0YS1hc3NlbWJseS1pZD1cIicgKyBhc3NlbWJseUlkICsgJ1wiXSBbdHlwZT1cImNoZWNrYm94XCJdJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBEZXNlbGVjdCByb3dcbiAgICAgICAgICAgICAgICAkKCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0IC5hc3NlbWJseS1saXN0LWl0ZW1bZGF0YS1hc3NlbWJseS1pZD1cIicgKyBhc3NlbWJseUlkICsgJ1wiXScpLnJlbW92ZUNsYXNzKCdyb3ctc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBjaGVja2JveFxuICAgICAgICAgICAgICAgICQoJy5jb2xsZWN0aW9uLWFzc2VtYmx5LWxpc3QgLmFzc2VtYmx5LWxpc3QtaXRlbVtkYXRhLWFzc2VtYmx5LWlkPVwiJyArIGFzc2VtYmx5SWQgKyAnXCJdIFt0eXBlPVwiY2hlY2tib3hcIl0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0cmlnZ2VyTWFwTWFya2Vycyhjb2xsZWN0aW9uSWQsIHNlbGVjdGVkQXNzZW1ibHlJZHMpO1xuXG4gICAgICAgIC8vIElmIG9ubHkgb25lIGFzc2VtYmx5IHdhcyBzZWxlY3RlZCB0aGVuIGNoZWNrIHJhZGlvYm94XG4gICAgICAgIGlmIChzZWxlY3RlZEFzc2VtYmx5SWRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgJCgnLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdCAuYXNzZW1ibHktbGlzdC1pdGVtW2RhdGEtYXNzZW1ibHktaWQ9XCInICsgc2VsZWN0ZWRBc3NlbWJseUlkcyArICdcIl0gW3R5cGU9XCJyYWRpb1wiXScpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIChzZWxlY3RlZEFzc2VtYmx5SWRzLnNwbGl0KCcsJykubGVuZ3RoID4gMikge1xuICAgICAgICAvLyAgICAgJCgnLnRyZWUtY29udHJvbHMtZHJhdy1zdWJ0cmVlJykuYXR0cignZGF0YS1zZWxlY3RlZC1ub2RlJywgc2VsZWN0ZWRBc3NlbWJseUlkcy5zcGxpdCgnLCcpWzBdKTtcbiAgICAgICAgLy8gfVxuICAgIH07XG5cbiAgICAvLyAkKCdib2R5Jykub24oJ21vdXNlZW50ZXInLCAnLmdseXBoaWNvbi1sZWFmJywgZnVuY3Rpb24oKXtcbiAgICAvLyAgICAgdmFyIGNvbGxlY3Rpb25JZCA9ICQodGhpcykuY2xvc2VzdCgnLndnc3QtcGFuZWwnKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKSxcbiAgICAvLyAgICAgICAgIGFzc2VtYmx5SWQgPSAkKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1saXN0LWl0ZW0nKS5hdHRyKCdkYXRhLWFzc2VtYmx5LWlkJyksXG4gICAgLy8gICAgICAgICBicmFuY2ggPSBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS50cmVlLmNhbnZhcy5icmFuY2hlc1thc3NlbWJseUlkXSxcbiAgICAvLyAgICAgICAgIGNoaWxkcmVuID0gYnJhbmNoLnBhcmVudC5jaGlsZHJlbjtcblxuICAgIC8vICAgICAkKCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0IC5hc3NlbWJseS1saXN0LWl0ZW0gLmdseXBoaWNvbi1sZWFmJykuY3NzKCdjb2xvcicsICcjMDAwJyk7XG5cbiAgICAvLyAgICAgJC5lYWNoKGNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZENvdW50ZXIsIGNoaWxkKXtcbiAgICAvLyAgICAgICAgICQoJy5jb2xsZWN0aW9uLWFzc2VtYmx5LWxpc3QgLmFzc2VtYmx5LWxpc3QtaXRlbVtkYXRhLWFzc2VtYmx5LWlkPVwiJyArIGNoaWxkLmlkICsgJ1wiXSAuZ2x5cGhpY29uLWxlYWYnKS5jc3MoJ2NvbG9yJywgJ2JsdWUnKTtcbiAgICAvLyAgICAgfSk7XG4gICAgLy8gfSk7XG4gICAgLy8gJCgnYm9keScpLm9uKCdtb3VzZWxlYXZlJywgJy5nbHlwaGljb24tbGVhZicsIGZ1bmN0aW9uKCl7XG4gICAgLy8gICAgICQoJy5jb2xsZWN0aW9uLWFzc2VtYmx5LWxpc3QgLmFzc2VtYmx5LWxpc3QtaXRlbSAuZ2x5cGhpY29uLWxlYWYnKS5jc3MoJ2NvbG9yJywgJyMwMDAnKTtcbiAgICAvLyB9KTtcblxuICAgIC8vIERFUFJFQ0FURURcbiAgICAvLyB2YXIgcmVuZGVyQ29sbGVjdGlvbkZhbWlseSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb25JZCkge1xuICAgIC8vICAgICB2YXIgdHJlZSA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWUuY2FudmFzO1xuXG5cbiAgICAvLyAgICAgdmFyIGJyYW5jaGVzID0gdHJlZS5icmFuY2hlcztcblxuICAgIC8vICAgICBjb25zb2xlLmRlYnVnKCdicmFuY2hlcycpO1xuICAgIC8vICAgICBjb25zb2xlLmRpcihicmFuY2hlcyk7XG5cbiAgICAvLyAgICAgJC5lYWNoKGJyYW5jaGVzLCBmdW5jdGlvbihicmFuY2hJZCwgYnJhbmNoKXtcblxuXG5cblxuXG4gICAgLy8gICAgICAgICB2YXIgY2hpbGRJZHMgPSBicmFuY2guZ2V0Q2hpbGRJZHMoKTtcblxuICAgIC8vICAgICAgICAgLy9jb25zb2xlLmRlYnVnKCdjaGlsZElkczonKTtcbiAgICAvLyAgICAgICAgIC8vY29uc29sZS5kaXIoY2hpbGRJZHMuc3BsaXQoJywnKSk7XG5cbiAgICAvLyAgICAgICAgIGlmIChicmFuY2gubGVhZikge1xuICAgIC8vICAgICAgICAgICAgICQoJy5jb2xsZWN0aW9uLWFzc2VtYmx5LWxpc3QgLmFzc2VtYmx5LWxpc3QtaXRlbVtkYXRhLWFzc2VtYmx5LWlkPVwiJyArIGJyYW5jaElkICsgJ1wiXSAuYXNzZW1ibHktbGlzdC1nZW5lcmF0aW9uJykuYXBwZW5kKFxuICAgIC8vICAgICAgICAgICAgICAgICAvLyc8ZGl2PiYjMTY5OyBPSzwvZGl2PidcbiAgICAvLyAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1sZWFmXCI+PC9zcGFuPidcbiAgICAvLyAgICAgICAgICAgICApO1xuICAgIC8vICAgICAgICAgfSBlbHNlIGlmIChicmFuY2hJZCA9PT0gJ3Jvb3QnKSB7XG4gICAgLy8gICAgICAgICAgICAgJCgnLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdCAuYXNzZW1ibHktbGlzdC1pdGVtW2RhdGEtYXNzZW1ibHktaWQ9XCInICsgYnJhbmNoSWQgKyAnXCJdIC5hc3NlbWJseS1saXN0LWdlbmVyYXRpb24nKS5hcHBlbmQoXG4gICAgLy8gICAgICAgICAgICAgICAgIC8vJzxkaXY+JiMxNjk7IE9LPC9kaXY+J1xuICAgIC8vICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXNcIj48L3NwYW4+J1xuICAgIC8vICAgICAgICAgICAgICk7XG4gICAgLy8gICAgICAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgICAgICAgICQuZWFjaChjaGlsZElkcy5zcGxpdCgnLCcpLCBmdW5jdGlvbihjaGlsZElkQ291bnRlciwgY2hpbGRJZCl7XG5cblxuXG4gICAgLy8gICAgICAgICAgICAgICAgICQoJy5jb2xsZWN0aW9uLWFzc2VtYmx5LWxpc3QgLmFzc2VtYmx5LWxpc3QtaXRlbVtkYXRhLWFzc2VtYmx5LWlkPVwiJyArIGNoaWxkSWQgKyAnXCJdIC5hc3NlbWJseS1saXN0LWdlbmVyYXRpb24nKS5hcHBlbmQoXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAvLyc8c3Bhbj57PC9zcGFuPidcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdHJlZS1kZWNpZHVvdXNcIj48L3NwYW4+J1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAvLyAgICAgICAgICAgICB9KTtcbiAgICAvLyAgICAgICAgIH1cblxuICAgIC8vICAgICB9KTtcbiAgICAvLyB9O1xuXG4gICAgJCgnYm9keScpLm9uKCdjaGFuZ2UnLCAnLndnc3QtdHJlZS1jb250cm9sX19jaGFuZ2Utbm9kZS1sYWJlbCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBzZWxlY3RlZE9wdGlvbiA9ICQodGhpcyksXG4gICAgICAgICAgICBjb2xsZWN0aW9uSWQgPSBzZWxlY3RlZE9wdGlvbi5jbG9zZXN0KCcud2dzdC1wYW5lbCcpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi1pZCcpLFxuICAgICAgICAgICAgY29sbGVjdGlvblRyZWVUeXBlID0gc2VsZWN0ZWRPcHRpb24uY2xvc2VzdCgnLndnc3QtcGFuZWwnKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24tdHJlZS10eXBlJyk7XG5cbiAgICAgICAgdmFyIHRyZWVDYW52YXMgPSBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS50cmVlW2NvbGxlY3Rpb25UcmVlVHlwZV0uY2FudmFzLFxuICAgICAgICAgICAgYXNzZW1ibGllcyA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLmFzc2VtYmxpZXMsXG4gICAgICAgICAgICBhc3NlbWJseUlkO1xuXG4gICAgICAgIGlmIChzZWxlY3RlZE9wdGlvbi52YWwoKSA9PT0gJzEnKSB7XG5cbiAgICAgICAgICAgIC8vIFNldCB1c2VyIGFzc2VtYmx5IGlkIGFzIG5vZGUgbGFiZWxcbiAgICAgICAgICAgIGZvciAoYXNzZW1ibHlJZCBpbiBhc3NlbWJsaWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFzc2VtYmxpZXMuaGFzT3duUHJvcGVydHkoYXNzZW1ibHlJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGxhYmVsIG9ubHkgdG8gbGVhZiBub2RlcywgZmlsdGVyaW5nIG91dCB0aGUgcm9vdCBub2RlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmVlQ2FudmFzLmJyYW5jaGVzW2Fzc2VtYmx5SWRdICYmIHRyZWVDYW52YXMuYnJhbmNoZXNbYXNzZW1ibHlJZF0ubGVhZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJlZUNhbnZhcy5icmFuY2hlc1thc3NlbWJseUlkXS5sYWJlbCA9IGFzc2VtYmxpZXNbYXNzZW1ibHlJZF0uQVNTRU1CTFlfTUVUQURBVEEudXNlckFzc2VtYmx5SWQ7ICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGVkT3B0aW9uLnZhbCgpID09PSAnMicpIHtcblxuICAgICAgICAgICAgLy8gU2V0IHVzZXIgYXNzZW1ibHkgaWQgYXMgbm9kZSBsYWJlbFxuICAgICAgICAgICAgZm9yIChhc3NlbWJseUlkIGluIGFzc2VtYmxpZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXNzZW1ibGllcy5oYXNPd25Qcm9wZXJ0eShhc3NlbWJseUlkKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgbGFiZWwgb25seSB0byBsZWFmIG5vZGVzLCBmaWx0ZXJpbmcgb3V0IHRoZSByb290IG5vZGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyZWVDYW52YXMuYnJhbmNoZXNbYXNzZW1ibHlJZF0gJiYgdHJlZUNhbnZhcy5icmFuY2hlc1thc3NlbWJseUlkXS5sZWFmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlQ2FudmFzLmJyYW5jaGVzW2Fzc2VtYmx5SWRdLmxhYmVsID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllc1thc3NlbWJseUlkXVsnRlBfQ09NUCddLnRvcFNjb3JlLnJlZmVyZW5jZUlkOyAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RlZE9wdGlvbi52YWwoKSA9PT0gJzMnKSB7XG5cbiAgICAgICAgICAgIC8vIFNldCB1c2VyIGFzc2VtYmx5IGlkIGFzIG5vZGUgbGFiZWxcbiAgICAgICAgICAgIGZvciAoYXNzZW1ibHlJZCBpbiBhc3NlbWJsaWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFzc2VtYmxpZXMuaGFzT3duUHJvcGVydHkoYXNzZW1ibHlJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGxhYmVsIG9ubHkgdG8gbGVhZiBub2RlcywgZmlsdGVyaW5nIG91dCB0aGUgcm9vdCBub2RlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmVlQ2FudmFzLmJyYW5jaGVzW2Fzc2VtYmx5SWRdICYmIHRyZWVDYW52YXMuYnJhbmNoZXNbYXNzZW1ibHlJZF0ubGVhZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJlZUNhbnZhcy5icmFuY2hlc1thc3NlbWJseUlkXS5sYWJlbCA9IChhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdWydNTFNUX1JFU1VMVCddLnN0VHlwZS5sZW5ndGggPT09IDAgPyAnTm90IGZvdW5kJzogYXNzZW1ibGllc1thc3NlbWJseUlkXVsnTUxTVF9SRVNVTFQnXS5zdFR5cGUpOyAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRPcHRpb24udmFsKCkgPT09ICc0Jykge1xuXG4gICAgICAgICAgICB2YXIgYXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZSxcbiAgICAgICAgICAgICAgICByZXNpc3RhbmNlUHJvZmlsZVN0cmluZztcblxuICAgICAgICAgICAgLy8gU2V0IHVzZXIgYXNzZW1ibHkgaWQgYXMgbm9kZSBsYWJlbFxuICAgICAgICAgICAgZm9yIChhc3NlbWJseUlkIGluIGFzc2VtYmxpZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXNzZW1ibGllcy5oYXNPd25Qcm9wZXJ0eShhc3NlbWJseUlkKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGUgPSBhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdLlBBQVJTTlBfUkVTVUxULnBhYXJSZXN1bHQucmVzaXN0YW5jZVByb2ZpbGUsXG4gICAgICAgICAgICAgICAgICAgIHJlc2lzdGFuY2VQcm9maWxlU3RyaW5nID0gY3JlYXRlQXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZVByZXZpZXdTdHJpbmcoYXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZSwgV0dTVC5hbnRpYmlvdGljcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGxhYmVsIG9ubHkgdG8gbGVhZiBub2RlcywgZmlsdGVyaW5nIG91dCB0aGUgcm9vdCBub2RlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmVlQ2FudmFzLmJyYW5jaGVzW2Fzc2VtYmx5SWRdICYmIHRyZWVDYW52YXMuYnJhbmNoZXNbYXNzZW1ibHlJZF0ubGVhZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJlZUNhbnZhcy5icmFuY2hlc1thc3NlbWJseUlkXS5sYWJlbCA9IHJlc2lzdGFuY2VQcm9maWxlU3RyaW5nOyAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRPcHRpb24udmFsKCkgPT09ICc1Jykge1xuXG4gICAgICAgICAgICAvLyBTZXQgdXNlciBhc3NlbWJseSBpZCBhcyBub2RlIGxhYmVsXG4gICAgICAgICAgICBmb3IgKGFzc2VtYmx5SWQgaW4gYXNzZW1ibGllcykge1xuICAgICAgICAgICAgICAgIGlmIChhc3NlbWJsaWVzLmhhc093blByb3BlcnR5KGFzc2VtYmx5SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBsYWJlbCBvbmx5IHRvIGxlYWYgbm9kZXMsIGZpbHRlcmluZyBvdXQgdGhlIHJvb3Qgbm9kZVxuICAgICAgICAgICAgICAgICAgICBpZiAodHJlZUNhbnZhcy5icmFuY2hlc1thc3NlbWJseUlkXSAmJiB0cmVlQ2FudmFzLmJyYW5jaGVzW2Fzc2VtYmx5SWRdLmxlYWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWVDYW52YXMuYnJhbmNoZXNbYXNzZW1ibHlJZF0ubGFiZWwgPSBhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdWydBU1NFTUJMWV9NRVRBREFUQSddLmdlb2dyYXBoeS5hZGRyZXNzOyAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0cmVlQ2FudmFzLmRyYXcoKTtcbiAgICB9KTtcblxuICAgICQoJ2JvZHknKS5vbignY2hhbmdlJywgJy53Z3N0LXRyZWUtY29udHJvbF9fY2hhbmdlLW5vZGUtY29sb3VyJywgZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHNlbGVjdGVkT3B0aW9uID0gJCh0aGlzKS5maW5kKCdvcHRpb246c2VsZWN0ZWQnKSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25JZCA9IHNlbGVjdGVkT3B0aW9uLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyksXG4gICAgICAgICAgICBjb2xsZWN0aW9uVHJlZVR5cGUgPSBzZWxlY3RlZE9wdGlvbi5jbG9zZXN0KCcud2dzdC1wYW5lbCcpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi10cmVlLXR5cGUnKTtcblxuICAgICAgICB2YXIgdHJlZSA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWVbY29sbGVjdGlvblRyZWVUeXBlXS5jYW52YXMsXG4gICAgICAgICAgICBhc3NlbWJsaWVzID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllcyxcbiAgICAgICAgICAgIGFzc2VtYmx5SWQ7XG5cbiAgICAgICAgaWYgKHNlbGVjdGVkT3B0aW9uLnZhbCgpID09PSAnMCcpIHtcbiAgICAgICAgICAgIC8vIENvbG91ciBhc3NlbWJseSBub2RlcyBhY2NvcmRpbmcgdG8gZGVmYXVsdCBjb2xvdXJcbiAgICAgICAgICAgIGZvciAoYXNzZW1ibHlJZCBpbiBhc3NlbWJsaWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFzc2VtYmxpZXMuaGFzT3duUHJvcGVydHkoYXNzZW1ibHlJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJlZS5zZXROb2RlQ29sb3VyQW5kU2hhcGUoYXNzZW1ibHlJZCwgJyNmZmZmZmYnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IC8vIGZvclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHVuZ3JvdXBlZFJlc2lzdGFuY2VQcm9maWxlLFxuICAgICAgICAgICAgICAgIGFudGliaW90aWNSZXNpc3RhbmNlO1xuXG4gICAgICAgICAgICAvLyBDb2xvdXIgYXNzZW1ibHkgbm9kZXMgYWNjb3JkaW5nIHRvIHJlc2lzdGFuY2UgcHJvZmlsZSBvZiBzZWxlY3RlZCBhbnRpYmlvdGljXG4gICAgICAgICAgICBmb3IgKGFzc2VtYmx5SWQgaW4gYXNzZW1ibGllcykge1xuICAgICAgICAgICAgICAgIGlmIChhc3NlbWJsaWVzLmhhc093blByb3BlcnR5KGFzc2VtYmx5SWQpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdW5ncm91cGVkUmVzaXN0YW5jZVByb2ZpbGUgPSBhc3NlbWJsaWVzW2Fzc2VtYmx5SWRdLlBBQVJTTlBfUkVTVUxULnBhYXJSZXN1bHQudW5ncm91cGVkUmVzaXN0YW5jZVByb2ZpbGU7XG4gICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNSZXNpc3RhbmNlID0gdW5ncm91cGVkUmVzaXN0YW5jZVByb2ZpbGVbc2VsZWN0ZWRPcHRpb24udGV4dCgpXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBhc3NlbWJseSBoYXMgcmVzaXN0YW5jZSBwcm9maWxlIGZvciB0aGlzIGFudGliaW90aWNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhbnRpYmlvdGljUmVzaXN0YW5jZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmVlLmJyYW5jaGVzW2Fzc2VtYmx5SWRdICYmIHRyZWUuYnJhbmNoZXNbYXNzZW1ibHlJZF0ubGVhZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbnRpYmlvdGljUmVzaXN0YW5jZS5yZXNpc3RhbmNlU3RhdGUgPT09ICdSRVNJU1RBTlQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmVlLnNldE5vZGVDb2xvdXJBbmRTaGFwZShhc3NlbWJseUlkLCAnI2ZmMDAwMCcpOyAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbnRpYmlvdGljUmVzaXN0YW5jZS5yZXNpc3RhbmNlU3RhdGUgPT09ICdTRU5TSVRJVkUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdyZWVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUuc2V0Tm9kZUNvbG91ckFuZFNoYXBlKGFzc2VtYmx5SWQsICcjNGRiZDMzJyk7ICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFudGliaW90aWNSZXNpc3RhbmNlLnJlc2lzdGFuY2VTdGF0ZSA9PT0gJ1VOS05PV04nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoaXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUuc2V0Tm9kZUNvbG91ckFuZFNoYXBlKGFzc2VtYmx5SWQsICcjZmZmZmZmJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBBc3NlbWJseSBoYXMgbm8gcmVzaXN0YW5jZSBwcm9maWxlIGZvciB0aGlzIGFudGliaW90aWNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmVlLmJyYW5jaGVzW2Fzc2VtYmx5SWRdICYmIHRyZWUuYnJhbmNoZXNbYXNzZW1ibHlJZF0ubGVhZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJsYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJlZS5zZXROb2RlQ29sb3VyQW5kU2hhcGUoYXNzZW1ibHlJZCwgJyNmZmZmZmYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gLy8gaWZcbiAgICAgICAgICAgIH0gLy8gZm9yXG4gICAgICAgIH0gLy8gaWZcbiAgICB9KTtcblxuICAgICQoJ2JvZHknKS5vbignY2hhbmdlJywgJy53Z3N0LXRyZWUtY29udHJvbF9fY2hhbmdlLXRyZWUtdHlwZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBzZWxlY3RlZE9wdGlvbiA9ICQodGhpcykuZmluZCgnb3B0aW9uOnNlbGVjdGVkJyksXG4gICAgICAgICAgICBjb2xsZWN0aW9uSWQgPSBzZWxlY3RlZE9wdGlvbi5jbG9zZXN0KCcud2dzdC1wYW5lbCcpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi1pZCcpLFxuICAgICAgICAgICAgY29sbGVjdGlvblRyZWVUeXBlID0gc2VsZWN0ZWRPcHRpb24uY2xvc2VzdCgnLndnc3QtcGFuZWwnKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24tdHJlZS10eXBlJyksXG4gICAgICAgICAgICB0cmVlO1xuXG4gICAgICAgIC8vIGlmICgkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1wYW5lbC1uYW1lJykgPT09ICdtZXJnZWRDb2xsZWN0aW9uVHJlZScpIHtcbiAgICAgICAgLy8gICAgIHRyZWUgPSBXR1NULm1lcmdlZENvbGxlY3Rpb25UcmVlW2NvbGxlY3Rpb25JZF0udHJlZS5jYW52YXM7XG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICB0cmVlID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZS5jYW52YXM7XG4gICAgICAgIC8vIH1cblxuICAgICAgICB0cmVlID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZVtjb2xsZWN0aW9uVHJlZVR5cGVdLmNhbnZhcztcbiAgICAgICAgdHJlZS5zZXRUcmVlVHlwZShzZWxlY3RlZE9wdGlvbi52YWwoKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgcmVuZGVyQ29sbGVjdGlvblRyZWVcbiAgICAgKiBAcGFyYW0ge30gY29sbGVjdGlvbklkXG4gICAgICogQHBhcmFtIHt9IGNvbGxlY3Rpb25UcmVlVHlwZVxuICAgICAqIEBwYXJhbSB7fSBvcHRpb25zXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgcmVuZGVyQ29sbGVjdGlvblRyZWUgPSBmdW5jdGlvbihjb2xsZWN0aW9uSWQsIGNvbGxlY3Rpb25UcmVlVHlwZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdIFJlbmRlcmluZyAnICsgY29sbGVjdGlvbklkICsgJyBjb2xsZWN0aW9uICcgKyAgY29sbGVjdGlvblRyZWVUeXBlICsgJyB0cmVlJyk7XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBDcmVhdGUgbmV3IHBhbmVsIGZyb20gdGVtcGxhdGVcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB2YXIgY29sbGVjdGlvblRyZWVQYW5lbElkID0gJ2NvbGxlY3Rpb25UcmVlJyArICdfXycgKyBjb2xsZWN0aW9uSWQgKyAnX18nICsgY29sbGVjdGlvblRyZWVUeXBlLFxuICAgICAgICAgICAgY29sbGVjdGlvblRyZWVQYW5lbFRlbXBsYXRlU291cmNlID0gJCgnLndnc3QtdGVtcGxhdGVbZGF0YS10ZW1wbGF0ZS1pZD1cImNvbGxlY3Rpb25UcmVlUGFuZWxcIl0nKS5odG1sKCksXG4gICAgICAgICAgICBjb2xsZWN0aW9uVHJlZVBhbmVsVGVtcGxhdGUgPSBIYW5kbGViYXJzLmNvbXBpbGUoY29sbGVjdGlvblRyZWVQYW5lbFRlbXBsYXRlU291cmNlKSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25UcmVlTmFtZSA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWVbY29sbGVjdGlvblRyZWVUeXBlXS5uYW1lLFxuICAgICAgICAgICAgdGVtcGxhdGVDb250ZXh0ID0ge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZVBhbmVsSWQ6IGNvbGxlY3Rpb25UcmVlUGFuZWxJZCxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVDb2xsZWN0aW9uSWQ6IGNvbGxlY3Rpb25JZCxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVDb2xsZWN0aW9uVHJlZVR5cGU6IGNvbGxlY3Rpb25UcmVlVHlwZSxcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uVHJlZVRpdGxlOiBjb2xsZWN0aW9uVHJlZU5hbWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xsZWN0aW9uVHJlZVBhbmVsSHRtbCxcbiAgICAgICAgICAgICRjb2xsZWN0aW9uVHJlZVBhbmVsO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICQuZXh0ZW5kKHRlbXBsYXRlQ29udGV4dCwgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb2xsZWN0aW9uVHJlZVBhbmVsSHRtbCA9IGNvbGxlY3Rpb25UcmVlUGFuZWxUZW1wbGF0ZSh0ZW1wbGF0ZUNvbnRleHQpLFxuXG4gICAgICAgICQoJ2JvZHknKS5wcmVwZW5kKGNvbGxlY3Rpb25UcmVlUGFuZWxIdG1sKTtcblxuICAgICAgICAkY29sbGVjdGlvblRyZWVQYW5lbCA9ICQoJy53Z3N0LXBhbmVsW2RhdGEtcGFuZWwtbmFtZT1cIicgKyBjb2xsZWN0aW9uVHJlZVBhbmVsSWQgKyAnXCJdJyk7XG5cbiAgICAgICAgLy8gUmVnaXN0ZXIgbmV3IHBhbmVsXG4gICAgICAgIFdHU1QucGFuZWxzW2NvbGxlY3Rpb25UcmVlUGFuZWxJZF0gPSBXR1NULnBhbmVscy5jb2xsZWN0aW9uVHJlZTtcbiAgICAgICAgYWN0aXZhdGVQYW5lbChjb2xsZWN0aW9uVHJlZVBhbmVsSWQpO1xuICAgICAgICAvLyBJbml0IGpRdWVyeSBVSSBkcmFnZ2FibGUgaW50ZXJhY3Rpb24gICAgICAgIFxuICAgICAgICAkY29sbGVjdGlvblRyZWVQYW5lbC5kcmFnZ2FibGUoe1xuICAgICAgICAgICAgaGFuZGxlOiAkY29sbGVjdGlvblRyZWVQYW5lbC5maW5kKCcud2dzdC1kcmFnZ2FibGUtaGFuZGxlJyksXG4gICAgICAgICAgICBhcHBlbmRUbzogXCJib2R5XCIsXG4gICAgICAgICAgICBzY3JvbGw6IGZhbHNlLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZXNjcmlwdGlvblxuICAgICAgICAgICAgICogQG1ldGhvZCBzdG9wXG4gICAgICAgICAgICAgKiBAcGFyYW0ge30gZXZlbnRcbiAgICAgICAgICAgICAqIEBwYXJhbSB7fSB1aVxuICAgICAgICAgICAgICogQHJldHVybiBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAgICAgLy8gU3RvcmUgY3VycmVudCBwYW5lbCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIHZhciBwYW5lbE5hbWUgPSB1aS5oZWxwZXIuYXR0cignZGF0YS1wYW5lbC1uYW1lJyk7XG4gICAgICAgICAgICAgICAgV0dTVC5wYW5lbHNbcGFuZWxOYW1lXS50b3AgPSB1aS5wb3NpdGlvbi50b3A7XG4gICAgICAgICAgICAgICAgV0dTVC5wYW5lbHNbcGFuZWxOYW1lXS5sZWZ0ID0gdWkucG9zaXRpb24ubGVmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGlzIFBoeWxvQ2FudmFzIGVsZW1lbnQgaGFzIHVuaXF1ZSBpZFxuICAgICAgICB2YXIgcGh5bG9DYW52YXNFbGVtZW50SWQgPSAncGh5bG9jYW52YXNfJyArIGNvbGxlY3Rpb25JZCArICdfJyArIGNvbGxlY3Rpb25UcmVlVHlwZTtcbiAgICAgICAgJGNvbGxlY3Rpb25UcmVlUGFuZWwuZmluZCgnLndnc3QtdHJlZS1jb250ZW50JykuYXR0cignaWQnLCBwaHlsb0NhbnZhc0VsZW1lbnRJZCk7XG4gICAgICAgIC8vIFNldCBjb2xsZWN0aW9uIHRyZWUgdHlwZVxuICAgICAgICAkY29sbGVjdGlvblRyZWVQYW5lbC5maW5kKCcud2dzdC10cmVlLWNvbnRlbnQnKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24tdHJlZS10eXBlJywgY29sbGVjdGlvblRyZWVUeXBlKTtcblxuICAgICAgICBlbmRQYW5lbExvYWRpbmdJbmRpY2F0b3IoY29sbGVjdGlvblRyZWVQYW5lbElkKTtcblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIFJlbmRlciBjb2xsZWN0aW9uIHRyZWVcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgIC8vIC8vIFJlbW92ZSBwcmV2aW9zbHkgcmVuZGVyZWQgY29sbGVjdGlvbiB0cmVlXG4gICAgICAgIC8vICRjb2xsZWN0aW9uVHJlZVBhbmVsLmZpbmQoJy53Z3N0LXRyZWUtY29udGVudCcpLmh0bWwoJycpO1xuICAgICAgICAvLyAvLyBBdHRhY2ggY29sbGVjdGlvbiBpZFxuICAgICAgICAvLyAkY29sbGVjdGlvblRyZWVQYW5lbC5maW5kKCcud2dzdC10cmVlLWNvbnRlbnQnKS5hdHRyKCdpZCcsICdwaHlsb2NhbnZhc18nICsgY29sbGVjdGlvbklkKTtcbiAgICAgICAgLy8gLy8gU2V0IGNvbGxlY3Rpb24gdHJlZSB0eXBlXG4gICAgICAgIC8vICRjb2xsZWN0aW9uVHJlZVBhbmVsLmZpbmQoJy53Z3N0LXRyZWUtY29udGVudCcpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi10cmVlLXR5cGUnLCAnQ09SRV9UUkVFX1JFU1VMVCcpO1xuXG4gICAgICAgIC8vIFJlbmRlciBjb2xsZWN0aW9uIHRyZWVcbiAgICAgICAgLy9yZW5kZXJDb2xsZWN0aW9uVHJlZShjb2xsZWN0aW9uSWQsICdDT1JFX1RSRUVfUkVTVUxUJyk7XG5cbiAgICAgICAgXG4gICAgICAgIC8vc2hvd1BhbmVsQm9keUNvbnRlbnQoJ2NvbGxlY3Rpb25UcmVlJyk7XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBJbml0IHRyZWVcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB2YXIgdHJlZSA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWVbY29sbGVjdGlvblRyZWVUeXBlXSxcbiAgICAgICAgICAgIGFzc2VtYmxpZXMgPSBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5hc3NlbWJsaWVzLFxuICAgICAgICAgICAgYXNzZW1ibHlJZDtcblxuICAgICAgICB0cmVlLmNhbnZhcyA9IG5ldyBQaHlsb0NhbnZhcy5UcmVlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBoeWxvQ2FudmFzRWxlbWVudElkKSwgeyBoaXN0b3J5X2NvbGxhcHNlZDogdHJ1ZSB9KTtcbiAgICAgICAgdHJlZS5jYW52YXMucGFyc2VOd2sodHJlZS5kYXRhKTtcbiAgICAgICAgdHJlZS5jYW52YXMudHJlZVR5cGUgPSAncmVjdGFuZ3VsYXInO1xuXG4gICAgICAgIHZhciB0cmVlQ2FudmFzID0gdHJlZS5jYW52YXM7XG5cbiAgICAgICAgdHJlZUNhbnZhcy5vbignc2VsZWN0ZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkTm9kZUlkcyA9IGV2ZW50Lm5vZGVJZHM7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVW5mb3J0dW5hdGVseSBzZWxlY3RlZE5vZGVJZHMgY2FuIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAqIGlmIG9ubHkgb25lIG5vZGUgaGFzIGJlZW4gc2VsZWN0ZWQuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogSW4gdGhhdCBjYXNlIGNvbnZlcnQgaXQgdG8gYXJyYXkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0ZWROb2RlSWRzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkTm9kZUlkcyA9IFtzZWxlY3RlZE5vZGVJZHNdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgIHNlbGVjdFRyZWVOb2Rlcyhjb2xsZWN0aW9uSWQsIHNlbGVjdGVkTm9kZUlkcyk7IFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTZXQgdXNlciBhc3NlbWJseSBpZCBhcyBub2RlIGxhYmVsXG4gICAgICAgIGZvciAoYXNzZW1ibHlJZCBpbiBhc3NlbWJsaWVzKSB7XG4gICAgICAgICAgICBpZiAoYXNzZW1ibGllcy5oYXNPd25Qcm9wZXJ0eShhc3NlbWJseUlkKSkge1xuICAgICAgICAgICAgICAgIC8vIFNldCBsYWJlbCBvbmx5IHRvIGxlYWYgbm9kZXMsIGZpbHRlcmluZyBvdXQgdGhlIHJvb3Qgbm9kZVxuICAgICAgICAgICAgICAgIGlmICh0cmVlQ2FudmFzLmJyYW5jaGVzW2Fzc2VtYmx5SWRdLmxlYWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJlZUNhbnZhcy5icmFuY2hlc1thc3NlbWJseUlkXS5sYWJlbCA9IGFzc2VtYmxpZXNbYXNzZW1ibHlJZF0uQVNTRU1CTFlfTUVUQURBVEEudXNlckFzc2VtYmx5SWQ7ICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gLy8gZm9yXG4gICAgICAgIFxuICAgICAgICAvLyBOZWVkIHRvIHJlc2l6ZSB0byBmaXQgaXQgY29ycmVjdGx5XG4gICAgICAgIHRyZWVDYW52YXMucmVzaXplVG9Db250YWluZXIoKTtcbiAgICAgICAgLy8gTmVlZCB0byByZWRyYXcgdG8gYWN0dWFsbHkgc2VlIGl0XG4gICAgICAgIHRyZWVDYW52YXMuZHJhd24gPSBmYWxzZTtcbiAgICAgICAgdHJlZUNhbnZhcy5kcmF3KCk7XG5cbiAgICAgICAgLy8gR2V0IG9yZGVyIG9mIG5vZGVzXG4gICAgICAgIHZhciBsZWF2ZXMgPSB0cmVlQ2FudmFzLmxlYXZlcztcbiAgICAgICAgbGVhdmVzLnNvcnQoZnVuY3Rpb24obGVhZk9uZSwgbGVhZlR3byl7XG4gICAgICAgICAgICByZXR1cm4gbGVhZk9uZS5jZW50ZXJ5IC0gbGVhZlR3by5jZW50ZXJ5O1xuICAgICAgICB9KTtcblxuICAgICAgICB0cmVlLmxlYXZlc09yZGVyID0gbGVhdmVzO1xuXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIC8vIEZvciBkZXYgb25seVxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgICAgIC8vIFJlcGxhY2UgdXNlciBhc3NlbWJseSBpZCB3aXRoIGFzc2VtYmx5IGlkXG4gICAgICAgIHZhciBuZXdpY2tTdHJpbmcgPSB0cmVlLmRhdGE7XG5cbiAgICAgICAgZm9yIChhc3NlbWJseUlkIGluIGFzc2VtYmxpZXMpIHtcbiAgICAgICAgICAgIGlmIChhc3NlbWJsaWVzLmhhc093blByb3BlcnR5KGFzc2VtYmx5SWQpKSB7XG4gICAgICAgICAgICAgICAgbmV3aWNrU3RyaW5nID0gbmV3aWNrU3RyaW5nLnJlcGxhY2UoYXNzZW1ibHlJZCwgYXNzZW1ibGllc1thc3NlbWJseUlkXS5BU1NFTUJMWV9NRVRBREFUQS51c2VyQXNzZW1ibHlJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmRlYnVnKCfCuyBbV0dTVF1bREVWXSBQYXJzZWQgTmV3aWNrIFN0cmluZzonKTtcbiAgICAgICAgY29uc29sZS5sb2coJ8K7IFVuY29tbWVudCB0byBzZWUuJyk7XG4gICAgICAgIC8vY29uc29sZS5sb2cobmV3aWNrU3RyaW5nKTtcblxuICAgICAgICBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS50cmVlW2NvbGxlY3Rpb25UcmVlVHlwZV0ubmV3aWNrU3RyaW5nV2l0aExhYmVscyA9IG5ld2lja1N0cmluZztcblxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIFxuICAgICAgICAvLyAvLyBQb3B1bGF0ZSBsaXN0IG9mIGFudGliaW90aWNzXG4gICAgICAgIC8vIHZhciBzZWxlY3RBbnRpYmlvdGljSW5wdXRFbGVtZW50ID0gJCgnI3NlbGVjdC10cmVlLW5vZGUtYW50aWJpb3RpYycpLFxuICAgICAgICAvLyAgICAgYW50aWJpb3RpY0dyb3VwTmFtZSxcbiAgICAgICAgLy8gICAgIGFudGliaW90aWNOYW1lLFxuICAgICAgICAvLyAgICAgYW50aWJpb3RpY05hbWVzID0gW10sXG4gICAgICAgIC8vICAgICBhbnRpYmlvdGljT3B0aW9uSHRtbEVsZW1lbnRzID0ge307XG4gICAgICAgIC8vICAgICAvL2FudGliaW90aWNzID0ge307XG5cbiAgICAgICAgLy8gZm9yIChhbnRpYmlvdGljR3JvdXBOYW1lIGluIFdHU1QuYW50aWJpb3RpY3MpIHtcbiAgICAgICAgLy8gICAgIGZvciAoYW50aWJpb3RpY05hbWUgaW4gV0dTVC5hbnRpYmlvdGljc1thbnRpYmlvdGljR3JvdXBOYW1lXSkge1xuICAgICAgICAvLyAgICAgICAgIC8vYW50aWJpb3RpY3NbYW50aWJpb3RpY05hbWVdID0gV0dTVC5hbnRpYmlvdGljc1thbnRpYmlvdGljR3JvdXBOYW1lXVthbnRpYmlvdGljTmFtZV07XG4gICAgICAgIC8vICAgICAgICAgYW50aWJpb3RpY05hbWVzLnB1c2goYW50aWJpb3RpY05hbWUpO1xuICAgICAgICAvLyAgICAgICAgIGFudGliaW90aWNPcHRpb25IdG1sRWxlbWVudHNbYW50aWJpb3RpY05hbWVdID0gJzxvcHRpb24gdmFsdWU9XCInICsgYW50aWJpb3RpY05hbWUucmVwbGFjZShXR1NULmFudGliaW90aWNOYW1lUmVnZXgsICdfJykudG9Mb3dlckNhc2UoKSArICdcIj4nICsgYW50aWJpb3RpY05hbWUgKyAnPC9vcHRpb24+JztcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIC8vIFNvcnQgYW50aWJpb3RpYyBuYW1lc1xuICAgICAgICAvLyBhbnRpYmlvdGljTmFtZXMuc29ydCgpO1xuXG4gICAgICAgIC8vIHZhciBhbnRpYmlvdGljQ291bnRlciA9IGFudGliaW90aWNOYW1lcy5sZW5ndGg7XG5cbiAgICAgICAgLy8gZm9yIChhbnRpYmlvdGljQ291bnRlciA9IDA7IGFudGliaW90aWNDb3VudGVyIDwgYW50aWJpb3RpY05hbWVzLmxlbmd0aDspIHtcbiAgICAgICAgLy8gICAgIGFudGliaW90aWNOYW1lID0gYW50aWJpb3RpY05hbWVzW2FudGliaW90aWNDb3VudGVyXTtcbiAgICAgICAgLy8gICAgIHNlbGVjdEFudGliaW90aWNJbnB1dEVsZW1lbnQuYXBwZW5kKCQoYW50aWJpb3RpY09wdGlvbkh0bWxFbGVtZW50c1thbnRpYmlvdGljTmFtZV0pKTtcbiAgICAgICAgICAgIFxuICAgICAgICAvLyAgICAgYW50aWJpb3RpY0NvdW50ZXIgPSBhbnRpYmlvdGljQ291bnRlciArIDE7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBwb3B1bGF0ZUxpc3RPZkFudGliaW90aWNzKCRjb2xsZWN0aW9uVHJlZVBhbmVsLmZpbmQoJy53Z3N0LXRyZWUtY29udHJvbF9fY2hhbmdlLW5vZGUtY29sb3VyJykpO1xuXG4gICAgICAgIC8vIE5lZWQgdG8gcmVzaXplIHRvIGZpdCBpdCBjb3JyZWN0bHlcbiAgICAgICAgdHJlZUNhbnZhcy5yZXNpemVUb0NvbnRhaW5lcigpO1xuICAgICAgICAvLyBOZWVkIHRvIHJlZHJhdyB0byBhY3R1YWxseSBzZWUgaXRcbiAgICAgICAgdHJlZUNhbnZhcy5kcmF3biA9IGZhbHNlO1xuICAgICAgICB0cmVlQ2FudmFzLmRyYXcoKTtcbiAgICB9O1xuXG4gICAgLy8gSW5pdCBtYXBcbiAgICBXR1NULmdlby5tYXAuaW5pdCgpO1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGRlc2VsZWN0QWxsVHJlZU5vZGVzXG4gICAgICogQHBhcmFtIHt9IGNvbGxlY3Rpb25JZFxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGRlc2VsZWN0QWxsVHJlZU5vZGVzID0gZnVuY3Rpb24oY29sbGVjdGlvbklkKSB7XG4gICAgICAgIHZhciB0cmVlID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZVsnQ09SRV9UUkVFX1JFU1VMVCddLmNhbnZhcztcblxuICAgICAgICAvLyBXb3JrYXJvdW5kXG4gICAgICAgIC8vIFRPIERPOiBSZWZhY3RvciB1c2luZyBvZmZpY2lhbCBBUElcbiAgICAgICAgdHJlZS5zZWxlY3ROb2RlcygnJyk7XG4gICAgfTtcblxuICAgICQoJy50cmVlLWNvbnRyb2xzLXNlbGVjdC1ub25lJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGNvbGxlY3Rpb25JZCA9ICQodGhpcykuY2xvc2VzdCgnLndnc3QtcGFuZWwnKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKTtcbiAgICAgICAgICAgIC8vdHJlZSA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWUuY2FudmFzO1xuXG4gICAgICAgIGRlc2VsZWN0QWxsVHJlZU5vZGVzKGNvbGxlY3Rpb25JZCk7XG5cbiAgICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmRcbiAgICAgICAgLy8gVE8gRE86IFJlZmFjdG9yIHVzaW5nIG9mZmljaWFsIEFQSVxuICAgICAgICAvL3RyZWUuc2VsZWN0Tm9kZXMoJycpO1xuXG4gICAgICAgIC8vc2hvd1JlcHJlc2VudGF0aXZlVHJlZU5vZGVzT25NYXAoJycpO1xuICAgIH0pO1xuXG4gICAgJCgnLnRyZWUtY29udHJvbHMtc2VsZWN0LWFsbCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBjb2xsZWN0aW9uSWQgPSAkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyksXG4gICAgICAgICAgICB0cmVlID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZVsnQ09SRV9UUkVFX1JFU1VMVCddLmNhbnZhcztcbiAgICAgICAgXG4gICAgICAgIC8vY29uc29sZS5kZWJ1ZyhXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXSk7XG4gICAgICAgIC8vY29uc29sZS5kZWJ1Zyh0cmVlKTtcblxuICAgICAgICAvLyBHZXQgYWxsIGFzc2VtYmx5IGlkcyBpbiB0aGlzIHRyZWVcblxuICAgICAgICB2YXIgbGVhdmVzID0gdHJlZS5sZWF2ZXMsXG4gICAgICAgICAgICBsZWFmQ291bnRlciA9IGxlYXZlcy5sZW5ndGgsXG4gICAgICAgICAgICBhc3NlbWJseUlkcyA9IFtdLFxuICAgICAgICAgICAgYXNzZW1ibHlJZDtcblxuICAgICAgICAvLyBDb25jYXRlbmF0ZSBhbGwgYXNzZW1ibHkgaWRzIGludG8gb25lIHN0cmluZ1xuICAgICAgICBmb3IgKDsgbGVhZkNvdW50ZXIgIT09IDA7KSB7XG4gICAgICAgICAgICBsZWFmQ291bnRlciA9IGxlYWZDb3VudGVyIC0gMTtcblxuICAgICAgICAgICAgYXNzZW1ibHlJZCA9IGxlYXZlc1tsZWFmQ291bnRlcl0uaWQ7XG4gICAgICAgICAgICBhc3NlbWJseUlkcy5wdXNoKGFzc2VtYmx5SWQpO1xuXG4gICAgICAgICAgICAvLyBpZiAoYXNzZW1ibHlJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gICAgIGFzc2VtYmx5SWRzID0gYXNzZW1ibHlJZHMgKyAnLCcgKyBsZWF2ZXNbbGVhZkNvdW50ZXJdLmlkO1xuICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgIC8vICAgICBhc3NlbWJseUlkcyA9IGxlYXZlc1tsZWFmQ291bnRlcl0uaWQ7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIGlzIGEgd29ya2Fyb3VuZFxuICAgICAgICAvLyBUTyBETzogUmVmYWN0b3IgdXNpbmcgb2ZmaWNpYWwgQVBJXG4gICAgICAgIHRyZWUucm9vdC5zZXRTZWxlY3RlZCh0cnVlLCB0cnVlKTtcbiAgICAgICAgdHJlZS5kcmF3KCk7XG5cbiAgICAgICAgLy9zaG93UmVwcmVzZW50YXRpdmVUcmVlTm9kZXNPbk1hcChub2RlSWRzKTtcblxuICAgICAgICBzaG93Q29sbGVjdGlvbk1ldGFkYXRhT25NYXAoY29sbGVjdGlvbklkLCBhc3NlbWJseUlkcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2Qgc2hvd0NvbGxlY3Rpb25NZXRhZGF0YU9uTWFwXG4gICAgICogQHBhcmFtIHt9IGNvbGxlY3Rpb25JZFxuICAgICAqIEBwYXJhbSB7fSBhc3NlbWJseUlkc1xuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIHNob3dDb2xsZWN0aW9uTWV0YWRhdGFPbk1hcCA9IGZ1bmN0aW9uKGNvbGxlY3Rpb25JZCwgYXNzZW1ibHlJZHMpIHtcblxuICAgICAgICBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5nZW8gPSBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5nZW8gfHwge307XG5cbiAgICAgICAgdmFyIGNvbGxlY3Rpb25UcmVlID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZS5jYW52YXMsXG4gICAgICAgICAgICBleGlzdGluZ01hcmtlcnMgPSBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5nZW8ubWFya2VycyxcbiAgICAgICAgICAgIGV4aXN0aW5nTWFya2VyQ291bnRlciA9IGV4aXN0aW5nTWFya2Vycy5sZW5ndGg7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIG1hcmtlcnNcbiAgICAgICAgZm9yICg7IGV4aXN0aW5nTWFya2VyQ291bnRlciAhPT0gMDspIHtcbiAgICAgICAgICAgIGV4aXN0aW5nTWFya2VyQ291bnRlciA9IGV4aXN0aW5nTWFya2VyQ291bnRlciAtIDE7XG4gICAgICAgICAgICAvLyBSZW1vdmUgbWFya2VyXG4gICAgICAgICAgICBleGlzdGluZ01hcmtlcnNbZXhpc3RpbmdNYXJrZXJDb3VudGVyXS5zZXRNYXAobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uZ2VvLm1hcmtlcnMgPSBbXTtcblxuICAgICAgICAvLyBSZXNldCBtYXJrZXIgYm91bmRzXG4gICAgICAgIFdHU1QuZ2VvLm1hcC5tYXJrZXJCb3VuZHMgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzKCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBtYXJrZXJzXG4gICAgICAgIGlmIChhc3NlbWJseUlkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgYXNzZW1ibHlDb3VudGVyID0gYXNzZW1ibHlJZHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGFzc2VtYmx5SWQgPSAnJyxcbiAgICAgICAgICAgICAgICBhc3NlbWJseU1ldGFkYXRhID0ge30sXG4gICAgICAgICAgICAgICAgbGF0aXR1ZGUgPSB7fSxcbiAgICAgICAgICAgICAgICBsb25naXR1ZGUgPSB7fTtcblxuICAgICAgICAgICAgLy8gRm9yIGVhY2ggYXNzZW1ibHkgY3JlYXRlIG1hcmtlclxuICAgICAgICAgICAgZm9yICg7IGFzc2VtYmx5Q291bnRlciAhPT0gMDspIHtcbiAgICAgICAgICAgICAgICBhc3NlbWJseUNvdW50ZXIgPSBhc3NlbWJseUNvdW50ZXIgLSAxO1xuXG4gICAgICAgICAgICAgICAgYXNzZW1ibHlJZCA9IGFzc2VtYmx5SWRzW2Fzc2VtYmx5Q291bnRlcl07XG4gICAgICAgICAgICAgICAgYXNzZW1ibHlNZXRhZGF0YSA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLmFzc2VtYmxpZXNbYXNzZW1ibHlJZF1bJ0FTU0VNQkxZX01FVEFEQVRBJ107XG4gICAgICAgICAgICAgICAgbGF0aXR1ZGUgPSBhc3NlbWJseU1ldGFkYXRhLmdlb2dyYXBoeS5wb3NpdGlvbi5sYXRpdHVkZTtcbiAgICAgICAgICAgICAgICBsb25naXR1ZGUgPSBhc3NlbWJseU1ldGFkYXRhLmdlb2dyYXBoeS5wb3NpdGlvbi5sb25naXR1ZGU7XG5cbiAgICAgICAgICAgICAgICAvL0NoZWNrIGlmIGJvdGggbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBwcm92aWRlZFxuICAgICAgICAgICAgICAgIGlmIChsYXRpdHVkZSAmJiBsb25naXR1ZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbV0dTVF0gTWFya2VyJ3MgbGF0aXR1ZGU6IFwiICsgbGF0aXR1ZGUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXR1NUXSBNYXJrZXIncyBsb25naXR1ZGU6IFwiICsgbG9uZ2l0dWRlKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsYXRpdHVkZSwgbG9uZ2l0dWRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogV0dTVC5nZW8ubWFwLmNhbnZhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcGZpbGVzL21zL2ljb25zL2JsdWUtZG90LnBuZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIG11c3QgYmUgb3B0aW1pemVkLCBvdGhlcndpc2Ugd2hpdGUgcmVjdGFuZ2xlcyB3aWxsIGJlIGRpc3BsYXllZCB3aGVuIG1hcCBpcyBtYW5pcHVsYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgdGhlcmUgaXMgYSBrbm93biBjYXNlIHdoZW4gdGhpcyBzaG91bGQgYmUgZmFsc2U6IGh0dHA6Ly93d3cuZ3V0ZW5zaXRlLmNvbS9Hb29nbGUtTWFwcy1DdXN0b20tTWFya2Vycy1DdXQtT2ZmLUJ5LUNhbnZhcy1UaWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW1pemVkOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBtYXJrZXJcbiAgICAgICAgICAgICAgICAgICAgV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllc1thc3NlbWJseUlkXS5nZW8gPSBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5hc3NlbWJsaWVzW2Fzc2VtYmx5SWRdLmdlbyB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllc1thc3NlbWJseUlkXS5nZW8ubWFya2VyID0gbWFya2VyO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIGxpc3Qgb2YgYXNzZW1ibHkgaWRzIHdpdGggbWFya2Vyc1xuICAgICAgICAgICAgICAgICAgICBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5nZW8ubWFya2Vycy5wdXNoKGFzc2VtYmx5SWRzKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4dGVuZCBtYXJrZXJCb3VuZHMgd2l0aCBlYWNoIG1ldGFkYXRhIG1hcmtlclxuICAgICAgICAgICAgICAgICAgICBXR1NULmdlby5tYXAubWFya2VyQm91bmRzLmV4dGVuZChtYXJrZXIuZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgICAgICAgICAgfSAvLyBpZlxuICAgICAgICAgICAgfSAvLyBmb3JcbiAgICAgICAgfSBlbHNlIHsgLy8gTm8gYXNzZW1ibGllcyB3ZXJlIHNlbGVjdGVkXG4gICAgICAgICAgICAvLyBTaG93IEV1cm9wZVxuICAgICAgICAgICAgV0dTVC5nZW8ubWFwLmNhbnZhcy5wYW5UbyhuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKDQ4LjY5MDgzMzMzMzMsIDkuMTQwNTU1NTU1NTYpKTtcbiAgICAgICAgICAgIFdHU1QuZ2VvLm1hcC5jYW52YXMuc2V0Wm9vbSg1KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFdHU0EgUmluZ1xuICAgIC8vIFRvIGRvOiBhZGQgV0dTQSBuYW1lc3BhY2VcbiAgICAvLyBUbyBkbzogcmVuYW1lIFdHU1QgdG8gV0dTQVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdmFyIHJpbmdUaW1lb3V0LFxuICAgICAgICAvLyBBcmUgeW91IGRyYWdnaW5nIGl0P1xuICAgICAgICByaW5nRHJhZ2dpbmcgPSBmYWxzZSxcbiAgICAgICAgLy8gSGF2ZSB5b3UgY2xpY2tlZCBvbiBpdD9cbiAgICAgICAgcmluZ0ZpeGVkID0gZmFsc2U7XG5cbiAgICAoZnVuY3Rpb24oKXtcblxuICAgICAgICAvLyBJbml0IGpRdWVyeSBVSSBkcmFnZ2FibGUgaW50ZXJhY3Rpb25cbiAgICAgICAgJCgnW2RhdGEtd2dzdC1qcz1cInJpbmdcIl0nKS5kcmFnZ2FibGUoe1xuICAgICAgICAgICAgLy9oYW5kbGU6ICcud2dzdC1yaW5nJyxcbiAgICAgICAgICAgIGFwcGVuZFRvOiAnYm9keScsXG4gICAgICAgICAgICBzY3JvbGw6IGZhbHNlLFxuICAgICAgICAgICAgY29udGFpbm1lbnQ6IFwid2luZG93XCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnLndnc3QtcmluZy1jb250ZW50Jykub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZiAocmluZ0RyYWdnaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJpbmdUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJpbmdUaW1lb3V0ICE9PSAndW5kZWZpbmVkJyAmJiByaW5nRHJhZ2dpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByaW5nVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy53Z3N0LXBhbmVsLS12aXNpYmxlJykuZmFkZU91dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICQoJy53Z3N0LXJpbmctY29udGVudCcpLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZiAocmluZ0RyYWdnaW5nID09PSBmYWxzZSAmJiByaW5nRml4ZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmluZ1RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgJCgnLndnc3QtcGFuZWwtLXZpc2libGUnKS5mYWRlSW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICQoJ1tkYXRhLXdnc3QtanM9XCJyaW5nXCJdJykub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbW91c2UgZG93bicpO1xuICAgICAgICAgICAgcmluZ1RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByaW5nRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHJpbmdGaXhlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAkKCcud2dzdC1yaW5nLWNvbnRlbnQnKS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAnIzk5OScpOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICQoJ1tkYXRhLXdnc3QtanM9XCJyaW5nXCJdJykub24oJ21vdXNldXAnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ21vdXNlIHVwJyk7XG4gICAgICAgICAgICByaW5nVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJpbmdEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHJpbmdGaXhlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAkKCcud2dzdC1yaW5nLWNvbnRlbnQnKS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAnJyk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJCgnLndnc3QtcmluZy1jb250ZW50Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyaW5nIGNsaWNrJyk7XG4gICAgICAgICAgICBpZiAocmluZ0ZpeGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJpbmdGaXhlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnd2dzdC1yaW5nLWZpeGVkJyk7XG4gICAgICAgICAgICAgICAgJCgnLndnc3QtcGFuZWwtLXZpc2libGUnKS5mYWRlT3V0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJpbmdGaXhlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3dnc3QtcmluZy1maXhlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJCgnLndnc3QtcmluZy1jb250ZW50Jykub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdtb3VzZSBkb3duJyk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSk7ICAgICAgICBcbiAgICB9KCkpO1xuXG5cblxuXG5cblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBnZW5lcmF0ZVllYXJIdG1sRWxlbWVudHNcbiAgICAgKiBAcGFyYW0ge30gc3RhcnRZZWFyXG4gICAgICogQHBhcmFtIHt9IGVuZFllYXJcbiAgICAgKiBAcmV0dXJuIHllYXJFbGVtZW50c1xuICAgICAqL1xuICAgIHZhciBnZW5lcmF0ZVllYXJIdG1sRWxlbWVudHMgPSBmdW5jdGlvbihzdGFydFllYXIsIGVuZFllYXIpIHtcbiAgICAgICAgdmFyIHllYXJDb3VudGVyID0gZW5kWWVhcixcbiAgICAgICAgICAgIHllYXJFbGVtZW50VGVtcGxhdGUgPSAnPG9wdGlvbiB2YWx1ZT1cInt7eWVhcn19XCI+e3t5ZWFyfX08L29wdGlvbj4nLFxuICAgICAgICAgICAgeWVhckVsZW1lbnRzID0gJycsXG4gICAgICAgICAgICB5ZWFyRWxlbWVudDtcblxuICAgICAgICBmb3IgKDsgeWVhckNvdW50ZXIgIT09IHN0YXJ0WWVhciAtIDE7KSB7XG4gICAgICAgICAgICB5ZWFyRWxlbWVudCA9IHllYXJFbGVtZW50VGVtcGxhdGUucmVwbGFjZSgve3t5ZWFyfX0vZywgeWVhckNvdW50ZXIpO1xuICAgICAgICAgICAgeWVhckVsZW1lbnRzID0geWVhckVsZW1lbnRzICsgeWVhckVsZW1lbnQ7XG4gICAgICAgICAgICB5ZWFyQ291bnRlciA9IHllYXJDb3VudGVyIC0gMTtcbiAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICByZXR1cm4geWVhckVsZW1lbnRzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgZ2VuZXJhdGVNb250aEh0bWxFbGVtZW50c1xuICAgICAqIEByZXR1cm4gbW9udGhFbGVtZW50c1xuICAgICAqL1xuICAgIHZhciBnZW5lcmF0ZU1vbnRoSHRtbEVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtb250aENvdW50ZXIgPSAwLFxuICAgICAgICAgICAgbGlzdE9mTW9udGhzID0gWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ10sXG4gICAgICAgICAgICBtb250aEVsZW1lbnRUZW1wbGF0ZSA9ICc8b3B0aW9uIHZhbHVlPVwie3ttb250aENvdW50ZXJ9fVwiPnt7bW9udGh9fTwvb3B0aW9uPicsXG4gICAgICAgICAgICBtb250aEVsZW1lbnRzID0gJycsXG4gICAgICAgICAgICBtb250aEVsZW1lbnQ7XG5cbiAgICAgICAgZm9yICg7IG1vbnRoQ291bnRlciA8IGxpc3RPZk1vbnRocy5sZW5ndGg7KSB7XG4gICAgICAgICAgICBtb250aEVsZW1lbnQgPSBtb250aEVsZW1lbnRUZW1wbGF0ZS5yZXBsYWNlKC97e21vbnRofX0vZywgbGlzdE9mTW9udGhzW21vbnRoQ291bnRlcl0pO1xuICAgICAgICAgICAgbW9udGhFbGVtZW50ID0gbW9udGhFbGVtZW50LnJlcGxhY2UoL3t7bW9udGhDb3VudGVyfX0vZywgbW9udGhDb3VudGVyKTtcbiAgICAgICAgICAgIG1vbnRoRWxlbWVudHMgPSBtb250aEVsZW1lbnRzICsgbW9udGhFbGVtZW50O1xuICAgICAgICAgICAgbW9udGhDb3VudGVyID0gbW9udGhDb3VudGVyICsgMTtcbiAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICByZXR1cm4gbW9udGhFbGVtZW50cztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGdlbmVyYXRlRGF5SHRtbEVsZW1lbnRzXG4gICAgICogQHBhcmFtIHt9IHllYXJcbiAgICAgKiBAcGFyYW0ge30gbW9udGhcbiAgICAgKiBAcmV0dXJuIGRheUVsZW1lbnRzXG4gICAgICovXG4gICAgdmFyIGdlbmVyYXRlRGF5SHRtbEVsZW1lbnRzID0gZnVuY3Rpb24oeWVhciwgbW9udGgpIHtcblxuICAgICAgICBpZiAodHlwZW9mIHllYXIgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBtb250aCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3RhbE51bWJlck9mRGF5cyA9IGdldFRvdGFsTnVtYmVyT2ZEYXlzSW5Nb250aCh5ZWFyLCBtb250aCksXG4gICAgICAgICAgICBkYXlDb3VudGVyID0gMCxcbiAgICAgICAgICAgIGRheUVsZW1lbnRUZW1wbGF0ZSA9ICc8b3B0aW9uIHZhbHVlPVwie3tkYXl9fVwiPnt7ZGF5fX08L29wdGlvbj4nLFxuICAgICAgICAgICAgZGF5RWxlbWVudHMgPSAnJyxcbiAgICAgICAgICAgIGRheUVsZW1lbnQ7XG5cbiAgICAgICAgd2hpbGUgKGRheUNvdW50ZXIgPCB0b3RhbE51bWJlck9mRGF5cykge1xuICAgICAgICAgICAgZGF5Q291bnRlciA9IGRheUNvdW50ZXIgKyAxO1xuICAgICAgICAgICAgZGF5RWxlbWVudCA9IGRheUVsZW1lbnRUZW1wbGF0ZS5yZXBsYWNlKC97e2RheX19L2csIGRheUNvdW50ZXIpO1xuICAgICAgICAgICAgZGF5RWxlbWVudHMgPSBkYXlFbGVtZW50cyArIGRheUVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF5RWxlbWVudHM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBnZXRUb3RhbE51bWJlck9mRGF5c0luTW9udGhcbiAgICAgKiBAcGFyYW0ge30geWVhclxuICAgICAqIEBwYXJhbSB7fSBtb250aFxuICAgICAqIEByZXR1cm4gQmluYXJ5RXhwcmVzc2lvblxuICAgICAqL1xuICAgIHZhciBnZXRUb3RhbE51bWJlck9mRGF5c0luTW9udGggPSBmdW5jdGlvbih5ZWFyLCBtb250aCkge1xuICAgICAgICAvLyBodHRwOi8vd3d3LmR6b25lLmNvbS9zbmlwcGV0cy9kZXRlcm1pbmluZy1udW1iZXItZGF5cy1tb250aFxuICAgICAgICByZXR1cm4gMzIgLSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMzIpLmdldERhdGUoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIHBvcHVsYXRlRGF5U2VsZWN0XG4gICAgICogQHBhcmFtIHt9ICRzZWxlY3RFbGVtZW50XG4gICAgICogQHBhcmFtIHt9IHNlbGVjdGVkWWVhclxuICAgICAqIEBwYXJhbSB7fSBzZWxlY3RlZE1vbnRoXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgcG9wdWxhdGVEYXlTZWxlY3QgPSBmdW5jdGlvbigkc2VsZWN0RWxlbWVudCwgc2VsZWN0ZWRZZWFyLCBzZWxlY3RlZE1vbnRoKSB7XG4gICAgICAgIC8vIFJlbW92ZSBwcmV2aW91cyBsaXN0IG9mIGRheXMgYW5kIGFwcGVuZCBhIG5ldyBvbmVcbiAgICAgICAgJHNlbGVjdEVsZW1lbnQuaHRtbCgnJylcbiAgICAgICAgICAgIC5hcHBlbmQoJCgnPG9wdGlvbiB2YWx1ZT1cIi0xXCI+Q2hvb3NlIGRheTwvb3B0aW9uPicpKVxuICAgICAgICAgICAgLmFwcGVuZChnZW5lcmF0ZURheUh0bWxFbGVtZW50cyhzZWxlY3RlZFllYXIsIHNlbGVjdGVkTW9udGgpKTtcbiAgICB9O1xuXG4gICAgJCgnLmFzc2VtYmx5LW1ldGFkYXRhLWxpc3QtY29udGFpbmVyJykub24oJ2NoYW5nZScsICcuYXNzZW1ibHktdGltZXN0YW1wLWlucHV0JywgZnVuY3Rpb24oKXtcblxuICAgICAgICB2YXIgJHNlbGVjdCA9ICQodGhpcyksXG4gICAgICAgICAgICBmaWxlSWQgPSAkc2VsZWN0LmF0dHIoJ2RhdGEtZmlsZS1pZCcpLFxuICAgICAgICAgICAgZmlsZU5hbWUgPSAkc2VsZWN0LmF0dHIoJ2RhdGEtZmlsZS1uYW1lJyksXG4gICAgICAgICAgICBzZWxlY3RlZFllYXIgPSAkKCcuYXNzZW1ibHktdGltZXN0YW1wLWlucHV0LXllYXJbZGF0YS1maWxlLW5hbWU9XCInICsgZmlsZU5hbWUgKydcIl0nKS52YWwoKSxcbiAgICAgICAgICAgIHNlbGVjdGVkTW9udGggPSAkKCcuYXNzZW1ibHktdGltZXN0YW1wLWlucHV0LW1vbnRoW2RhdGEtZmlsZS1uYW1lPVwiJyArIGZpbGVOYW1lICsnXCJdJykudmFsKCksXG4gICAgICAgICAgICAkdGltZXN0YW1wRGF5U2VsZWN0ID0gJCgnLmFzc2VtYmx5LXRpbWVzdGFtcC1pbnB1dC1kYXlbZGF0YS1maWxlLW5hbWU9XCInICsgZmlsZU5hbWUgKydcIl0nKSxcbiAgICAgICAgICAgIHNlbGVjdGVkRGF5ID0gJHRpbWVzdGFtcERheVNlbGVjdC52YWwoKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcFBhcnQgPSAkc2VsZWN0LmF0dHIoJ2RhdGEtdGltZXN0YW1wLWlucHV0Jyk7XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBDcmVhdGUgbGlzdCBvZiBkYXlzXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgaWYgKHRpbWVzdGFtcFBhcnQgPT09ICd5ZWFyJyB8fCB0aW1lc3RhbXBQYXJ0ID09PSAnbW9udGgnKSB7XG4gICAgICAgICAgICAvLyBJZiB5ZWFyIGFuZCBtb250aCBzZWxlY3RlZCB0aGVuIHBvcHVsYXRlIGRheXMgc2VsZWN0XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRZZWFyICE9PSAnLTEnICYmIHNlbGVjdGVkTW9udGggIT09ICctMScpIHtcbiAgICAgICAgICAgICAgICBwb3B1bGF0ZURheVNlbGVjdCgkdGltZXN0YW1wRGF5U2VsZWN0LCBzZWxlY3RlZFllYXIsIHNlbGVjdGVkTW9udGgpO1xuICAgICAgICAgICAgICAgIC8vIFNlbGVjdCB0aGUgc2FtZSBkYXkgYXMgcHJldmlvdXNseSBpZiBuZXdseSBzZWxlY3RlZCB5ZWFyL21vbnRoIGNvbWJpbmF0aW9uIGhhcyB0aGlzIGRheVxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZERheSAhPT0gJy0xJykge1xuICAgICAgICAgICAgICAgICAgICAkdGltZXN0YW1wRGF5U2VsZWN0LmZpbmQoJ29wdGlvbjpjb250YWlucyhcIicgKyBzZWxlY3RlZERheSArICdcIiknKS5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBpZlxuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gU2hvdyBuZXh0IGlucHV0IG9mIGRhdGUgbWV0YWRhdGFcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBpZiAodGltZXN0YW1wUGFydCA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICAkKCcuYXNzZW1ibHktbWV0YWRhdGEtdGltZXN0YW1wLW1vbnRoW2RhdGEtZmlsZS1pZD1cIicgKyBmaWxlSWQgKyAnXCJdJykucmVtb3ZlQ2xhc3MoJ2hpZGUtdGhpcycpO1xuICAgICAgICB9IGVsc2UgaWYgKHRpbWVzdGFtcFBhcnQgPT09ICdtb250aCcpIHtcbiAgICAgICAgICAgICQoJy5hc3NlbWJseS1tZXRhZGF0YS10aW1lc3RhbXAtZGF5W2RhdGEtZmlsZS1pZD1cIicgKyBmaWxlSWQgKyAnXCJdJykucmVtb3ZlQ2xhc3MoJ2hpZGUtdGhpcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBTdG9yZSBkYXRlIGluIGFzc2VtYmx5IG1ldGFkYXRhIG9iamVjdFxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHZhciBkYXRlO1xuXG4gICAgICAgIC8vIElmIGF0IGxlYXN0IHllYXIgaXMgcHJvdmlkZWQgdGhlbiBzZXQgbWV0YWRhdGEgZGF0ZXRpbWVcbiAgICAgICAgaWYgKHNlbGVjdGVkWWVhciAhPT0gJy0xJykge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgbW9udGggaXMgcHJvdmlkZWRcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZE1vbnRoICE9PSAnLTEnKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZGF5IGlzIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRGF5ICE9PSAnLTEnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShzZWxlY3RlZFllYXIsIHNlbGVjdGVkTW9udGgsIHNlbGVjdGVkRGF5KTtcblxuICAgICAgICAgICAgICAgIC8vIE5vIGRheSBpcyBwcm92aWRlZFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShzZWxlY3RlZFllYXIsIHNlbGVjdGVkTW9udGgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTm8gbW9udGggaXMgcHJvdmlkZWRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHNlbGVjdGVkWWVhcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFdHU1QudXBsb2FkLmFzc2VtYmx5W2ZpbGVOYW1lXS5tZXRhZGF0YSA9IFdHU1QudXBsb2FkLmFzc2VtYmx5W2ZpbGVOYW1lXS5tZXRhZGF0YSB8fCB7fTtcbiAgICAgICAgICAgIFdHU1QudXBsb2FkLmFzc2VtYmx5W2ZpbGVOYW1lXS5tZXRhZGF0YS5kYXRldGltZSA9IGRhdGU7IFxuICAgICAgICB9IC8vIGlmXG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIFNob3cgbmV4dCBhc3NlbWJseSBtZXRhZGF0YSBibG9jayBpZiBhdCBsZWFzdCB5ZWFyIGlzIHByb3ZpZGVkXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBpZiAoc2VsZWN0ZWRZZWFyICE9PSAnLTEnKSB7XG4gICAgICAgICAgICAvLyBTaG93IG5leHQgbWV0YWRhdGEgZm9ybSBibG9ja1xuICAgICAgICAgICAgJHNlbGVjdC5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEtYmxvY2snKS5uZXh0KCcuYXNzZW1ibHktbWV0YWRhdGEtYmxvY2snKS5mYWRlSW4oKTtcbiAgICAgICAgICAgIC8vIFNjcm9sbCB0byB0aGUgbmV4dCBmb3JtIGJsb2NrXG4gICAgICAgICAgICAkc2VsZWN0LmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YS1ibG9jaycpLmFuaW1hdGUoe3Njcm9sbFRvcDogJHNlbGVjdC5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEtYmxvY2snKS5oZWlnaHQoKX0sIDQwMCk7XG5cbiAgICAgICAgICAgIHVwZGF0ZU1ldGFkYXRhUHJvZ3Jlc3NCYXIoKTtcbiAgICAgICAgfSAvLyBpZlxuICAgIH0pO1xuXG5cblxuXG5cblxuICAgICAgICAvLyBBcnJheSBvZiBvYmplY3RzIHRoYXQgc3RvcmUgY29udGVudCBvZiBGQVNUQSBmaWxlIGFuZCB1c2VyLXByb3ZpZGVkIG1ldGFkYXRhXG4gICAgdmFyIGZhc3RhRmlsZXNBbmRNZXRhZGF0YSA9IHt9LFxuICAgICAgICAvLyBTdG9yZXMgZmlsZSBuYW1lIG9mIGRpc3BsYXllZCBGQVNUQSBmaWxlXG4gICAgICAgIHNlbGVjdGVkRmFzdGFGaWxlTmFtZSA9ICcnLFxuICAgICAgICAvLyBFbGVtZW50IG9uIHdoaWNoIHVzZXIgY2FuIGRyYWcgYW5kIGRyb3AgZmlsZXNcbiAgICAgICAgZHJvcFpvbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLFxuICAgICAgICAvLyBTdG9yZSBpbmRpdmlkdWFsIGFzc2VtYmx5IG9iamVjdHMgdXNlZCBmb3IgZGlzcGxheWluZyBkYXRhXG4gICAgICAgIGFzc2VtYmxpZXMgPSBbXSxcbiAgICAgICAgLy8gRE5BIHNlcXVlbmNlIHJlZ2V4XG4gICAgICAgIGRuYVNlcXVlbmNlUmVnZXggPSAvXltDVEFHTlVYXSskL2ksXG4gICAgICAgIC8vIENvdW50IHRvdGFsIG51bWJlciBvZiBjb250aWdzIGluIGFsbCBzZWxlY3RlZCBhc3NlbWJsaWVzXG4gICAgICAgIHRvdGFsQ29udGlnc1N1bSA9IDA7XG5cbiAgICAvLyBSZWZhY3RvciB0byBmYXN0YWpzLnBhcnNlKClcbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgcGFyc2VGYXN0YUZpbGVcbiAgICAgKiBAcGFyYW0ge30gZVxuICAgICAqIEBwYXJhbSB7fSBmaWxlQ291bnRlclxuICAgICAqIEBwYXJhbSB7fSBmaWxlXG4gICAgICogQHBhcmFtIHt9IGRyb3BwZWRGaWxlc1xuICAgICAqIEBwYXJhbSB7fSBjb2xsZWN0aW9uSWRcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBwYXJzZUZhc3RhRmlsZSA9IGZ1bmN0aW9uKGUsIGZpbGVDb3VudGVyLCBmaWxlLCBkcm9wcGVkRmlsZXMsIGNvbGxlY3Rpb25JZCkge1xuICAgICAgICAgICAgLy8gQXJyYXkgb2YgY29udGlnc1xuICAgICAgICB2YXIgY29udGlncyA9IFtdLFxuICAgICAgICAgICAgLy8gQXJyYXkgb2Ygc2VxdWVuY2UgcGFydHNcbiAgICAgICAgICAgIGNvbnRpZ1BhcnRzID0gW10sXG4gICAgICAgICAgICAvLyBDb3VudCB0b3RhbCBudW1iZXIgb2YgY29udGlncyBpbiBhIHNpbmdsZSBhc3NlbWJseVxuICAgICAgICAgICAgY29udGlnc1N1bSA9IDAsXG4gICAgICAgICAgICAvLyBDb3VudCBjb250aWdzXG4gICAgICAgICAgICBjb250aWdDb3VudGVyID0gMCxcbiAgICAgICAgICAgIC8vIEFycmF5IG9mIEROQSBzZXF1ZW5jZSBzdHJpbmdzXG4gICAgICAgICAgICBkbmFTZXF1ZW5jZVN0cmluZ3MgPSBbXSxcbiAgICAgICAgICAgIC8vIFNpbmdsZSBETkEgc2VxdWVuY2Ugc3RyaW5nXG4gICAgICAgICAgICBkbmFTZXF1ZW5jZVN0cmluZyA9ICcnLFxuICAgICAgICAgICAgLy8gU2luZ2xlIEROQSBzZXF1ZW5jZSBpZFxuICAgICAgICAgICAgZG5hU2VxdWVuY2VJZCA9ICcnLFxuICAgICAgICAgICAgLy8gRW1wdHkgalF1ZXJ5IG9iamVjdFxuICAgICAgICAgICAgYXNzZW1ibHlMaXN0SXRlbSA9ICQoKSxcbiAgICAgICAgICAgIC8vIE41MCBjaGFydCBkYXRhXG4gICAgICAgICAgICBjaGFydERhdGEgPSBbXTtcblxuICAgICAgICAvLyBJbml0IGFzc2VtYmx5IHVwbG9hZCBtZXRhZGF0YVxuICAgICAgICBXR1NULnVwbG9hZC5hc3NlbWJseVtmaWxlLm5hbWVdID0ge1xuICAgICAgICAgICAgbWV0YWRhdGE6IHt9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVHJpbSwgYW5kIHNwbGl0IGFzc2VtYmx5IHN0cmluZyBpbnRvIGFycmF5IG9mIGluZGl2aWR1YWwgY29udGlnc1xuICAgICAgICAvLyB0aGVuIGZpbHRlciB0aGF0IGFycmF5IGJ5IHJlbW92aW5nIGVtcHR5IHN0cmluZ3NcbiAgICAgICAgY29udGlncyA9IGUudGFyZ2V0LnJlc3VsdC50cmltKCkuc3BsaXQoJz4nKS5maWx0ZXIoZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgICAgICByZXR1cm4gKGVsZW1lbnQubGVuZ3RoID4gMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFN0YXJ0IGNvdW50aW5nIGFzc2VtYmxpZXMgZnJvbSAxLCBub3QgMFxuICAgICAgICBmaWxlQ291bnRlciA9IGZpbGVDb3VudGVyICsgMTtcblxuICAgICAgICBhc3NlbWJsaWVzW2ZpbGVDb3VudGVyXSA9IHtcbiAgICAgICAgICAgICduYW1lJzogZmlsZS5uYW1lLFxuICAgICAgICAgICAgJ2lkJzogJycsXG4gICAgICAgICAgICAnY29udGlncyc6IHtcbiAgICAgICAgICAgICAgICAndG90YWwnOiBjb250aWdzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAnaW52YWxpZCc6IDAsXG4gICAgICAgICAgICAgICAgJ2luZGl2aWR1YWwnOiBbXVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIENsZWFyIHRoaXMgYXJyYXkgb2YgRE5BIHNlcXVlbmNlIHN0cmluZ3NcbiAgICAgICAgZG5hU2VxdWVuY2VTdHJpbmdzID0gW107XG4gICAgICAgIC8vIENsZWFyIHRoaXMgRE5BIHNlcXVlbmNlIHN0cmluZ1xuICAgICAgICBkbmFTZXF1ZW5jZVN0cmluZyA9ICcnO1xuICAgICAgICAvLyBDbGVhciB0aGlzIEROQSBzZXF1ZW5jZSBpZCBzdHJpbmdcbiAgICAgICAgZG5hU2VxdWVuY2VJZCA9ICcnO1xuXG4gICAgICAgIC8vIFBhcnNlIGVhY2ggY29udGlnXG4gICAgICAgIGZvciAoOyBjb250aWdDb3VudGVyIDwgY29udGlncy5sZW5ndGg7IGNvbnRpZ0NvdW50ZXIrKykge1xuXG4gICAgICAgICAgICAvLyBTcGxpdCBjb250aWcgc3RyaW5nIGludG8gcGFydHNcbiAgICAgICAgICAgIGNvbnRpZ1BhcnRzID0gY29udGlnc1tjb250aWdDb3VudGVyXS5zcGxpdCgvXFxuLylcbiAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IGVtcHR5IHBhcnRzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihwYXJ0KXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChwYXJ0Lmxlbmd0aCA+IDApO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBUcmltIGVhY2ggY29udGlnIHBhcnRcbiAgICAgICAgICAgIHZhciBjb250aWdQYXJ0Q291bnRlciA9IDA7XG4gICAgICAgICAgICBmb3IgKDsgY29udGlnUGFydENvdW50ZXIgPCBjb250aWdQYXJ0czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29udGlnUGFydHNbY29udGlnUGFydENvdW50ZXJdID0gY29udGlnUGFydHNbY29udGlnUGFydENvdW50ZXJdLnRyaW0oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcblxuICAgICAgICAgICAgVmFsaWRhdGUgY29udGlnIHBhcnRzXG5cbiAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG9ubHkgb25lIGNvbnRpZyBwYXJ0IHRoZW4gdGhpcyBjb250aWcgaXMgaW52YWxpZFxuICAgICAgICAgICAgaWYgKGNvbnRpZ1BhcnRzLmxlbmd0aCA+IDEpIHtcblxuICAgICAgICAgICAgICAgIC8qXG5cbiAgICAgICAgICAgICAgICBETkEgc2VxdWVuY2UgY2FuIGNvbnRhaW46XG4gICAgICAgICAgICAgICAgMSkgW0NUQUdOVVhdIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgICAgMikgV2hpdGUgc3BhY2VzIChlLmcuOiBuZXcgbGluZSBjaGFyYWN0ZXJzKS5cblxuICAgICAgICAgICAgICAgIFRoZSBmaXJzdCBsaW5lIG9mIEZBU1RBIGZpbGUgY29udGFpbnMgaWQgYW5kIGRlc2NyaXB0aW9uLlxuICAgICAgICAgICAgICAgIFRoZSBzZWNvbmQgbGluZSB0aGVvcmV0aWNhbGx5IGNvbnRhaW5zIGNvbW1lbnRzIChzdGFydHMgd2l0aCAjKS5cblxuICAgICAgICAgICAgICAgIFRvIHBhcnNlIEZBU1RBIGZpbGUgeW91IG5lZWQgdG86XG4gICAgICAgICAgICAgICAgMS4gU2VwYXJhdGUgYXNzZW1ibHkgaW50byBpbmRpdmlkdWFsIGNvbnRpZ3MgYnkgc3BsaXR0aW5nIGZpbGUncyBjb250ZW50IGJ5ID4gY2hhcmFjdGVyLlxuICAgICAgICAgICAgICAgICAgIE5vdGU6IGlkIGFuZCBkZXNjcmlwdGlvbiBjYW4gY29udGFpbiA+IGNoYXJhY3Rlci5cbiAgICAgICAgICAgICAgICAyLiBGb3IgZWFjaCBzZXF1ZW5jZTogc3BsaXQgaXQgYnkgYSBuZXcgbGluZSBjaGFyYWN0ZXIsIFxuICAgICAgICAgICAgICAgICAgIHRoZW4gY29udmVydCByZXN1bHRpbmcgYXJyYXkgdG8gc3RyaW5nIGlnbm9yaW5nIHRoZSBmaXJzdCAoYW5kIHJhcmVseSB0aGUgc2Vjb25kKSBlbGVtZW50IG9mIHRoYXQgYXJyYXkuXG5cbiAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgLy8gUGFyc2Ugc2VxdWVuY2UgRE5BIHN0cmluZ1xuXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHN1YiBhcnJheSBvZiB0aGUgY29udGlnIHBhcnRzIGFycmF5IC0gY3V0IHRoZSBmaXJzdCBlbGVtZW50IChpZCBhbmQgZGVzY3JpcHRpb24pLlxuICAgICAgICAgICAgICAgIC8vdmFyIHNlcXVlbmNlRE5BU3RyaW5nQXJyYXkgPSBjb250aWdQYXJ0cy5zcGxpY2UoMSwgY29udGlnUGFydHMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGlnUGFydHNOb0lkRGVzY3JpcHRpb24gPSBjb250aWdQYXJ0cy5zcGxpY2UoMSwgY29udGlnUGFydHMubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIC8vIFZlcnkgcmFyZWx5IHRoZSBzZWNvbmQgbGluZSBjYW4gYmUgYSBjb21tZW50XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGZpcnN0IGVsZW1lbnQgd29uJ3QgbWF0Y2ggcmVnZXggdGhlbiBhc3N1bWUgaXQgaXMgYSBjb21tZW50XG4gICAgICAgICAgICAgICAgaWYgKCEgZG5hU2VxdWVuY2VSZWdleC50ZXN0KGNvbnRpZ1BhcnRzTm9JZERlc2NyaXB0aW9uWzBdLnRyaW0oKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGNvbW1lbnQgZWxlbWVudCBmcm9tIHRoZSBhcnJheVxuICAgICAgICAgICAgICAgICAgICBjb250aWdQYXJ0c05vSWREZXNjcmlwdGlvbiA9IGNvbnRpZ1BhcnRzTm9JZERlc2NyaXB0aW9uLnNwbGljZSgxLCBjb250aWdQYXJ0c05vSWREZXNjcmlwdGlvbi5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qXG5cbiAgICAgICAgICAgICAgICBDb250aWcgc3RyaW5nIHdpdGhvdXQgaWQsIGRlc2NyaXB0aW9uLCBjb21tZW50IGlzIG9ubHkgbGVmdCB3aXRoIEROQSBzZXF1ZW5jZSBzdHJpbmcocylcblxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCBhcnJheSBvZiBETkEgc2VxdWVuY2Ugc3Vic3RyaW5ncyBpbnRvIGEgc2luZ2xlIHN0cmluZ1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgZG5hU2VxdWVuY2VTdHJpbmcgPSBjb250aWdQYXJ0c05vSWREZXNjcmlwdGlvbi5qb2luKCcnKS5yZXBsYWNlKC9cXHMvZywgJycpO1xuXG4gICAgICAgICAgICAgICAgLy8gUGFyc2Ugc2VxdWVuY2UgaWRcbiAgICAgICAgICAgICAgICBkbmFTZXF1ZW5jZUlkID0gY29udGlnUGFydHNbMF0udHJpbSgpLnJlcGxhY2UoJz4nLCcnKTtcblxuICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIEROQSBzZXF1ZW5jZSBzdHJpbmdcbiAgICAgICAgICAgICAgICBpZiAoZG5hU2VxdWVuY2VSZWdleC50ZXN0KGRuYVNlcXVlbmNlU3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSBpdCBpbiBhcnJheVxuICAgICAgICAgICAgICAgICAgICBkbmFTZXF1ZW5jZVN0cmluZ3MucHVzaChkbmFTZXF1ZW5jZVN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEluaXQgc2VxdWVuY2Ugb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIGFzc2VtYmxpZXNbZmlsZUNvdW50ZXJdWydjb250aWdzJ11bJ2luZGl2aWR1YWwnXVtjb250aWdDb3VudGVyXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSBzZXF1ZW5jZSBpZFxuICAgICAgICAgICAgICAgICAgICBhc3NlbWJsaWVzW2ZpbGVDb3VudGVyXVsnY29udGlncyddWydpbmRpdmlkdWFsJ11bY29udGlnQ291bnRlcl1bJ2lkJ10gPSBkbmFTZXF1ZW5jZUlkO1xuICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSBzZXF1ZW5jZSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibGllc1tmaWxlQ291bnRlcl1bJ2NvbnRpZ3MnXVsnaW5kaXZpZHVhbCddW2NvbnRpZ0NvdW50ZXJdWydzZXF1ZW5jZSddID0gZG5hU2VxdWVuY2VTdHJpbmc7XG4gICAgICAgICAgICAgICAgLy8gSW52YWxpZCBETkEgc2VxdWVuY2Ugc3RyaW5nXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ291bnQgYXMgaW52YWxpZCBzZXF1ZW5jZVxuICAgICAgICAgICAgICAgICAgICBhc3NlbWJsaWVzW2ZpbGVDb3VudGVyXVsnY29udGlncyddWydpbnZhbGlkJ10gPSBhc3NlbWJsaWVzW2ZpbGVDb3VudGVyXVsnY29udGlncyddWydpbnZhbGlkJ10gKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQ291bnQgYXMgaW52YWxpZCBzZXF1ZW5jZVxuICAgICAgICAgICAgICAgIGFzc2VtYmxpZXNbZmlsZUNvdW50ZXJdWydjb250aWdzJ11bJ2ludmFsaWQnXSA9IGFzc2VtYmxpZXNbZmlsZUNvdW50ZXJdWydjb250aWdzJ11bJ2ludmFsaWQnXSArIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICAvLyBTdG9yZSBmYXN0YSBmaWxlIGFuZCBtZXRhZGF0YVxuICAgICAgICBmYXN0YUZpbGVzQW5kTWV0YWRhdGFbZmlsZS5uYW1lXSA9IHtcbiAgICAgICAgICAgIC8vIEN1dCBGQVNUQSBmaWxlIGV4dGVuc2lvbiBmcm9tIHRoZSBmaWxlIG5hbWVcbiAgICAgICAgICAgIC8vbmFtZTogZmlsZS5uYW1lLnN1YnN0cigwLCBmaWxlLm5hbWUubGFzdEluZGV4T2YoJy4nKSksXG4gICAgICAgICAgICBuYW1lOiBmaWxlLm5hbWUsXG4gICAgICAgICAgICBhc3NlbWJseTogZS50YXJnZXQucmVzdWx0LFxuICAgICAgICAgICAgbWV0YWRhdGE6IHt9XG4gICAgICAgIH07XG4gICAgICAgIC8qXG4gICAgICAgIGZhc3RhRmlsZXNBbmRNZXRhZGF0YS5wdXNoKHtcbiAgICAgICAgICAgIC8vIEN1dCBGQVNUQSBmaWxlIGV4dGVuc2lvbiBmcm9tIHRoZSBmaWxlIG5hbWVcbiAgICAgICAgICAgIG5hbWU6IGZpbGUubmFtZS5zdWJzdHIoMCwgZmlsZS5uYW1lLmxhc3RJbmRleE9mKCcuJykpLFxuICAgICAgICAgICAgYXNzZW1ibHk6IGUudGFyZ2V0LnJlc3VsdCxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB7fVxuICAgICAgICB9KTtcbiAgICAgICAgKi9cblxuICAgICAgICAvKlxuXG4gICAgICAgIENhbGN1bGF0ZSBONTBcbiAgICAgICAgaHR0cDovL3d3dy5uYXR1cmUuY29tL25yZy9qb3VybmFsL3YxMy9uNS9ib3gvbnJnMzE3NF9CWDEuaHRtbFxuXG4gICAgICAgICovXG5cbiAgICAgICAgLy8gT3JkZXIgYXJyYXkgYnkgc2VxdWVuY2UgbGVuZ3RoIERFU0NcbiAgICAgICAgdmFyIHNvcnRlZERuYVNlcXVlbmNlU3RyaW5ncyA9IGRuYVNlcXVlbmNlU3RyaW5ncy5zb3J0KGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBzdW1zIG9mIGFsbCBudWNsZW90aWRlcyBpbiB0aGlzIGFzc2VtYmx5IGJ5IGFkZGluZyBjdXJyZW50IGNvbnRpZydzIGxlbmd0aCB0byB0aGUgc3VtIG9mIGFsbCBwcmV2aW91cyBjb250aWcgbGVuZ3Roc1xuICAgICAgICAvLyBDb250aWcgbGVuZ3RoID09PSBudW1iZXIgb2YgbnVjbGVvdGlkZXMgaW4gdGhpcyBjb250aWdcbiAgICAgICAgdmFyIGFzc2VtYmx5TnVjbGVvdGlkZVN1bXMgPSBbXSxcbiAgICAgICAgICAgIC8vIENvdW50IHNvcnRlZCBkbmEgc2VxdWVuY2Ugc3RyaW5nc1xuICAgICAgICAgICAgc29ydGVkRG5hU2VxdWVuY2VTdHJpbmdDb3VudGVyID0gMDtcblxuICAgICAgICBmb3IgKDsgc29ydGVkRG5hU2VxdWVuY2VTdHJpbmdDb3VudGVyIDwgc29ydGVkRG5hU2VxdWVuY2VTdHJpbmdzLmxlbmd0aDsgc29ydGVkRG5hU2VxdWVuY2VTdHJpbmdDb3VudGVyKyspIHtcbiAgICAgICAgICAgIGlmIChhc3NlbWJseU51Y2xlb3RpZGVTdW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgY3VycmVudCBjb250aWcncyBsZW5ndGggdG8gdGhlIHN1bSBvZiBhbGwgcHJldmlvdXMgY29udGlnIGxlbmd0aHNcbiAgICAgICAgICAgICAgICBhc3NlbWJseU51Y2xlb3RpZGVTdW1zLnB1c2goc29ydGVkRG5hU2VxdWVuY2VTdHJpbmdzW3NvcnRlZERuYVNlcXVlbmNlU3RyaW5nQ291bnRlcl0ubGVuZ3RoICsgYXNzZW1ibHlOdWNsZW90aWRlU3Vtc1thc3NlbWJseU51Y2xlb3RpZGVTdW1zLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIFwic3VtXCIgb2YgYSBzaW5nbGUgY29udGlnJ3MgbGVuZ3RoXG4gICAgICAgICAgICAgICAgYXNzZW1ibHlOdWNsZW90aWRlU3Vtcy5wdXNoKHNvcnRlZERuYVNlcXVlbmNlU3RyaW5nc1tzb3J0ZWREbmFTZXF1ZW5jZVN0cmluZ0NvdW50ZXJdLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxjdWxhdGUgb25lLWhhbGYgb2YgdGhlIHRvdGFsIHN1bSBvZiBhbGwgbnVjbGVvdGlkZXMgaW4gdGhlIGFzc2VtYmx5XG4gICAgICAgIHZhciBhc3NlbWJseU51Y2xlb3RpZGVzSGFsZlN1bSA9IE1hdGguZmxvb3IoYXNzZW1ibHlOdWNsZW90aWRlU3Vtc1thc3NlbWJseU51Y2xlb3RpZGVTdW1zLmxlbmd0aCAtIDFdIC8gMik7XG5cbiAgICAgICAgLypcblxuICAgICAgICBTdW0gbGVuZ3RocyBvZiBldmVyeSBjb250aWcgc3RhcnRpbmcgZnJvbSB0aGUgbG9uZ2VzdCBjb250aWdcbiAgICAgICAgdW50aWwgdGhpcyBydW5uaW5nIHN1bSBlcXVhbHMgb25lLWhhbGYgb2YgdGhlIHRvdGFsIGxlbmd0aCBvZiBhbGwgY29udGlncyBpbiB0aGUgYXNzZW1ibHkuXG5cbiAgICAgICAgKi9cblxuICAgICAgICAgICAgLy8gU3RvcmUgbnVjbGVvdGlkZXMgc3VtXG4gICAgICAgIHZhciBhc3NlbWJseU51Y2xlb3RpZGVzU3VtID0gMCxcbiAgICAgICAgICAgIC8vIE41MCBvYmplY3RcbiAgICAgICAgICAgIGFzc2VtYmx5TjUwID0ge30sXG4gICAgICAgICAgICAvLyBDb3VudCBhZ2FpbiBzb3J0ZWQgZG5hIHNlcXVlbmNlIHN0cmluZ3NcbiAgICAgICAgICAgIHNvcnRlZERuYVNlcXVlbmNlU3RyaW5nQ291bnRlciA9IDA7XG5cbiAgICAgICAgZm9yICg7IHNvcnRlZERuYVNlcXVlbmNlU3RyaW5nQ291bnRlciA8IHNvcnRlZERuYVNlcXVlbmNlU3RyaW5ncy5sZW5ndGg7IHNvcnRlZERuYVNlcXVlbmNlU3RyaW5nQ291bnRlcisrKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgbnVjbGVvdGlkZXMgc3VtXG4gICAgICAgICAgICBhc3NlbWJseU51Y2xlb3RpZGVzU3VtID0gYXNzZW1ibHlOdWNsZW90aWRlc1N1bSArIHNvcnRlZERuYVNlcXVlbmNlU3RyaW5nc1tzb3J0ZWREbmFTZXF1ZW5jZVN0cmluZ0NvdW50ZXJdLmxlbmd0aDtcbiAgICAgICAgICAgIC8vIENvbnRpZyBONTAgb2YgYW4gYXNzZW1ibHkgaXMgdGhlIGxlbmd0aCBvZiB0aGUgc2hvcnRlc3QgY29udGlnIGluIHRoaXMgbGlzdFxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgY3VycmVudCBzdW0gb2YgbnVjbGVvdGlkZXMgaXMgZ3JlYXRlciBvciBlcXVhbHMgdG8gaGFsZiBzdW0gb2YgbnVjbGVvdGlkZXMgaW4gdGhpcyBhc3NlbWJseVxuICAgICAgICAgICAgaWYgKGFzc2VtYmx5TnVjbGVvdGlkZXNTdW0gPj0gYXNzZW1ibHlOdWNsZW90aWRlc0hhbGZTdW0pIHtcbiAgICAgICAgICAgICAgICBhc3NlbWJseU41MFsnc2VxdWVuY2VOdW1iZXInXSA9IHNvcnRlZERuYVNlcXVlbmNlU3RyaW5nQ291bnRlciArIDE7XG4gICAgICAgICAgICAgICAgYXNzZW1ibHlONTBbJ3N1bSddID0gYXNzZW1ibHlOdWNsZW90aWRlc1N1bTtcbiAgICAgICAgICAgICAgICBhc3NlbWJseU41MFsnc2VxdWVuY2VMZW5ndGgnXSA9IHNvcnRlZERuYVNlcXVlbmNlU3RyaW5nc1tzb3J0ZWREbmFTZXF1ZW5jZVN0cmluZ0NvdW50ZXJdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBhdmVyYWdlIG51Y2xlb3RpZGVzIHBlciBzZXF1ZW5jZVxuICAgICAgICB2YXIgYXZlcmFnZU51Y2xlb3RpZGVzUGVyU2VxdWVuY2UgPSBNYXRoLmZsb29yKGFzc2VtYmx5TnVjbGVvdGlkZVN1bXNbYXNzZW1ibHlOdWNsZW90aWRlU3Vtcy5sZW5ndGggLSAxXSAvIGRuYVNlcXVlbmNlU3RyaW5ncy5sZW5ndGgpO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBONTAgcXVhbGl0eVxuICAgICAgICAvLyBJZiBzZXF1ZW5jZSBsZW5ndGggaXMgZ3JlYXRlciB0aGFuIGF2ZXJhZ2Ugc2VxdWVuY2UgbGVuZ3RoIHRoZW4gcXVhbGl0eSBpcyBnb29kXG4gICAgICAgIC8qXG4gICAgICAgIGlmIChhc3NlbWJseU41MFsnc2VxdWVuY2VMZW5ndGgnXSA+IGF2ZXJhZ2VOdWNsZW90aWRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgICAgICBhc3NlbWJseU41MFsncXVhbGl0eSddID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHsgLy8gUXVhbGl0eSBpcyBiYWRcbiAgICAgICAgICAgIGFzc2VtYmx5TjUwWydxdWFsaXR5J10gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAqL1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0b3RhbCBudW1iZXIgb2YgY29udGlncyB0byB1cGxvYWRcbiAgICAgICAgLy9jb250aWdzU3VtID0gY29udGlnc1N1bSArIGNvbnRpZ3MubGVuZ3RoOyAvLyBUTyBETzogRGVwcmljYXRlIGNvbnRpZ3NTdW1cbiAgICAgICAgdG90YWxDb250aWdzU3VtID0gdG90YWxDb250aWdzU3VtICsgY29udGlncy5sZW5ndGg7XG5cbiAgICAgICAgLy8gU2hvdyBhdmVyYWdlIG51bWJlciBvZiBjb250aWdzIHBlciBhc3NlbWJseVxuICAgICAgICAkKCcuYXNzZW1ibHktc2VxdWVuY2VzLWF2ZXJhZ2UnKS50ZXh0KE1hdGguZmxvb3IodG90YWxDb250aWdzU3VtIC8gZHJvcHBlZEZpbGVzLmxlbmd0aCkpO1xuXG4gICAgICAgIC8vIFRPIERPOiBDb252ZXJ0IG11bHRpcGxlIHN0cmluZ3MgY29uY2F0ZW5hdGlvbiB0byBhcnJheSBhbmQgdXNlIGpvaW4oJycpXG4gICAgICAgIC8vIERpc3BsYXkgY3VycmVudCBhc3NlbWJseVxuICAgICAgICBhc3NlbWJseUxpc3RJdGVtID0gJChcbiAgICAgICAgICAgIC8vJzxsaSBjbGFzcz1cImFzc2VtYmx5LWl0ZW0gYXNzZW1ibHktaXRlbS0nICsgZmlsZUNvdW50ZXIgKyAnIGhpZGUtdGhpc1wiIGRhdGEtbmFtZT1cIicgKyBhc3NlbWJsaWVzW2ZpbGVDb3VudGVyXVsnbmFtZSddICsgJ1wiIGlkPVwiYXNzZW1ibHktaXRlbS0nICsgZmlsZUNvdW50ZXIgKyAnXCI+J1xuICAgICAgICAgICAgJzxsaSBjbGFzcz1cImFzc2VtYmx5LWl0ZW0gaGlkZS10aGlzXCIgZGF0YS1uYW1lPVwiJyArIGFzc2VtYmxpZXNbZmlsZUNvdW50ZXJdWyduYW1lJ10gKyAnXCIgZGF0YS1maWxlLWlkPVwiJyArIGZpbGVDb3VudGVyICsgJ1wiIGlkPVwiYXNzZW1ibHktaXRlbS0nICsgZmlsZUNvdW50ZXIgKyAnXCI+J1xuXG4gICAgICAgICAgICAgICAgLy8gQXNzZW1ibHkgb3ZlcnZpZXdcbiAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktb3ZlcnZpZXdcIj4nXG5cbiAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImFzc2VtYmx5LXN0YXRzLWNvbnRhaW5lciBhc3NlbWJseS1maWxlLW5hbWVcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2PicgKyBhc3NlbWJsaWVzW2ZpbGVDb3VudGVyXVsnbmFtZSddICsgJzwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1jb250YWluZXJcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmludCBhIG51bWJlciB3aXRoIGNvbW1hcyBhcyB0aG91c2FuZHMgc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjkwMTI5OFxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImFzc2VtYmx5LXN0YXRzLWxhYmVsXCI+dG90YWwgbnQ8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktc3RhdHMtbnVtYmVyXCI+JyArIGFzc2VtYmx5TnVjbGVvdGlkZVN1bXNbYXNzZW1ibHlOdWNsZW90aWRlU3Vtcy5sZW5ndGggLSAxXS50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIFwiLFwiKSArICc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLysgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1sYWJlbFwiPnNlcXVlbmNlczwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuXG4gICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1jb250YWluZXJcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmludCBhIG51bWJlciB3aXRoIGNvbW1hcyBhcyB0aG91c2FuZHMgc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjkwMTI5OFxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImFzc2VtYmx5LXN0YXRzLWxhYmVsXCI+dG90YWwgY29udGlnczwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1udW1iZXIgYXNzZW1ibHktc3RhdHMtbnVtYmVyLWNvbnRpZ3NcIj4nICsgYXNzZW1ibGllc1tmaWxlQ291bnRlcl1bJ2NvbnRpZ3MnXVsndG90YWwnXS50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIFwiLFwiKSArICc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLysgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1sYWJlbFwiPnNlcXVlbmNlczwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuXG4gICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1jb250YWluZXJcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmludCBhIG51bWJlciB3aXRoIGNvbW1hcyBhcyB0aG91c2FuZHMgc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjkwMTI5OFxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImFzc2VtYmx5LXN0YXRzLWxhYmVsXCI+bWluIGNvbnRpZzwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1udW1iZXJcIj4nICsgc29ydGVkRG5hU2VxdWVuY2VTdHJpbmdzW3NvcnRlZERuYVNlcXVlbmNlU3RyaW5ncy5sZW5ndGggLSAxXS5sZW5ndGgudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIikgKyAnPHNtYWxsPm50PC9zbWFsbD48L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLysgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1sYWJlbFwiPnNlcXVlbmNlczwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuXG4gICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1jb250YWluZXJcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmludCBhIG51bWJlciB3aXRoIGNvbW1hcyBhcyB0aG91c2FuZHMgc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjkwMTI5OFxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImFzc2VtYmx5LXN0YXRzLWxhYmVsXCI+bWVhbiBjb250aWc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktc3RhdHMtbnVtYmVyXCI+JyArIGF2ZXJhZ2VOdWNsZW90aWRlc1BlclNlcXVlbmNlLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIsXCIpICsgJzxzbWFsbD5udDwvc21hbGw+PC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8rICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktc3RhdHMtbGFiZWxcIj5udWNsZW90aWRlcyBwZXIgc2VxdWVuY2U8YnIvPiBvbiBhdmVyYWdlPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nXG5cbiAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImFzc2VtYmx5LXN0YXRzLWNvbnRhaW5lclwiPidcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByaW50IGEgbnVtYmVyIHdpdGggY29tbWFzIGFzIHRob3VzYW5kcyBzZXBhcmF0b3JzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yOTAxMjk4XG4gICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktc3RhdHMtbGFiZWxcIj5tYXggY29udGlnPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImFzc2VtYmx5LXN0YXRzLW51bWJlclwiPicgKyBzb3J0ZWREbmFTZXF1ZW5jZVN0cmluZ3NbMF0ubGVuZ3RoLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIsXCIpICsgJzxzbWFsbD5udDwvc21hbGw+PC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8rICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktc3RhdHMtbGFiZWxcIj5zZXF1ZW5jZXM8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzwvZGl2PidcblxuICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktc3RhdHMtY29udGFpbmVyXCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJpbnQgYSBudW1iZXIgd2l0aCBjb21tYXMgYXMgdGhvdXNhbmRzIHNlcGFyYXRvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI5MDEyOThcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1sYWJlbFwiPmNvbnRpZyBONTA8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktc3RhdHMtbnVtYmVyIGFzc2VtYmx5LXN0YXRzLW41MC1udW1iZXJcIj4nICsgYXNzZW1ibHlONTBbJ3NlcXVlbmNlTGVuZ3RoJ10udG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIikgKyAnPHNtYWxsPm50PC9zbWFsbD48L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLysgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1sYWJlbFwiPm51Y2xlb3RpZGVzIGluPGJyPk41MCBjb250aWc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzwvZGl2PidcblxuICAgICAgICAgICAgICAgICsgJzwvZGl2PidcblxuICAgICAgICAgICAgICAgIC8vIFN1bW1hcnlcbiAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktY29udGVudC1kYXRhXCI+J1xuLypcbiAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImFzc2VtYmx5LXN0YXRzLWNvbnRhaW5lclwiPidcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1udW1iZXJcIj4nICsgYXNzZW1ibGllc1tmaWxlQ291bnRlcl1bJ3NlcXVlbmNlcyddWyd0b3RhbCddICsgJzwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1sYWJlbFwiPnNlcXVlbmNlczwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuXG4gICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1zdGF0cy1jb250YWluZXJcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmludCBhIG51bWJlciB3aXRoIGNvbW1hcyBhcyB0aG91c2FuZHMgc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjkwMTI5OFxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImFzc2VtYmx5LXN0YXRzLW51bWJlclwiPicgKyBhdmVyYWdlTnVjbGVvdGlkZXNQZXJTZXF1ZW5jZS50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIFwiLFwiKSArICc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktc3RhdHMtbGFiZWxcIj5udWNsZW90aWRlcyBwZXIgc2VxdWVuY2U8YnIvPiBvbiBhdmVyYWdlPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nXG4qL1xuICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwic2VxdWVuY2UtbGVuZ3RoLWRpc3RyaWJ1dGlvbi1jaGFydC0nICsgZmlsZUNvdW50ZXIgKyAnXCI+PC9kaXY+J1xuICAgICAgICAgICAgICAgICsgJzwvZGl2PidcblxuICAgICAgICAgICAgICAgIC8vIE1ldGFkYXRhIGZvcm1cbiAgICAgICAgICAgICAgICAvLysgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1tZXRhZGF0YVwiPidcbiAgICAgICAgICAgICAgICAgICAgLy8rICc8aDQ+UGxlYXNlIHByb3ZpZGUgbWFuZGF0b3J5IGFzc2VtYmx5IG1ldGFkYXRhOjwvaDQ+J1xuICAgICAgICAgICAgICAgICAgICAvKisgJzxmb3JtIHJvbGU9XCJmb3JtXCI+J1xuXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiZm9ybS1ibG9jayBhc3NlbWJseS1tZXRhZGF0YS0nICsgZmlsZUNvdW50ZXIgKyAnXCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8bGFiZWwgZm9yPVwiYXNzZW1ibHlTYW1wbGVEYXRldGltZUlucHV0JyArIGZpbGVDb3VudGVyICsgJ1wiPldoZW4gdGhpcyBhc3NlbWJseSB3YXMgc2FtcGxlZD88L2xhYmVsPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgYXNzZW1ibHktc2FtcGxlLWRhdGV0aW1lLWlucHV0XCIgaWQ9XCJhc3NlbWJseVNhbXBsZURhdGV0aW1lSW5wdXQnICsgZmlsZUNvdW50ZXIgKyAnXCIgcGxhY2Vob2xkZXI9XCJcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJjaGVja2JveFwiPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGxhYmVsPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJhc3NlbWJseVNhbXBsZURhdGV0aW1lTm90U3VyZScgKyBmaWxlQ291bnRlciArICdcIiBjbGFzcz1cIm5vdC1zdXJlLWNoZWNrYm94XCI+IEkgYW0gbm90IHN1cmUhIDxzcGFuIGNsYXNzPVwibm90LXN1cmUtaGludCBoaWRlLXRoaXNcIj5QbGVhc2UgcHJvdmlkZSB5b3VyIGJlc3QgZXN0aW1hdGUuPC9zcGFuPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9sYWJlbD4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiZm9ybS1ibG9jayBhc3NlbWJseS1tZXRhZGF0YS0nICsgZmlsZUNvdW50ZXIgKyAnIGhpZGUtdGhpc1wiPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGxhYmVsIGZvcj1cImFzc2VtYmx5U2FtcGxlTG9jYXRpb25JbnB1dCcgKyBmaWxlQ291bnRlciArICdcIj5XaGVyZSB0aGlzIGFzc2VtYmx5IHdhcyBzYW1wbGVkPzwvbGFiZWw+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbCBhc3NlbWJseS1zYW1wbGUtbG9jYXRpb24taW5wdXRcIiBpZD1cImFzc2VtYmx5U2FtcGxlTG9jYXRpb25JbnB1dCcgKyBmaWxlQ291bnRlciArICdcIiBwbGFjZWhvbGRlcj1cIkUuZy46IExvbmRvbiwgVW5pdGVkIEtpbmdkb21cIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImNoZWNrYm94XCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8bGFiZWw+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImFzc2VtYmx5U2FtcGxlTG9jYXRpb25Ob3RTdXJlJyArIGZpbGVDb3VudGVyICsgJ1wiIGNsYXNzPVwibm90LXN1cmUtY2hlY2tib3hcIj4gSSBhbSBub3Qgc3VyZSEgPHNwYW4gY2xhc3M9XCJub3Qtc3VyZS1oaW50IGhpZGUtdGhpc1wiPlBsZWFzZSBwcm92aWRlIHlvdXIgYmVzdCBlc3RpbWF0ZS48L3NwYW4+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8L2xhYmVsPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nICBcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvZGl2PidcblxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImZvcm0tYmxvY2sgYXNzZW1ibHktbWV0YWRhdGEtJyArIGZpbGVDb3VudGVyICsgJyBoaWRlLXRoaXNcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBuZXh0LWFzc2VtYmx5LWJ1dHRvblwiIGNsYXNzPVwic2hvdy1uZXh0LWFzc2VtYmx5XCI+TmV4dCBhc3NlbWJseTwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICcgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBhcHBseS10by1hbGwtYXNzZW1ibGllcy1idXR0b25cIj5Db3B5IHRvIGFsbCBhc3NlbWJsaWVzPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuXG4gICAgICAgICAgICAgICAgICAgICsgJzwvZm9ybT4nKi9cbiAgICAgICAgICAgICAgICAvLysgJzwvZGl2PidcblxuICAgICAgICAgICAgICAgIC8vKyAnPGRpdiBjbGFzcz1cImFzc2VtYmx5LXRvdGFsLXNlcXVlbmNlc1wiPicgKyBhc3NlbWJsaWVzW2ZpbGVDb3VudGVyXVsnc2VxdWVuY2VzJ11bJ2FsbCddICsgJzwvZGl2PidcblxuLyogICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1pZGVudGlmaWVyLWNvbnRhaW5lclwiPidcbiAgICAgICAgICAgICAgICAgICAgKyAnPHNwYW4gY2xhc3M9XCJhc3NlbWJseS1pZGVudGlmaWVyLWxhYmVsXCI+SWRlbnRpZmllcjo8L3NwYW4+J1xuICAgICAgICAgICAgICAgICAgICArICc8c3BhbiBjbGFzcz1cImFzc2VtYmx5LWlkZW50aWZpZXJcIj4nICsgYXNzZW1ibHlDb2xsZWN0aW9uW2Fzc2VtYmx5Q291bnRlcl0uaWRlbnRpZmllciArICc8L3NwYW4+J1xuICAgICAgICAgICAgICAgICsgJzwvZGl2PidcbiAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktc3RyaW5nLWNvbnRhaW5lclwiPidcbiAgICAgICAgICAgICAgICAgICAgKyAnPHNwYW4gY2xhc3M9XCJhc3NlbWJseS1zdHJpbmctbGFiZWxcIj5hc3NlbWJseSBwcmV2aWV3Ojwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzxzcGFuIGNsYXNzPVwiYXNzZW1ibHktc3RyaW5nXCI+JyArIGFzc2VtYmx5Q29sbGVjdGlvblthc3NlbWJseUNvdW50ZXJdLmFzc2VtYmx5LnNsaWNlKDAsIDEwMCkgKyAnLi4uPC9zcGFuPidcbiAgICAgICAgICAgICAgICArICc8L2Rpdj4nKi9cblxuICAgICAgICAgICAgKyAnPC9saT4nXG4gICAgICAgICk7XG5cbiAgICAgICAgdmFyICRhc3NlbWJseU1ldGFkYXRhRm9ybUNvbnRhaW5lciA9ICQoJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1tZXRhZGF0YVwiPjwvZGl2PicpLFxuICAgICAgICAgICAgJGFzc2VtYmx5TWV0YWRhdGFGb3JtSGVhZGVyID0gJCgnPGg0PlBsZWFzZSBwcm92aWRlIG1hbmRhdG9yeSBhc3NlbWJseSBtZXRhZGF0YTo8L2g0PicpLFxuICAgICAgICAgICAgJGFzc2VtYmx5TWV0YWRhdGFGb3JtID0gJCgnPGRpdj48L2Rpdj4nKSxcblxuICAgICAgICAgICAgLy8gTWV0YWRhdGEgdGVtcGxhdGVzXG4gICAgICAgICAgICBhc3NlbWJseVNhbXBsZURhdGV0aW1lRm9ybUJsb2NrID1cbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZm9ybS1ibG9jayBhc3NlbWJseS1tZXRhZGF0YS17e2ZpbGVDb3VudGVyfX0gYXNzZW1ibHktbWV0YWRhdGEtYmxvY2tcIj4nXG4gICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgZm9ybS1ob3Jpem9udGFsXCI+J1xuXG4gICAgICAgICAgICAgICAgICAgIC8vICsgJzxsYWJlbCBmb3I9XCJhc3NlbWJseVNhbXBsZURhdGV0aW1lSW5wdXR7e2ZpbGVDb3VudGVyfX1cIj5XaGVuIHRoaXMgYXNzZW1ibHkgd2FzIHNhbXBsZWQ/PC9sYWJlbD4nXG4gICAgICAgICAgICAgICAgICAgIC8vICsgJzxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGFzc2VtYmx5LXNhbXBsZS1kYXRldGltZS1pbnB1dFwiIGlkPVwiYXNzZW1ibHlTYW1wbGVEYXRldGltZUlucHV0e3tmaWxlQ291bnRlcn19XCIgcGxhY2Vob2xkZXI9XCJcIj4nXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICArICc8bGFiZWwgZm9yPVwiYXNzZW1ibHlUaW1lc3RhbXBJbnB1dHt7ZmlsZUNvdW50ZXJ9fVwiPldoZW4gdGhpcyBhc3NlbWJseSB3YXMgc2FtcGxlZD88L2xhYmVsPidcblxuICAgICAgICAgICAgICAgICAgICAvLyBZZWFyXG4gICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1tZXRhZGF0YS10aW1lc3RhbXAtYmxvY2sgYXNzZW1ibHktbWV0YWRhdGEtdGltZXN0YW1wLXllYXJcIiBkYXRhLWZpbGUtaWQ9XCJ7e2ZpbGVDb3VudGVyfX1cIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8c2VsZWN0IG5hbWU9XCJzZWxlY3RcIiBjbGFzcz1cImZvcm0tY29udHJvbCBhc3NlbWJseS10aW1lc3RhbXAtaW5wdXQgYXNzZW1ibHktdGltZXN0YW1wLWlucHV0LXllYXJcIiBkYXRhLXRpbWVzdGFtcC1pbnB1dD1cInllYXJcIiBkYXRhLWZpbGUtaWQ9XCJ7e2ZpbGVDb3VudGVyfX1cIiBkYXRhLWZpbGUtbmFtZT1cIicgKyBmaWxlLm5hbWUgKyAnXCIgaWQ9XCJhc3NlbWJseVRpbWVzdGFtcElucHV0e3tmaWxlQ291bnRlcn19XCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxvcHRpb24gdmFsdWU9XCItMVwiPkNob29zZSB5ZWFyPC9vcHRpb24+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ3t7bGlzdE9mWWVhcnN9fSdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvc2VsZWN0PidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE1vbnRoXG4gICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJhc3NlbWJseS1tZXRhZGF0YS10aW1lc3RhbXAtYmxvY2sgYXNzZW1ibHktbWV0YWRhdGEtdGltZXN0YW1wLW1vbnRoIGhpZGUtdGhpc1wiIGRhdGEtZmlsZS1pZD1cInt7ZmlsZUNvdW50ZXJ9fVwiPidcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzxzZWxlY3QgbmFtZT1cInNlbGVjdFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGFzc2VtYmx5LXRpbWVzdGFtcC1pbnB1dCBhc3NlbWJseS10aW1lc3RhbXAtaW5wdXQtbW9udGhcIiBkYXRhLXRpbWVzdGFtcC1pbnB1dD1cIm1vbnRoXCIgZGF0YS1maWxlLWlkPVwie3tmaWxlQ291bnRlcn19XCIgZGF0YS1maWxlLW5hbWU9XCInICsgZmlsZS5uYW1lICsgJ1wiPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8b3B0aW9uIHZhbHVlPVwiLTFcIj5DaG9vc2UgbW9udGg8L29wdGlvbj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAne3tsaXN0T2ZNb250aHN9fSdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvc2VsZWN0PidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIERheVxuICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYXNzZW1ibHktbWV0YWRhdGEtdGltZXN0YW1wLWJsb2NrIGFzc2VtYmx5LW1ldGFkYXRhLXRpbWVzdGFtcC1kYXkgaGlkZS10aGlzXCIgZGF0YS1maWxlLWlkPVwie3tmaWxlQ291bnRlcn19XCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPHNlbGVjdCBuYW1lPVwic2VsZWN0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgYXNzZW1ibHktdGltZXN0YW1wLWlucHV0IGFzc2VtYmx5LXRpbWVzdGFtcC1pbnB1dC1kYXlcIiBkYXRhLXRpbWVzdGFtcC1pbnB1dD1cImRheVwiIGRhdGEtZmlsZS1pZD1cInt7ZmlsZUNvdW50ZXJ9fVwiIGRhdGEtZmlsZS1uYW1lPVwiJyArIGZpbGUubmFtZSArICdcIj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPG9wdGlvbiB2YWx1ZT1cIi0xXCI+Q2hvb3NlIGRheTwvb3B0aW9uPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICd7e2xpc3RPZkRheXN9fSdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvc2VsZWN0PidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuXG4gICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xuICAgICAgICAgICAgKyAnPC9kaXY+JyxcbiAgICAgICAgICAgIGFzc2VtYmx5U2FtcGxlTG9jYXRpb25Gb3JtQmxvY2sgPVxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmb3JtLWJsb2NrIGFzc2VtYmx5LW1ldGFkYXRhLXt7ZmlsZUNvdW50ZXJ9fSBhc3NlbWJseS1tZXRhZGF0YS1ibG9jayBoaWRlLXRoaXNcIj4nXG4gICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzxsYWJlbCBmb3I9XCJhc3NlbWJseVNhbXBsZUxvY2F0aW9uSW5wdXR7e2ZpbGVDb3VudGVyfX1cIj5XaGVyZSB0aGlzIGFzc2VtYmx5IHdhcyBzYW1wbGVkPzwvbGFiZWw+J1xuICAgICAgICAgICAgICAgICAgICArICc8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbCBhc3NlbWJseS1zYW1wbGUtbG9jYXRpb24taW5wdXRcIiBpZD1cImFzc2VtYmx5U2FtcGxlTG9jYXRpb25JbnB1dHt7ZmlsZUNvdW50ZXJ9fVwiIHBsYWNlaG9sZGVyPVwiRS5nLjogTG9uZG9uLCBVbml0ZWQgS2luZ2RvbVwiPidcbiAgICAgICAgICAgICAgICArICc8L2Rpdj4nICBcbiAgICAgICAgICAgICsgJzwvZGl2PicsXG4gICAgICAgICAgICBhc3NlbWJseVNhbXBsZVNvdXJjZUZvcm1CbG9jayA9XG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZvcm0tYmxvY2sgYXNzZW1ibHktbWV0YWRhdGEte3tmaWxlQ291bnRlcn19IGFzc2VtYmx5LW1ldGFkYXRhLWJsb2NrIGhpZGUtdGhpc1wiPidcbiAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPidcbiAgICAgICAgICAgICAgICAgICAgKyAnPGxhYmVsIGZvcj1cImFzc2VtYmx5U2FtcGxlU291cmNlSW5wdXR7e2ZpbGVDb3VudGVyfX1cIj5XaGF0IGlzIHRoZSBzb3VyY2Ugb2YgdGhpcyBzYW1wbGU/PC9sYWJlbD4nXG4gICAgICAgICAgICAgICAgICAgICsgJzxzZWxlY3QgbmFtZT1cInNlbGVjdFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGFzc2VtYmx5LXNhbXBsZS1zb3VyY2UtaW5wdXRcIiBpZD1cImFzc2VtYmx5U2FtcGxlU291cmNlSW5wdXR7e2ZpbGVDb3VudGVyfX1cIj4nXG4gICAgICAgICAgICAgICAgICAgICAgKyAnPG9wdGlvbiB2YWx1ZT1cIjBcIiBzZWxlY3RlZD5DaG9vc2Ugc291cmNlPC9vcHRpb24+J1xuICAgICAgICAgICAgICAgICAgICAgICsgJzxvcHRpb24gdmFsdWU9XCIxXCI+SHVtYW48L29wdGlvbj4nXG4gICAgICAgICAgICAgICAgICAgICAgKyAnPG9wdGlvbiB2YWx1ZT1cIjJcIj5MaXZlc3RvY2s8L29wdGlvbj4nXG4gICAgICAgICAgICAgICAgICAgICAgKyAnPG9wdGlvbiB2YWx1ZT1cIjNcIj5CaW9zcGhlcmU8L29wdGlvbj4nXG4gICAgICAgICAgICAgICAgICAgICAgKyAnPG9wdGlvbiB2YWx1ZT1cIjRcIj5FbnZpcm9ubWVudDwvb3B0aW9uPidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC9zZWxlY3Q+J1xuICAgICAgICAgICAgICAgICsgJzwvZGl2PidcbiAgICAgICAgICAgICsgJzwvZGl2PicsXG5cbiAgICAgICAgICAgIC8vIFVJIHRlbXBsYXRlc1xuICAgICAgICAgICAgYXNzZW1ibHlDb250cm9sc0Zvcm1CbG9jayA9IFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmb3JtLWJsb2NrIGFzc2VtYmx5LW1ldGFkYXRhLXt7ZmlsZUNvdW50ZXJ9fSBoaWRlLXRoaXNcIj4nXG4gICAgICAgICAgICAgICAgKyAnPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBuZXh0LWFzc2VtYmx5LWJ1dHRvblwiIGNsYXNzPVwic2hvdy1uZXh0LWFzc2VtYmx5XCI+TmV4dCBlbXB0eSBtZXRhZGF0YTwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICArICcgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBjb3B5LW1ldGFkYXRhLXRvLWFsbC1lbXB0eS1hc3NlbWJsaWVzXCI+Q29weSB0byBhbGwgZW1wdHkgbWV0YWRhdGE8L2J1dHRvbj4nXG4gICAgICAgICAgICArICc8L2Rpdj4nLFxuICAgICAgICAgICAgYXNzZW1ibHlNZWF0YWRhdGFEb25lQmxvY2sgPSBcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZm9ybS1ibG9jayBhc3NlbWJseS1tZXRhZGF0YS17e2ZpbGVDb3VudGVyfX0gaGlkZS10aGlzXCI+J1xuICAgICAgICAgICAgICAgICsgJ1JlYWR5PyBDbGljayBcIlVwbG9hZFwiIGJ1dHRvbiB0byB1cGxvYWQgeW91ciBhc3NlbWJsaWVzIGFuZCBtZXRhZGF0YS4nXG4gICAgICAgICAgICArICc8L2Rpdj4nO1xuXG4gICAgICAgIC8vIEFwcGx5IHRlbXBsYXRlc1xuICAgICAgICBhc3NlbWJseVNhbXBsZURhdGV0aW1lRm9ybUJsb2NrID0gYXNzZW1ibHlTYW1wbGVEYXRldGltZUZvcm1CbG9jay5yZXBsYWNlKC97e2xpc3RPZlllYXJzfX0vZywgZ2VuZXJhdGVZZWFySHRtbEVsZW1lbnRzKDE5NDAsIDIwMTQpKTtcbiAgICAgICAgYXNzZW1ibHlTYW1wbGVEYXRldGltZUZvcm1CbG9jayA9IGFzc2VtYmx5U2FtcGxlRGF0ZXRpbWVGb3JtQmxvY2sucmVwbGFjZSgve3tsaXN0T2ZNb250aHN9fS9nLCBnZW5lcmF0ZU1vbnRoSHRtbEVsZW1lbnRzKCkpO1xuICAgICAgICBhc3NlbWJseVNhbXBsZURhdGV0aW1lRm9ybUJsb2NrID0gYXNzZW1ibHlTYW1wbGVEYXRldGltZUZvcm1CbG9jay5yZXBsYWNlKC97e2xpc3RPZkRheXN9fS9nLCBnZW5lcmF0ZURheUh0bWxFbGVtZW50cygpKTtcblxuICAgICAgICBhc3NlbWJseVNhbXBsZURhdGV0aW1lRm9ybUJsb2NrID0gYXNzZW1ibHlTYW1wbGVEYXRldGltZUZvcm1CbG9jay5yZXBsYWNlKC97e2ZpbGVDb3VudGVyfX0vZywgZmlsZUNvdW50ZXIpO1xuICAgICAgICBhc3NlbWJseVNhbXBsZUxvY2F0aW9uRm9ybUJsb2NrID0gYXNzZW1ibHlTYW1wbGVMb2NhdGlvbkZvcm1CbG9jay5yZXBsYWNlKC97e2ZpbGVDb3VudGVyfX0vZywgZmlsZUNvdW50ZXIpO1xuICAgICAgICBhc3NlbWJseVNhbXBsZVNvdXJjZUZvcm1CbG9jayA9IGFzc2VtYmx5U2FtcGxlU291cmNlRm9ybUJsb2NrLnJlcGxhY2UoL3t7ZmlsZUNvdW50ZXJ9fS9nLCBmaWxlQ291bnRlcik7XG4gICAgICAgIGFzc2VtYmx5Q29udHJvbHNGb3JtQmxvY2sgPSBhc3NlbWJseUNvbnRyb2xzRm9ybUJsb2NrLnJlcGxhY2UoL3t7ZmlsZUNvdW50ZXJ9fS9nLCBmaWxlQ291bnRlcik7XG4gICAgICAgIGFzc2VtYmx5TWVhdGFkYXRhRG9uZUJsb2NrID0gYXNzZW1ibHlNZWF0YWRhdGFEb25lQmxvY2sucmVwbGFjZSgve3tmaWxlQ291bnRlcn19L2csIGZpbGVDb3VudGVyKTtcblxuICAgICAgICB2YXIgJGFzc2VtYmx5U2FtcGxlRGF0ZXRpbWVGb3JtQmxvY2sgPSAkKGFzc2VtYmx5U2FtcGxlRGF0ZXRpbWVGb3JtQmxvY2spLFxuICAgICAgICAgICAgJGFzc2VtYmx5U2FtcGxlTG9jYXRpb25Gb3JtQmxvY2sgPSAkKGFzc2VtYmx5U2FtcGxlTG9jYXRpb25Gb3JtQmxvY2spLFxuICAgICAgICAgICAgJGFzc2VtYmx5U2FtcGxlU291cmNlRm9ybUJsb2NrID0gJChhc3NlbWJseVNhbXBsZVNvdXJjZUZvcm1CbG9jayksXG4gICAgICAgICAgICAkYXNzZW1ibHlDb250cm9sc0Zvcm1CbG9jayA9ICQoYXNzZW1ibHlDb250cm9sc0Zvcm1CbG9jayksXG4gICAgICAgICAgICAkYXNzZW1ibHlNZWF0YWRhdGFEb25lQmxvY2sgPSAkKGFzc2VtYmx5TWVhdGFkYXRhRG9uZUJsb2NrKTtcblxuICAgICAgICAkYXNzZW1ibHlNZXRhZGF0YUZvcm0uYXBwZW5kKCRhc3NlbWJseVNhbXBsZURhdGV0aW1lRm9ybUJsb2NrKTtcbiAgICAgICAgJGFzc2VtYmx5TWV0YWRhdGFGb3JtLmFwcGVuZCgkYXNzZW1ibHlTYW1wbGVMb2NhdGlvbkZvcm1CbG9jayk7XG4gICAgICAgICRhc3NlbWJseU1ldGFkYXRhRm9ybS5hcHBlbmQoJGFzc2VtYmx5U2FtcGxlU291cmNlRm9ybUJsb2NrKTtcblxuICAgICAgICAvLyBTaG93IGZvcm0gbmF2aWdhdGlvbiBidXR0b25zIG9ubHkgd2hlbiB5b3UncmUgYXQgdGhlIGxhc3QgYXNzZW1ibHlcbiAgICAgICAgLy8gVE8gRE86IEFwcGVuZCB0byAuYXNzZW1ibHktbWV0YWRhdGEgaW5zdGVhZCBvZiB0aGUgY2xhc3NsZXNzIGRpdlxuICAgICAgICBpZiAoZmlsZUNvdW50ZXIgPCBkcm9wcGVkRmlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAkYXNzZW1ibHlNZXRhZGF0YUZvcm0uYXBwZW5kKCRhc3NlbWJseUNvbnRyb2xzRm9ybUJsb2NrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vYXNzZW1ibHlNZXRhZGF0YUZvcm0uYXBwZW5kKGFzc2VtYmx5TWVhdGFkYXRhRG9uZUJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICAkYXNzZW1ibHlNZXRhZGF0YUZvcm1Db250YWluZXIuYXBwZW5kKCRhc3NlbWJseU1ldGFkYXRhRm9ybUhlYWRlcik7XG4gICAgICAgICRhc3NlbWJseU1ldGFkYXRhRm9ybUNvbnRhaW5lci5hcHBlbmQoJGFzc2VtYmx5TWV0YWRhdGFGb3JtKTtcblxuICAgICAgICAvLyBSRUZBQ1RPUiFcbiAgICAgICAgdmFyICRhc3NlbWJseU1ldGFkYXRhTGlzdEl0ZW0gPSAkKFxuICAgICAgICAgICAgLy8nPGxpIGNsYXNzPVwiYXNzZW1ibHktaXRlbSBhc3NlbWJseS1pdGVtLScgKyBmaWxlQ291bnRlciArICcgaGlkZS10aGlzXCIgZGF0YS1uYW1lPVwiJyArIGFzc2VtYmxpZXNbZmlsZUNvdW50ZXJdWyduYW1lJ10gKyAnXCIgaWQ9XCJhc3NlbWJseS1pdGVtLScgKyBmaWxlQ291bnRlciArICdcIj4nXG4gICAgICAgICAgICAnPGxpIGNsYXNzPVwiYXNzZW1ibHktaXRlbSBoaWRlLXRoaXNcIiBkYXRhLW5hbWU9XCInICsgYXNzZW1ibGllc1tmaWxlQ291bnRlcl1bJ25hbWUnXSArICdcIiBkYXRhLWZpbGUtaWQ9XCInICsgZmlsZUNvdW50ZXIgKyAnXCIgaWQ9XCJhc3NlbWJseS1tZXRhZGF0YS1pdGVtLScgKyBmaWxlQ291bnRlciArICdcIj4nXG4gICAgICAgICAgICArICc8L2xpPidcbiAgICAgICAgKTtcblxuICAgICAgICAkYXNzZW1ibHlNZXRhZGF0YUxpc3RJdGVtLmFwcGVuZCgkYXNzZW1ibHlNZXRhZGF0YUZvcm1Db250YWluZXIpO1xuICAgICAgICAkKCcuYXNzZW1ibHktbWV0YWRhdGEtbGlzdC1jb250YWluZXIgdWwnKS5hcHBlbmQoJGFzc2VtYmx5TWV0YWRhdGFMaXN0SXRlbSk7XG5cblxuICAgICAgICAvL2Fzc2VtYmx5TGlzdEl0ZW0uYXBwZW5kKGFzc2VtYmx5TWV0YWRhdGFGb3JtQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBBcHBlbmQgYXNzZW1ibHlcbiAgICAgICAgJCgnLmFzc2VtYmx5LWxpc3QtY29udGFpbmVyIHVsJykuYXBwZW5kKGFzc2VtYmx5TGlzdEl0ZW0pO1xuXG4gICAgICAgIC8vIERyYXcgTjUwIGNoYXJ0XG4gICAgICAgIGRyYXdONTBDaGFydChhc3NlbWJseU51Y2xlb3RpZGVTdW1zLCBhc3NlbWJseU41MCwgZmlsZUNvdW50ZXIpO1xuXG4gICAgICAgIC8vIFNob3cgZmlyc3QgYXNzZW1ibHlcbiAgICAgICAgLy8kKCcuYXNzZW1ibHktaXRlbS0xJykucmVtb3ZlQ2xhc3MoJ2hpZGUtdGhpcycpO1xuICAgICAgICAvLyQoJy5hc3NlbWJseS1pdGVtJykuZXEoJzAnKS5zaG93KCk7XG4gICAgICAgICQoJyNhc3NlbWJseS1pdGVtLTEnKS5zaG93KCk7XG4gICAgICAgICQoJyNhc3NlbWJseS1tZXRhZGF0YS1pdGVtLTEnKS5zaG93KCk7XG5cbiAgICAgICAgLy8gU2V0IGZpbGUgbmFtZSBpbiBtZXRhZGF0YSBwYW5lbCB0aXRsZVxuICAgICAgICAkKCcud2dzdC1wYW5lbF9fYXNzZW1ibHktdXBsb2FkLW1ldGFkYXRhIC5oZWFkZXItdGl0bGUgc21hbGwnKS50ZXh0KCQoJyNhc3NlbWJseS1tZXRhZGF0YS1pdGVtLTEnKS5hdHRyKCdkYXRhLW5hbWUnKSk7XG5cbiAgICAgICAgLy8gU2V0IGZpbGUgbmFtZSBpbiBhbmFseXRpY3MgcGFuZWwgdGl0bGVcbiAgICAgICAgJCgnLndnc3QtcGFuZWxfX2Fzc2VtYmx5LXVwbG9hZC1hbmFseXRpY3MgLmhlYWRlci10aXRsZSBzbWFsbCcpLnRleHQoJCgnI2Fzc2VtYmx5LWl0ZW0tMScpLmF0dHIoJ2RhdGEtbmFtZScpKTtcblxuICAgICAgICAvLyBTdG9yZSBkaXNwbGF5ZWQgZmFzdGEgZmlsZSBuYW1lXG4gICAgICAgIC8vc2VsZWN0ZWRGYXN0YUZpbGVOYW1lID0gJCgnLmFzc2VtYmx5LWl0ZW0tMScpLmF0dHIoJ2RhdGEtbmFtZScpO1xuICAgICAgICBzZWxlY3RlZEZhc3RhRmlsZU5hbWUgPSAkKCcuYXNzZW1ibHktaXRlbScpLmVxKCcwJykuYXR0cignZGF0YS1uYW1lJyk7XG5cbiAgICAgICAgLy8gSW5pdCBib290c3RyYXAgZGF0ZXRpbWVwaWNrZXJcbiAgICAgICAgLy8kKCcuYXNzZW1ibHktdXBsb2FkLXBhbmVsIC5hc3NlbWJseS1zYW1wbGUtZGF0ZXRpbWUtaW5wdXQnKS5kYXRldGltZXBpY2tlcigpO1xuICAgICAgICAvLyAkKCcjYXNzZW1ibHlTYW1wbGVEYXRldGltZUlucHV0JyArIGZpbGVDb3VudGVyKS5kYXRldGltZXBpY2tlcigpLm9uKCdkcC5jaGFuZ2UnLCBmdW5jdGlvbigpe1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ0RhdGV0aW1lIGNoYW5nZWQnKTtcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGNsb3N1cmUgdG8gc2F2ZSB2YWx1ZSBvZiBmaWxlTmFtZVxuICAgICAgICAoZnVuY3Rpb24oZmlsZU5hbWUpe1xuXG4gICAgICAgICAgICAvLyBHZXQgYXV0b2NvbXBsZXRlIGlucHV0IChqUXVlcnkpIGVsZW1lbnRcbiAgICAgICAgICAgIHZhciBhdXRvY29tcGxldGVJbnB1dCA9ICQoJy5hc3NlbWJseS1tZXRhZGF0YS1saXN0LWNvbnRhaW5lciBsaVtkYXRhLW5hbWU9XCInICsgZmlsZU5hbWUgKyAnXCJdIC5hc3NlbWJseS1zYW1wbGUtbG9jYXRpb24taW5wdXQnKTtcblxuICAgICAgICAgICAgLy8gSW5pdCBHb29sZ2UgTWFwcyBBUEkgUGxhY2VzIEF1dG9jb21wbGV0ZVxuICAgICAgICAgICAgLy8gVE8gRE86IFRoaXMgY3JlYXRlcyBuZXcgQXV0b2NvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBkcmFnIGFuZCBkcm9wIGZpbGUgLSBwb3NzaWJseSBuZWVkcyByZWZhY3RvcmluZy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cbiAgICAgICAgICAgIC8vV0dTVC5nZW8ubWV0YWRhdGFBdXRvY29tcGxldGVbZmlsZU5hbWVdID0gbmV3IGdvb2dsZS5tYXBzLnBsYWNlcy5BdXRvY29tcGxldGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Fzc2VtYmx5U2FtcGxlTG9jYXRpb25JbnB1dCcgKyBmaWxlQ291bnRlcikpO1xuICAgICAgICAgICAgLy8gWzBdIHJldHVybnMgbmF0aXZlIERPTSBlbGVtZW50OiBodHRwOi8vbGVhcm4uanF1ZXJ5LmNvbS91c2luZy1qcXVlcnktY29yZS9mYXEvaG93LWRvLWktcHVsbC1hLW5hdGl2ZS1kb20tZWxlbWVudC1mcm9tLWEtanF1ZXJ5LW9iamVjdC9cbiAgICAgICAgICAgIC8vV0dTVC5nZW8ubWV0YWRhdGFBdXRvY29tcGxldGVbZmlsZU5hbWVdID0gbmV3IGdvb2dsZS5tYXBzLnBsYWNlcy5BdXRvY29tcGxldGUoYXV0b2NvbXBsZXRlSW5wdXRbMF0pO1xuICAgICAgICAgICAgV0dTVC5nZW8ucGxhY2VTZWFyY2hCb3hbZmlsZU5hbWVdID0gbmV3IGdvb2dsZS5tYXBzLnBsYWNlcy5TZWFyY2hCb3goYXV0b2NvbXBsZXRlSW5wdXRbMF0sIHtcbiAgICAgICAgICAgICAgICBib3VuZHM6IFdHU1QuZ2VvLm1hcC5zZWFyY2hCb3hCb3VuZHNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBXaGVuIHRoZSB1c2VyIHNlbGVjdHMgYW4gYWRkcmVzcyBmcm9tIHRoZSBkcm9wZG93biwgZ2V0IGdlbyBjb29yZGluYXRlc1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vbWFwcy9kb2N1bWVudGF0aW9uL2phdmFzY3JpcHQvZXhhbXBsZXMvcGxhY2VzLWF1dG9jb21wbGV0ZS1hZGRyZXNzZm9ybVxuICAgICAgICAgICAgLy8gVE8gRE86IFJlbW92ZSB0aGlzIGV2ZW50IGxpc3RlbmVyIGFmdGVyIG1ldGFkYXRhIHdhcyBzZW50XG4gICAgICAgICAgICAvLyB2aWV3LXNvdXJjZTpodHRwOi8vcmF3Z2l0LmNvbS9rbG9rYW4vODQwODM5NC9yYXcvNWFiNzk1ZmIzNmM2N2FkNzNjMjE1MjY5ZjYxYzc2NDg2MzNhZTUzZS9wbGFjZXMtZW50ZXItZmlyc3QtaXRlbS5odG1sXG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihXR1NULmdlby5wbGFjZVNlYXJjaEJveFtmaWxlTmFtZV0sICdwbGFjZXNfY2hhbmdlZCcsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBwbGFjZSBkZXRhaWxzIGZyb20gdGhlIGF1dG9jb21wbGV0ZSBvYmplY3QuXG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlcyA9IFdHU1QuZ2VvLnBsYWNlU2VhcmNoQm94W2ZpbGVOYW1lXS5nZXRQbGFjZXMoKSxcbiAgICAgICAgICAgICAgICAgICAgcGxhY2UgPSBwbGFjZXNbMF07XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBsYWNlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgcGxhY2UuZ2VvbWV0cnkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGlyKFdHU1QuZ2VvLnBsYWNlU2VhcmNoQm94W2ZpbGVOYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcGxhY2UgaGFzIGEgZ2VvbWV0cnksIHRoZW4gcHJlc2VudCBpdCBvbiBhIG1hcFxuICAgICAgICAgICAgICAgIHZhciBsYXRpdHVkZSA9IHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLmxhdCgpLFxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGUgPSBwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbi5sbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkQWRkcmVzcyA9IHBsYWNlLmZvcm1hdHRlZF9hZGRyZXNzO1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBHb29nbGUgUGxhY2VzIEFQSSBmaXJzdCBTZWFyY2hCb3ggcGxhY2U6Jyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZm9ybWF0dGVkQWRkcmVzcyk7XG5cbiAgICAgICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgbWV0YWRhdGEgZm9ybVxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SW5wdXRFbGVtZW50ID0gJCgnLndnc3QtcGFuZWxfX2Fzc2VtYmx5LXVwbG9hZC1tZXRhZGF0YSAuYXNzZW1ibHktaXRlbVtkYXRhLW5hbWU9XCInICsgZmlsZU5hbWUgKyAnXCJdJykuZmluZCgnLmFzc2VtYmx5LXNhbXBsZS1sb2NhdGlvbi1pbnB1dCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2hvdyBuZXh0IGZvcm0gYmxvY2sgaWYgY3VycmVudCBpbnB1dCBoYXMgc29tZSB2YWx1ZVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50SW5wdXRFbGVtZW50LnZhbCgpLmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTaG93IG5leHQgbWV0YWRhdGEgZm9ybSBibG9ja1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5wdXRFbGVtZW50LmNsb3Nlc3QoJy5mb3JtLWJsb2NrJykubmV4dCgnLmZvcm0tYmxvY2snKS5mYWRlSW4oKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTY3JvbGwgdG8gdGhlIG5leHQgZm9ybSBibG9ja1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5wdXRFbGVtZW50LmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YScpLmFuaW1hdGUoe3Njcm9sbFRvcDogY3VycmVudElucHV0RWxlbWVudC5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEnKS5oZWlnaHQoKX0sIDQwMCk7XG4gICAgICAgICAgICAgICAgfSAvLyBpZlxuXG4gICAgICAgICAgICAgICAgLy8gSW5jcmVtZW50IG1ldGFkYXRhIHByb2dyZXNzIGJhclxuICAgICAgICAgICAgICAgIHVwZGF0ZU1ldGFkYXRhUHJvZ3Jlc3NCYXIoKTtcbiAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHdoYXRldmVyIHVzZXIgdHlwZWQgaW50byB0aGlzIGlucHV0IGJveCB3aXRoIGZvcm1hdHRlZCBhZGRyZXNzIHJldHVybmVkIGJ5IEdvb2dsZVxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbnB1dEVsZW1lbnQuYmx1cigpLnZhbChmb3JtYXR0ZWRBZGRyZXNzKTtcblxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBtYXAsIG1hcmtlciBhbmQgcHV0IG1ldGFkYXRhIGludG8gYXNzZW1ibHkgb2JqZWN0XG4gICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgLy8gU2V0IG1hcCBjZW50ZXIgdG8gc2VsZWN0ZWQgYWRkcmVzc1xuICAgICAgICAgICAgICAgIFdHU1QuZ2VvLm1hcC5jYW52YXMuc2V0Q2VudGVyKHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAvLyBTZXQgbWFwXG4gICAgICAgICAgICAgICAgV0dTVC5nZW8ubWFwLm1hcmtlcnMubWV0YWRhdGEuc2V0TWFwKFdHU1QuZ2VvLm1hcC5jYW52YXMpO1xuICAgICAgICAgICAgICAgIC8vIFNldCBtZXRhZGF0YSBtYXJrZXIncyBwb3NpdGlvbiB0byBzZWxlY3RlZCBhZGRyZXNzXG4gICAgICAgICAgICAgICAgV0dTVC5nZW8ubWFwLm1hcmtlcnMubWV0YWRhdGEuc2V0UG9zaXRpb24ocGxhY2UuZ2VvbWV0cnkubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgIC8vIFNob3cgbWV0YWRhdGEgbWFya2VyXG4gICAgICAgICAgICAgICAgV0dTVC5nZW8ubWFwLm1hcmtlcnMubWV0YWRhdGEuc2V0VmlzaWJsZSh0cnVlKTtcblxuICAgICAgICAgICAgICAgIFdHU1QudXBsb2FkLmFzc2VtYmx5W2ZpbGVOYW1lXSA9IFdHU1QudXBsb2FkLmFzc2VtYmx5W2ZpbGVOYW1lXSB8fCB7fTtcbiAgICAgICAgICAgICAgICBXR1NULnVwbG9hZC5hc3NlbWJseVtmaWxlTmFtZV0ubWV0YWRhdGEgPSBXR1NULnVwbG9hZC5hc3NlbWJseVtmaWxlTmFtZV0ubWV0YWRhdGEgfHwge307XG4gICAgICAgICAgICAgICAgV0dTVC51cGxvYWQuYXNzZW1ibHlbZmlsZU5hbWVdLm1ldGFkYXRhLmdlb2dyYXBoeSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogZm9ybWF0dGVkQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBsYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogbG9uZ2l0dWRlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9nZW9jb2RpbmcvI1R5cGVzXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHBsYWNlLnR5cGVzWzBdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyAvLyBPbiBjaGFuZ2Ugc3RvcmUgZGF0ZXRpbWUgaW4gYXNzZW1ibHkgbWV0YWRhdGFcbiAgICAgICAgICAgIC8vICQoJ2xpLmFzc2VtYmx5LWl0ZW1bZGF0YS1uYW1lPVwiJyArIGZpbGVOYW1lICsgJ1wiXSAuYXNzZW1ibHktc2FtcGxlLWRhdGV0aW1lLWlucHV0JykuZGF0ZXRpbWVwaWNrZXIoe1xuICAgICAgICAgICAgLy8gICAgIHVzZUN1cnJlbnQ6IGZhbHNlLFxuICAgICAgICAgICAgLy8gICAgIGxhbmd1YWdlOiAnZW4tZ2InXG4gICAgICAgICAgICAvLyB9KS5vbignY2hhbmdlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vICAgICBXR1NULnVwbG9hZC5hc3NlbWJseVtmaWxlTmFtZV0ubWV0YWRhdGEgPSBXR1NULnVwbG9hZC5hc3NlbWJseVtmaWxlTmFtZV0ubWV0YWRhdGEgfHwge307XG4gICAgICAgICAgICAvLyAgICAgV0dTVC51cGxvYWQuYXNzZW1ibHlbZmlsZU5hbWVdLm1ldGFkYXRhLmRhdGV0aW1lID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgICAgIC8vIH0pO1xuXG4gICAgICAgICAgICAvLyBPbiBjaGFuZ2Ugc3RvcmUgc291cmNlIGluIGFzc2VtYmx5IG1ldGFkYXRhXG4gICAgICAgICAgICAkKCdsaS5hc3NlbWJseS1pdGVtW2RhdGEtbmFtZT1cIicgKyBmaWxlTmFtZSArICdcIl0gLmFzc2VtYmx5LXNhbXBsZS1zb3VyY2UtaW5wdXQnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBXR1NULnVwbG9hZC5hc3NlbWJseVtmaWxlTmFtZV0ubWV0YWRhdGEgPSBXR1NULnVwbG9hZC5hc3NlbWJseVtmaWxlTmFtZV0ubWV0YWRhdGEgfHwge307XG4gICAgICAgICAgICAgICAgV0dTVC51cGxvYWQuYXNzZW1ibHlbZmlsZU5hbWVdLm1ldGFkYXRhLnNvdXJjZSA9ICQodGhpcykudmFsKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIH0oZmlsZS5uYW1lKSk7XG4gICAgXG4gICAgfTsgLy8gcGFyc2VGYXN0YUZpbGUoKVxuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGRyYXdONTBDaGFydFxuICAgICAqIEBwYXJhbSB7fSBjaGFydERhdGFcbiAgICAgKiBAcGFyYW0ge30gYXNzZW1ibHlONTBcbiAgICAgKiBAcGFyYW0ge30gZmlsZUNvdW50ZXJcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBkcmF3TjUwQ2hhcnQgPSBmdW5jdGlvbihjaGFydERhdGEsIGFzc2VtYmx5TjUwLCBmaWxlQ291bnRlcikge1xuXG4gICAgICAgIHZhciBjaGFydFdpZHRoID0gNDYwLFxuICAgICAgICAgICAgY2hhcnRIZWlnaHQgPSAzMTI7XG5cbiAgICAgICAgLy8gRXh0ZW50XG4gICAgICAgIHZhciB4RXh0ZW50ID0gZDMuZXh0ZW50KGNoYXJ0RGF0YSwgZnVuY3Rpb24oZGF0dW0pe1xuICAgICAgICAgICAgcmV0dXJuIGRhdHVtLnNlcXVlbmNlTGVuZ3RoO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTY2FsZXNcblxuICAgICAgICAvLyBYXG4gICAgICAgIHZhciB4U2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAgICAgLmRvbWFpbihbMCwgY2hhcnREYXRhLmxlbmd0aF0pXG4gICAgICAgICAgICAucmFuZ2UoWzQwLCBjaGFydFdpZHRoIC0gNTBdKTsgLy8gdGhlIHBpeGVscyB0byBtYXAsIGkuZS4gdGhlIHdpZHRoIG9mIHRoZSBkaWFncmFtXG5cbiAgICAgICAgLy8gWVxuICAgICAgICB2YXIgeVNjYWxlID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgIC5kb21haW4oW2NoYXJ0RGF0YVtjaGFydERhdGEubGVuZ3RoIC0gMV0sIDBdKVxuICAgICAgICAgICAgLnJhbmdlKFszMCwgY2hhcnRIZWlnaHQgLSA1Ml0pO1xuXG4gICAgICAgIC8vIEF4ZXNcblxuICAgICAgICAvLyBYXG4gICAgICAgIHZhciB4QXhpcyA9IGQzLnN2Zy5heGlzKClcbiAgICAgICAgICAgIC5zY2FsZSh4U2NhbGUpXG4gICAgICAgICAgICAub3JpZW50KCdib3R0b20nKVxuICAgICAgICAgICAgLnRpY2tzKDEwKTtcblxuICAgICAgICAvLyBZXG4gICAgICAgIHZhciB5QXhpcyA9IGQzLnN2Zy5heGlzKClcbiAgICAgICAgICAgIC5zY2FsZSh5U2NhbGUpXG4gICAgICAgICAgICAub3JpZW50KCdsZWZ0JylcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE4ODIyNzkzXG4gICAgICAgICAgICAudGlja3MoMTApO1xuXG4gICAgICAgIC8vIEFwcGVuZCBTVkcgdG8gRE9NXG4gICAgICAgIHZhciBzdmcgPSBkMy5zZWxlY3QoJy5zZXF1ZW5jZS1sZW5ndGgtZGlzdHJpYnV0aW9uLWNoYXJ0LScgKyBmaWxlQ291bnRlcilcbiAgICAgICAgICAgIC5hcHBlbmQoJ3N2ZycpXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCBjaGFydFdpZHRoKVxuICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGNoYXJ0SGVpZ2h0KTtcblxuICAgICAgICAvLyBBcHBlbmQgYXhpc1xuXG4gICAgICAgIC8vIFhcbiAgICAgICAgc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAneCBheGlzJylcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDIwLCAyNjApJylcbiAgICAgICAgICAgIC5jYWxsKHhBeGlzKTtcblxuICAgICAgICAvLyBZXG4gICAgICAgIHN2Zy5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3kgYXhpcycpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSg2MCwgMCknKVxuICAgICAgICAgICAgLmNhbGwoeUF4aXMpO1xuXG4gICAgICAgIC8vIEF4aXMgbGFiZWxzXG5cbiAgICAgICAgLy8gWFxuICAgICAgICBzdmcuc2VsZWN0KCcueC5heGlzJylcbiAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgLnRleHQoJ09yZGVyZWQgY29udGlncycpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnYXhpcy1sYWJlbCcpXG4gICAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnZW5kJylcbiAgICAgICAgICAgIC5hdHRyKCd4JywgKGNoYXJ0V2lkdGggLyAyKSArIDQ5KVxuICAgICAgICAgICAgLmF0dHIoJ3knLCA0NSk7XG5cbiAgICAgICAgLy8gWVxuICAgICAgICBzdmcuc2VsZWN0KCcueS5heGlzJylcbiAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgLnRleHQoJ051Y2xlb3RpZGVzIHN1bScpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnYXhpcy1sYWJlbCcpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3JvdGF0ZSgtOTApJylcbiAgICAgICAgICAgIC5hdHRyKCd4JywgLShjaGFydEhlaWdodCAvIDIpIC0gNDQpXG4gICAgICAgICAgICAuYXR0cigneScsIDM5OCk7XG5cbiAgICAgICAgLy8gQ2lyY2xlc1xuICAgICAgICBzdmcuc2VsZWN0QWxsKCdjaXJjbGUnKVxuICAgICAgICAgICAgLmRhdGEoY2hhcnREYXRhKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAgICAgICAuYXR0cignY3gnLCBmdW5jdGlvbihkYXR1bSwgaW5kZXgpe1xuICAgICAgICAgICAgICAgIHJldHVybiB4U2NhbGUoaW5kZXggKyAxKSArIDIwO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKCdjeScsIGZ1bmN0aW9uKGRhdHVtKXtcbiAgICAgICAgICAgICAgICByZXR1cm4geVNjYWxlKGRhdHVtKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cigncicsIDUpO1xuXG4gICAgICAgIC8vIExpbmVcbiAgICAgICAgdmFyIGxpbmUgPSBkMy5zdmcubGluZSgpXG4gICAgICAgICAgIC8vLmludGVycG9sYXRlKFwiYmFzaXNcIilcbiAgICAgICAgICAgLngoZnVuY3Rpb24oZGF0dW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShpbmRleCArIDEpICsgMjA7IFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgLnkoZnVuY3Rpb24oZGF0dW0pIHsgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHlTY2FsZShkYXR1bSk7IFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgc3ZnLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgICAuYXR0cignZCcsIGxpbmUoY2hhcnREYXRhKSk7XG5cbiAgICAgICAgLy8gRHJhdyBsaW5lIGZyb20gKDAsMCkgdG8gZDMubWF4KGRhdGEpXG4gICAgICAgIHZhciByb290TGluZURhdGEgPSBbe1xuICAgICAgICAgICAgJ3gnOiB4U2NhbGUoMCkgKyAyMCxcbiAgICAgICAgICAgICd5JzogeVNjYWxlKDApXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgICd4JzogeFNjYWxlKDEpICsgMjAsXG4gICAgICAgICAgICAneSc6IHlTY2FsZShjaGFydERhdGFbMF0pXG4gICAgICAgIH1dO1xuXG4gICAgICAgIHZhciByb290TGluZSA9IGQzLnN2Zy5saW5lKClcbiAgICAgICAgICAgIC54KGZ1bmN0aW9uKGRhdHVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdHVtLng7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnkoZnVuY3Rpb24oZGF0dW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0dW0ueTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuaW50ZXJwb2xhdGUoXCJsaW5lYXJcIik7XG5cbiAgICAgICAgdmFyIHJvb3RQYXRoID0gc3ZnLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgICAuYXR0cignZCcsIHJvb3RMaW5lKHJvb3RMaW5lRGF0YSkpO1xuXG4gICAgICAgIC8vIERyYXcgTjUwXG5cbi8qICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoJy5uNTAtY2lyY2xlJylcbiAgICAgICAgICAgIC5kYXRhKFtuNTBdKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAgICAgICAuYXR0cignY3gnLCBmdW5jdGlvbihkYXR1bSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShkYXR1bS5pbmRleCkgKyAyMDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cignY3knLCBmdW5jdGlvbihkYXR1bSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlTY2FsZShkYXR1bS5zdW0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKCdyJywgNilcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICduNTAtY2lyY2xlJykqL1xuXG4gICAgICAgIC8vIEdyb3VwIGNpcmNsZSBhbmQgdGV4dCBlbGVtZW50c1xuICAgICAgICB2YXIgbjUwR3JvdXAgPSBzdmcuc2VsZWN0QWxsKCcubjUwLWNpcmNsZScpXG4gICAgICAgICAgICAuZGF0YShbYXNzZW1ibHlONTBdKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ241MC1ncm91cCcpO1xuXG4gICAgICAgIC8vIEFwcGVuZCBjaXJjbGUgdG8gZ3JvdXBcbiAgICAgICAgdmFyIG41MENpcmNsZSA9IG41MEdyb3VwLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgICAgICAgIC5hdHRyKCdjeCcsIGZ1bmN0aW9uKGRhdHVtKXtcbiAgICAgICAgICAgICAgICByZXR1cm4geFNjYWxlKGRhdHVtLnNlcXVlbmNlTnVtYmVyKSArIDIwO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKCdjeScsIGZ1bmN0aW9uKGRhdHVtKXtcbiAgICAgICAgICAgICAgICByZXR1cm4geVNjYWxlKGRhdHVtLnN1bSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoJ3InLCA2KTtcbiAgICAgICAgICAgIC8vLmF0dHIoJ2NsYXNzJywgJ241MC1jaXJjbGUnKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFwcGVuZCB0ZXh0IHRvIGdyb3VwXG4gICAgICAgIG41MEdyb3VwLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAuYXR0cignZHgnLCBmdW5jdGlvbihkYXR1bSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShkYXR1bS5zZXF1ZW5jZU51bWJlcikgKyAyMCArIDk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoJ2R5JywgZnVuY3Rpb24oZGF0dW0pe1xuICAgICAgICAgICAgICAgIHJldHVybiB5U2NhbGUoZGF0dW0uc3VtKSArIDU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCAncmlnaHQnKVxuICAgICAgICAgICAgLnRleHQoJ041MCcpO1xuICAgICAgICAgICAgICAgIC8vLmF0dHIoJ2NsYXNzJywgJ241MC10ZXh0Jyk7XG5cbiAgICAgICAgLy8gRHJhdyBONTAgbGluZXNcbiAgICAgICAgdmFyIGQ1MExpbmVzRGF0YSA9IFt7XG4gICAgICAgICAgICAneCc6IDU0LFxuICAgICAgICAgICAgJ3knOiB5U2NhbGUoYXNzZW1ibHlONTAuc3VtKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAneCc6IHhTY2FsZShhc3NlbWJseU41MC5zZXF1ZW5jZU51bWJlcikgKyAyMCxcbiAgICAgICAgICAgICd5JzogeVNjYWxlKGFzc2VtYmx5TjUwLnN1bSlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgJ3gnOiB4U2NhbGUoYXNzZW1ibHlONTAuc2VxdWVuY2VOdW1iZXIpICsgMjAsXG4gICAgICAgICAgICAneSc6IGNoYXJ0SGVpZ2h0IC0gNDZcbiAgICAgICAgfV07XG5cbiAgICAgICAgdmFyIGQ1MExpbmUgPSBkMy5zdmcubGluZSgpXG4gICAgICAgICAgICAueChmdW5jdGlvbihkYXR1bSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXR1bS54O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC55KGZ1bmN0aW9uKGRhdHVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdHVtLnk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmludGVycG9sYXRlKFwibGluZWFyXCIpO1xuXG4gICAgICAgIC8vIE41MCBwYXRoXG4gICAgICAgIG41MEdyb3VwLmFwcGVuZCgncGF0aCcpLmF0dHIoJ2QnLCBkNTBMaW5lKGQ1MExpbmVzRGF0YSkpO1xuXG4gICAgfTtcblxuICAgIHZhciBjc3ZGaWxlVHlwZVJlZ2V4ID0gL2Nzdi87XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgaGFuZGxlRHJhZ092ZXJcbiAgICAgKiBAcGFyYW0ge30gZXZlbnRcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBoYW5kbGVEcmFnT3ZlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdjb3B5JzsgLy8gRXhwbGljaXRseSBzaG93IHRoaXMgaXMgYSBjb3B5XG4gICAgfTtcblxuICAgIHZhciBoYW5kbGVGYXN0YURyb3AgPSBmdW5jdGlvbihmaWxlKSB7XG5cbiAgICB9O1xuXG4gICAgdmFyIGhhbmRsZUNzdkRyb3AgPSBmdW5jdGlvbihmaWxlKSB7XG5cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGhhbmRsZURyb3BcbiAgICAgKiBAcGFyYW0ge30gZXZlbnRcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBoYW5kbGVEcm9wID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgLy8gT25seSBoYW5kbGUgZmlsZSBkcm9wc1xuICAgICAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyLmZpbGVzLmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbklkID0gJyc7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHVzZXIgZHJhZyBhbmQgZHJvcHMgdG8gdGhlIGV4aXN0aW5nIGNvbGxlY3Rpb25cbiAgICAgICAgICAgIGlmIChpc1BhbmVsQWN0aXZlKCdjb2xsZWN0aW9uJykpIHtcblxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZCA9ICQoJy53Z3N0LXBhbmVsX19jb2xsZWN0aW9uJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyk7XG4gICAgICAgICAgICAgICAgJCgnLndnc3QtcGFuZWxfX2Fzc2VtYmx5LXVwbG9hZC1uYXZpZ2F0b3InKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnLCBjb2xsZWN0aW9uSWQpO1xuICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVQYW5lbCgnY29sbGVjdGlvbicpO1xuICAgICAgICAgICAgICAgIGNsZWFyQ29sbGVjdGlvbkFzc2VtYmx5TGlzdChjb2xsZWN0aW9uSWQpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzRnVsbHNjcmVlbkFjdGl2ZSgnY29sbGVjdGlvbicpKSB7XG5cbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uSWQgPSAkKCcud2dzdC1mdWxsc2NyZWVuX19jb2xsZWN0aW9uIC53Z3N0LWNvbGxlY3Rpb24nKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKTtcbiAgICAgICAgICAgICAgICAkKCcud2dzdC1wYW5lbF9fYXNzZW1ibHktdXBsb2FkLW5hdmlnYXRvcicpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi1pZCcsIGNvbGxlY3Rpb25JZCk7XG4gICAgICAgICAgICAgICAgY2xlYXJDb2xsZWN0aW9uQXNzZW1ibHlMaXN0KGNvbGxlY3Rpb25JZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTaG93IGZ1bGxzY3JlZW4gbWFwXG4gICAgICAgICAgICAgICAgYnJpbmdNYXBQYW5lbFRvRnVsbHNjcmVlbignbWFwJywgJ21hcCcpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghIGlzUGFuZWxBY3RpdmUoJ2Fzc2VtYmx5VXBsb2FkTmF2aWdhdG9yJykpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmF0ZVBhbmVsKCdhc3NlbWJseVVwbG9hZE5hdmlnYXRvcicpO1xuICAgICAgICAgICAgICAgIHNob3dQYW5lbCgnYXNzZW1ibHlVcGxvYWROYXZpZ2F0b3InKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEgaXNQYW5lbEFjdGl2ZSgnYXNzZW1ibHlVcGxvYWRBbmFseXRpY3MnKSkge1xuICAgICAgICAgICAgICAgIGFjdGl2YXRlUGFuZWwoJ2Fzc2VtYmx5VXBsb2FkQW5hbHl0aWNzJyk7XG4gICAgICAgICAgICAgICAgc2hvd1BhbmVsKCdhc3NlbWJseVVwbG9hZEFuYWx5dGljcycpO1xuICAgICAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgICAgIGlmICghIGlzUGFuZWxBY3RpdmUoJ2Fzc2VtYmx5VXBsb2FkTWV0YWRhdGEnKSkge1xuICAgICAgICAgICAgICAgIGFjdGl2YXRlUGFuZWwoJ2Fzc2VtYmx5VXBsb2FkTWV0YWRhdGEnKTtcbiAgICAgICAgICAgICAgICBzaG93UGFuZWwoJ2Fzc2VtYmx5VXBsb2FkTWV0YWRhdGEnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBoaWdoZXN0IHogaW5kZXggZm9yIHRoaXMgcGFuZWxcbiAgICAgICAgICAgICQoJy5hc3NlbWJseS11cGxvYWQtcGFuZWwnKS50cmlnZ2VyKCdtb3VzZWRvd24nKTtcblxuICAgICAgICAgICAgaWYgKFdHU1Quc3BlYWspIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVRleHQgPSAnJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTtcblxuICAgICAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uSWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVGV4dCA9ICdZb3UgaGF2ZSBkcm9wcGVkICcgKyAgZXZlbnQuZGF0YVRyYW5zZmVyLmZpbGVzLmxlbmd0aCArICcgZmlsZXMgdG8gdGhlIGV4aXN0aW5nIGNvbGxlY3Rpb24uJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVGV4dCA9ICdZb3UgaGF2ZSBkcm9wcGVkICcgKyAgZXZlbnQuZGF0YVRyYW5zZmVyLmZpbGVzLmxlbmd0aCArICcgZmlsZXMnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlKG1lc3NhZ2VUZXh0KTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnNwZWFrKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGaWxlTGlzdCBvYmplY3RcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlTGlzdFxuICAgICAgICAgICAgdmFyIGRyb3BwZWRGaWxlcyA9IGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlcztcblxuICAgICAgICAgICAgV0dTVC5kcmFnQW5kRHJvcC5maWxlcyA9ICQubWVyZ2UoV0dTVC5kcmFnQW5kRHJvcC5maWxlcywgZHJvcHBlZEZpbGVzKTtcblxuICAgICAgICAgICAgdmFyIGFsbERyb3BwZWRGaWxlcyA9IFdHU1QuZHJhZ0FuZERyb3AuZmlsZXMsXG4gICAgICAgICAgICAgICAgLy8gQSBzaW5nbGUgZmlsZSBmcm9tIEZpbGVMaXN0IG9iamVjdFxuICAgICAgICAgICAgICAgIGZpbGUgPSBhbGxEcm9wcGVkRmlsZXNbMF0sXG4gICAgICAgICAgICAgICAgLy8gRmlsZSBuYW1lIGlzIHVzZWQgZm9yIGluaXRpYWwgdXNlciBhc3NlbWJseSBpZFxuICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gZmlsZS5uYW1lLFxuICAgICAgICAgICAgICAgIC8vIENvdW50IGZpbGVzXG4gICAgICAgICAgICAgICAgLy9maWxlQ291bnRlciA9IDAsXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZpbGVSZWFkZXJcbiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBkcm9wcGVkIG9ubHkgMSBhc3NlbWJseVxuICAgICAgICAgICAgaWYgKGFsbERyb3BwZWRGaWxlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBIaWRlIGF2ZXJhZ2UgbnVtYmVyIG9mIGNvbnRpZ3MgcGVyIGFzc2VtYmx5XG4gICAgICAgICAgICAgICAgJCgnLnVwbG9hZC1tdWx0aXBsZS1hc3NlbWJsaWVzLWxhYmVsJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIC8vIFNldCBmaWxlIG5hbWUgb2YgZHJvcHBlZCBmaWxlXG4gICAgICAgICAgICAgICAgJCgnLnVwbG9hZC1zaW5nbGUtYXNzZW1ibHktZmlsZS1uYW1lJykudGV4dChmaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgLy8gU2hvdyBzaW5nbGUgYXNzZW1ibHkgdXBsb2FkIGxhYmVsXG4gICAgICAgICAgICAgICAgJCgnLnVwbG9hZC1zaW5nbGUtYXNzZW1ibHktbGFiZWwnKS5zaG93KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEhpZGUgdGV4dCB0aGF0IGJlbG9uZ3MgdG8gYSBzaW5nbGUgYXNzZW1ibHkgdXBsb2FkIHN1bW1hcnlcbiAgICAgICAgICAgICAgICAkKCcudXBsb2FkLXNpbmdsZS1hc3NlbWJseS1sYWJlbCcpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAvLyBTaG93IG11bHRpcGxlIGFzc2VtYmxpZXMgdXBsb2FkIGxhYmVsXG4gICAgICAgICAgICAgICAgJCgnLnVwbG9hZC1tdWx0aXBsZS1hc3NlbWJsaWVzLWxhYmVsJykuc2hvdygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbml0IGFzc2VtYmx5IG5hdmlnYXRvclxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgbnVtYmVyIG9mIGFzc2VtYmxpZXNcbiAgICAgICAgICAgICQoJy50b3RhbC1udW1iZXItb2YtZHJvcHBlZC1hc3NlbWJsaWVzJykudGV4dChhbGxEcm9wcGVkRmlsZXMubGVuZ3RoKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIGFzc2VtYmx5IGxpc3Qgc2xpZGVyXG4gICAgICAgICAgICAkKCcuYXNzZW1ibHktbGlzdC1zbGlkZXInKS5zbGlkZXIoXCJvcHRpb25cIiwgXCJtYXhcIiwgYWxsRHJvcHBlZEZpbGVzLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIC8vIFNldCBmaWxlIG5hbWVcbiAgICAgICAgICAgICQoJy5hc3NlbWJseS1maWxlLW5hbWUnKS50ZXh0KGZpbGVOYW1lKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbW9yZSB0aGFuIDEgZmlsZSBkcm9wcGVkIHRoZW4gc2hvdyBhc3NlbWJseSBuYXZpZ2F0b3JcbiAgICAgICAgICAgIGlmIChhbGxEcm9wcGVkRmlsZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIC8vIFNob3cgYXNzZW1ibHkgbmF2aWdhdG9yXG4gICAgICAgICAgICAgICAgJCgnLmFzc2VtYmx5LW5hdmlnYXRvcicpLnNob3coKTtcbiAgICAgICAgICAgICAgICAvLyBGb2N1cyBvbiBzbGlkZXIgaGFuZGxlXG4gICAgICAgICAgICAgICAgJCgnLnVpLXNsaWRlci1oYW5kbGUnKS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkLmVhY2goYWxsRHJvcHBlZEZpbGVzLCBmdW5jdGlvbihmaWxlQ291bnRlciwgZmlsZSl7XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZpbGVMaXN0I2l0ZW0oKVxuXG4gICAgICAgICAgICAgICAgaWYgKGZpbGUudHlwZS5tYXRjaChjc3ZGaWxlVHlwZVJlZ2V4KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRHJvcHBlZCBDU1YgZmlsZScpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRpcihmaWxlKTtcblxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVDc3ZEcm9wKGZpbGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEcm9wcGVkIGZpbGUgdHlwZTogJyArIGZpbGUudHlwZSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5kaXIoZmlsZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSBmaWxlIG5hbWUgICBcbiAgICAgICAgICAgICAgICBpZiAoZmlsZS5uYW1lLm1hdGNoKFdHU1QuZHJhZ0FuZERyb3AuZmFzdGFGaWxlTmFtZVJlZ2V4KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJCgnLndnc3QtcGFuZWxfX2Fzc2VtYmx5LXVwbG9hZC1hbmFseXRpY3MgLmFzc2VtYmx5LWl0ZW1bZGF0YS1uYW1lPVwiJyArIGZpbGUubmFtZSArICdcIl0nKS5sZW5ndGggPT09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGNsb3N1cmUgKG5ldyBzY29wZSkgdG8gc2F2ZSBmaWxlQ291bnRlciwgZmlsZSB2YXJpYWJsZSB3aXRoIGl0J3MgY3VycmVudCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8oZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmFzdGFGaWxlKGV2ZW50LCBmaWxlQ291bnRlciwgZmlsZSwgZHJvcHBlZEZpbGVzLCBjb2xsZWN0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVhZCBmaWxlIGFzIHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL30pKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSAvLyBpZlxuICAgICAgICAgICAgICAgIC8vIEludmFsaWQgZmlsZSBuYW1lXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJbV0dTVF0gRmlsZSBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgbnVtYmVyIG9mIGFzc2VtYmxpZXMgdG8gdXBsb2FkXG4gICAgICAgICAgICAkKCcuYXNzZW1ibHktdXBsb2FkLXRvdGFsLW51bWJlcicpLnRleHQoYWxsRHJvcHBlZEZpbGVzLmxlbmd0aCk7XG4gICAgICAgICAgICAvLyBVcGRhdGUgbGFibGUgZm9yIHRvdGFsIG51bWJlciBvZiBhc3NlbWJsaWVzIHRvIHVwbG9hZFxuICAgICAgICAgICAgJCgnLmFzc2VtYmx5LXVwbG9hZC10b3RhbC1udW1iZXItbGFiZWwnKS5odG1sKChhbGxEcm9wcGVkRmlsZXMubGVuZ3RoID09PSAxID8gJ2Fzc2VtYmx5JzogJ2Fzc2VtYmxpZXMnKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gTGlzdGVuIHRvIGRyYWdvdmVyIGFuZCBkcm9wIGV2ZW50c1xuICAgIGRyb3Bab25lLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgaGFuZGxlRHJhZ092ZXIsIGZhbHNlKTtcbiAgICBkcm9wWm9uZS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgICAgU2VxdWVuY2UgbGlzdCBuYXZpZ2F0aW9uIGJ1dHRvbnNcbiAgICAqL1xuICAgIC8vIERpc2FibGUvZW5hYmxlIHJhbmdlIG5hdmlnYXRpb24gYnV0dG9uc1xuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCB1cGRhdGVSYW5nZU5hdmlnYXRpb25CdXR0b25zXG4gICAgICogQHBhcmFtIHt9IGhhbmRsZVZhbHVlXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlUmFuZ2VOYXZpZ2F0aW9uQnV0dG9ucyA9IGZ1bmN0aW9uKGhhbmRsZVZhbHVlKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBzZXF1ZW5jZSBuYXZpZ2F0aW9uIGJ1dHRvbnNcbiAgICAgICAgaWYgKGhhbmRsZVZhbHVlID09PSAxKSB7IC8vIFJlYWNoZWQgbWluIGxpbWl0XG4gICAgICAgICAgICAvLyBEaXNhYmxlIHByZXYgc2VxdWVuY2UgYnV0dG9uXG4gICAgICAgICAgICAkKCcubmF2LXByZXYtaXRlbScpLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAvLyBFbmFibGUgbmV4dCBzZXF1ZW5jZSBidXR0b24gKGlmIGRpc2FibGVkKVxuICAgICAgICAgICAgJCgnLm5hdi1uZXh0LWl0ZW0nKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZVZhbHVlID09PSBwYXJzZUludCgkKCcudG90YWwtbnVtYmVyLW9mLWRyb3BwZWQtYXNzZW1ibGllcycpLnRleHQoKSkpIHsgLy8gUmVhY2hlZCBtYXggbGltaXRcbiAgICAgICAgICAgIC8vIERpc2FibGUgbmV4dCBzZXF1ZW5jZSBidXR0b25cbiAgICAgICAgICAgICQoJy5uYXYtbmV4dC1pdGVtJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIC8vIEVuYWJsZSBwcmV2IHNlcXVlbmNlIGJ1dHRvbiAoaWYgZGlzYWJsZWQpXG4gICAgICAgICAgICAkKCcubmF2LXByZXYtaXRlbScpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBFbmFibGUgYm90aCBidXR0b25zIChpZiBhbnkgZGlzYWJsZWQpXG4gICAgICAgICAgICAkKCcubmF2LW5leHQtaXRlbScpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAkKCcubmF2LXByZXYtaXRlbScpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCB1cGRhdGVTZWxlY3RlZEZpbGVzVUlcbiAgICAgKiBAcGFyYW0ge30gZWxlbWVudENvdW50ZXJcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciB1cGRhdGVTZWxlY3RlZEZpbGVzVUkgPSBmdW5jdGlvbihlbGVtZW50Q291bnRlcikge1xuICAgICAgICAvLyBVcGRhdGUgc2VxdWVuY2UgY291bnRlciBsYWJlbFxuICAgICAgICAkKCcuc2VsZWN0ZWQtYXNzZW1ibHktY291bnRlcicpLnRleHQoZWxlbWVudENvdW50ZXIpO1xuICAgICAgICAvLyBVcGRhdGUgc2VxdWVuY2UgbGlzdCBpdGVtIGNvbnRlbnRcbiAgICAgICAgLy8gSGlkZSBhbGwgc2VxdWVuY2VzXG4gICAgICAgICQoJy5hc3NlbWJseS1pdGVtJykuaGlkZSgpO1xuICAgICAgICAvLyBTaG93IHNlbGVjdGVkIHNlcXVlbmNlXG4gICAgICAgIC8vJCgnLmFzc2VtYmx5LWl0ZW0tJyArIHVpLnZhbHVlKS5zaG93KCk7XG4gICAgICAgIC8vJCgnLmFzc2VtYmx5LWl0ZW0nKS5lcShlbGVtZW50Q291bnRlciAtIDEpLnNob3coKTsgLy8gQ29udmVydCBvbmUtYmFzZWQgaW5kZXggdG8gemVyby1iYXNlZCBpbmRleCB1c2VkIGJ5IC5lcSgpXG5cbiAgICAgICAgLy8gQW5hbHl0aWNzXG4gICAgICAgIHZhciBzZWxlY3RlZEZhc3RhRmlsZUVsZW1lbnQgPSAkKCcjYXNzZW1ibHktaXRlbS0nICsgZWxlbWVudENvdW50ZXIpO1xuICAgICAgICBzZWxlY3RlZEZhc3RhRmlsZUVsZW1lbnQuc2hvdygpO1xuXG4gICAgICAgIC8vIE1ldGFkYXRhXG4gICAgICAgIHZhciBzZWxlY3RlZEZhc3RhRmlsZUVsZW1lbnRNZXRhZGF0YSA9ICQoJyNhc3NlbWJseS1tZXRhZGF0YS1pdGVtLScgKyBlbGVtZW50Q291bnRlcik7XG4gICAgICAgIHNlbGVjdGVkRmFzdGFGaWxlRWxlbWVudE1ldGFkYXRhLnNob3coKTtcblxuICAgICAgICAvLyBVcGRhdGUgYXNzZW1ibHkgZmlsZSBuYW1lXG4gICAgICAgIHZhciBmaWxlTmFtZSA9ICQoJy5hc3NlbWJseS1pdGVtJykuZXEoZWxlbWVudENvdW50ZXIgLSAxKS5hdHRyKCdkYXRhLW5hbWUnKTtcblxuICAgICAgICAvLyBVcGRhdGUgZmlsZSBuYW1lIGluIEFzc2VtYmx5IFVwbG9hZCBOYXZpZ2F0b3JcbiAgICAgICAgJCgnLndnc3QtcGFuZWxfX2Fzc2VtYmx5LXVwbG9hZC1uYXZpZ2F0b3IgLmFzc2VtYmx5LWZpbGUtbmFtZScpLnRleHQoZmlsZU5hbWUpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBmaWxlIG5hbWUgaW4gQXNzZW1ibHkgVXBsb2FkIE1ldGFkYXRhIHBhbmVsXG4gICAgICAgICQoJy53Z3N0LXBhbmVsX19hc3NlbWJseS11cGxvYWQtbWV0YWRhdGEgLmhlYWRlci10aXRsZSBzbWFsbCcpLnRleHQoZmlsZU5hbWUpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBmaWxlIG5hbWUgaW4gQXNzZW1ibHkgVXBsb2FkIEFuYWx5dGljcyBwYW5lbFxuICAgICAgICAkKCcud2dzdC1wYW5lbF9fYXNzZW1ibHktdXBsb2FkLWFuYWx5dGljcyAuaGVhZGVyLXRpdGxlIHNtYWxsJykudGV4dChmaWxlTmFtZSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHNlcXVlbmNlIGNvdW50ZXIgbGFiZWxcbiAgICAgICAgdXBkYXRlUmFuZ2VOYXZpZ2F0aW9uQnV0dG9ucyhlbGVtZW50Q291bnRlcik7XG4gICAgICAgIC8vIFN0b3JlIGRpc3BsYXllZCBmYXN0YSBmaWxlIG5hbWVcbiAgICAgICAgLy9zZWxlY3RlZEZhc3RhRmlsZU5hbWUgPSAkKCcuYXNzZW1ibHktaXRlbScpLmVxKGVsZW1lbnRDb3VudGVyIC0gMSkuYXR0cignZGF0YS1uYW1lJyk7IFxuICAgICAgICBzZWxlY3RlZEZhc3RhRmlsZU5hbWUgPSBzZWxlY3RlZEZhc3RhRmlsZUVsZW1lbnQuYXR0cignZGF0YS1uYW1lJyk7IFxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgcmVzZXRQYW5lbEFzc2VtYmx5VXBsb2FkTmF2aWdhdG9yXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgcmVzZXRQYW5lbEFzc2VtYmx5VXBsb2FkTmF2aWdhdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwYW5lbCA9ICQoJy53Z3N0LXBhbmVsX19hc3NlbWJseS11cGxvYWQtbmF2aWdhdG9yJyk7XG4gICAgICAgIC8vIFNldCBhdmVyYWdlIG51bWJlciBvZiBjb250aWdzIHBlciBhc3NlbWJseVxuICAgICAgICBwYW5lbC5maW5kKCcuYXNzZW1ibHktc2VxdWVuY2VzLWF2ZXJhZ2UnKS50ZXh0KCcwJyk7XG4gICAgICAgIC8vIFNldCB0b3RhbCBudW1iZXIgb2Ygc2VsZWN0ZWQgYXNzZW1ibGllcy9maWxlc1xuICAgICAgICBwYW5lbC5maW5kKCcuYXNzZW1ibHktdXBsb2FkLXRvdGFsLW51bWJlcicpLnRleHQoJzAnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIHJlc2V0UGFuZWxBc3NlbWJseVVwbG9hZFByb2dyZXNzXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgcmVzZXRQYW5lbEFzc2VtYmx5VXBsb2FkUHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBhbmVsID0gJCgnLndnc3QtcGFuZWxfX2Fzc2VtYmx5LXVwbG9hZC1wcm9ncmVzcycpO1xuICAgICAgICBwYW5lbC5maW5kKCcuYXNzZW1ibGllcy11cGxvYWQtcHJvZ3Jlc3MgLnByb2dyZXNzLWJhcicpLmF0dHIoJ2NsYXNzJywgJ3Byb2dyZXNzLWJhcicpLmF0dHIoJ2FyaWEtdmFsdWVub3cnLCAnMCcpO1xuICAgICAgICBwYW5lbC5maW5kKCcuYXNzZW1ibGllcy11cGxvYWQtcHJvZ3Jlc3MgLnByb2dyZXNzLWJhcicpLmF0dHIoJ3N0eWxlJywgJ3dpZHRoOiAwJScpO1xuICAgICAgICBwYW5lbC5maW5kKCcuYXNzZW1ibGllcy11cGxvYWQtcHJvZ3Jlc3MgLnByb2dyZXNzLWJhcicpLmh0bWwoJycpO1xuICAgICAgICBwYW5lbC5maW5kKCcuYXNzZW1ibGllcy11cGxvYWQtcHJvZ3Jlc3MgLmFzc2VtYmxpZXMtdXBsb2FkLXByb2Nlc3NlZCcpLmh0bWwoJzAnKTtcbiAgICAgICAgcGFuZWwuZmluZCgnLmFzc2VtYmx5LWxpc3QtdXBsb2FkLXByb2dyZXNzIHRib2R5JykuaHRtbCgnJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCByZXNldFBhbmVsQXNzZW1ibHlVcGxvYWRNZXRhZGF0YVxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIHJlc2V0UGFuZWxBc3NlbWJseVVwbG9hZE1ldGFkYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwYW5lbCA9ICQoJy53Z3N0LXBhbmVsX19hc3NlbWJseS11cGxvYWQtbWV0YWRhdGEnKTtcblxuICAgICAgICAvLyBDbGVhciBtZXRhZGF0YSBsaXN0IG9mIGFzc2VtYmx5IGl0ZW1zXG4gICAgICAgIHBhbmVsLmZpbmQoJy5hc3NlbWJseS1tZXRhZGF0YS1saXN0LWNvbnRhaW5lciB1bCcpLmh0bWwoJycpO1xuXG4gICAgICAgIC8vIFNob3cgbWV0YWRhdGEgcHJvZ3Jlc3MgYmFyXG4gICAgICAgIHBhbmVsLmZpbmQoJy5hZGRpbmctbWV0YWRhdGEtcHJvZ3Jlc3MtY29udGFpbmVyIC5wcm9ncmVzcy1jb250YWluZXInKS5zaG93KCk7XG4gICAgICAgIC8vIEhpZGUgdXBsb2FkIGJ1dHRvbnNcbiAgICAgICAgcGFuZWwuZmluZCgnLmFkZGluZy1tZXRhZGF0YS1wcm9ncmVzcy1jb250YWluZXIgLnVwbG9hZC1jb250cm9scy1jb250YWluZXInKS5oaWRlKCk7XG5cbiAgICAgICAgLy8gUmVzZXQgYWRkaW5nIG1ldGFkYXRhIHByb2dyZXNzIGJhclxuXG4gICAgICAgIC8vIFVwZGF0ZSBiYXIncyB3aWR0aFxuICAgICAgICBwYW5lbC5maW5kKCcuYWRkaW5nLW1ldGFkYXRhLXByb2dyZXNzLWNvbnRhaW5lciAucHJvZ3Jlc3MtYmFyJykud2lkdGgoJzAlJyk7XG4gICAgICAgIC8vIFVwZGF0ZSBhcmlhLXZhbHVlbm93IGF0dHJpYnV0ZVxuICAgICAgICBwYW5lbC5maW5kKCcuYWRkaW5nLW1ldGFkYXRhLXByb2dyZXNzLWNvbnRhaW5lciAucHJvZ3Jlc3MtYmFyJykuYXR0cignYXJpYS12YWx1ZW5vdycsIDApO1xuICAgICAgICAvLyBVcGRhdGUgcGVyY2VudGFnZSB2YWx1ZVxuICAgICAgICBwYW5lbC5maW5kKCcuYWRkaW5nLW1ldGFkYXRhLXByb2dyZXNzLWNvbnRhaW5lciAucHJvZ3Jlc3MtcGVyY2VudGFnZScpLnRleHQoJzAlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCByZXNldFBhbmVsQXNzZW1ibHlVcGxvYWRBbmFseXRpY3NcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciByZXNldFBhbmVsQXNzZW1ibHlVcGxvYWRBbmFseXRpY3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBhbmVsID0gJCgnLndnc3QtcGFuZWxfX2Fzc2VtYmx5LXVwbG9hZC1hbmFseXRpY3MnKTtcbiAgICAgICAgcGFuZWwuZmluZCgnLmFzc2VtYmx5LWxpc3QtY29udGFpbmVyIHVsJykuaHRtbCgnJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCByZXNldEFzc2VtbHlVcGxvYWRcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciByZXNldEFzc2VtbHlVcGxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRW1wdHkgbGlzdCBvZiBzZWxlY3RlZCBGQVNUQSBmaWxlcyBhbmQgbWV0YWRhdGFcbiAgICAgICAgZmFzdGFGaWxlc0FuZE1ldGFkYXRhID0ge307XG5cbiAgICAgICAgcmVzZXRQYW5lbEFzc2VtYmx5VXBsb2FkTmF2aWdhdG9yKCk7XG4gICAgICAgIHJlc2V0UGFuZWxBc3NlbWJseVVwbG9hZEFuYWx5dGljcygpO1xuICAgICAgICByZXNldFBhbmVsQXNzZW1ibHlVcGxvYWRNZXRhZGF0YSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgdXBkYXRlU2VsZWN0ZWRGaWxlc1N1bW1hcnlcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciB1cGRhdGVTZWxlY3RlZEZpbGVzU3VtbWFyeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBDYWxjdWxhdGUgYXZlcmFnZSBudW1iZXIgb2Ygc2VsZWN0ZWQgY29udGlnc1xuICAgICAgICB2YXIgY29udGlnc1RvdGFsTnVtYmVyID0gMDtcbiAgICAgICAgLy8gQ291bnQgYWxsIGNvbnRpZ3NcbiAgICAgICAgJC5lYWNoKCQoJy5hc3NlbWJseS1pdGVtJyksIGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICAgICAgICAgICAgY29udGlnc1RvdGFsTnVtYmVyID0gY29udGlnc1RvdGFsTnVtYmVyICsgcGFyc2VJbnQoJCh2YWx1ZSkuZmluZCgnLmFzc2VtYmx5LXN0YXRzLW51bWJlci1jb250aWdzJykudGV4dCgpLCAxMCk7XG4gICAgICAgIH0pO1xuICAgICAgICAkKCcuYXNzZW1ibHktc2VxdWVuY2VzLWF2ZXJhZ2UnKS50ZXh0KE1hdGguZmxvb3IoY29udGlnc1RvdGFsTnVtYmVyIC8gT2JqZWN0LmtleXMoZmFzdGFGaWxlc0FuZE1ldGFkYXRhKS5sZW5ndGgpKTtcblxuICAgICAgICAvLyBTZXQgdG90YWwgbnVtYmVyIG9mIHNlbGVjdGVkIGFzc2VtYmxpZXMvZmlsZXNcbiAgICAgICAgJCgnLmFzc2VtYmx5LXVwbG9hZC10b3RhbC1udW1iZXInKS50ZXh0KE9iamVjdC5rZXlzKGZhc3RhRmlsZXNBbmRNZXRhZGF0YSkubGVuZ3RoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGFzc2VtYmx5TGlzdFNsaWRlckV2ZW50SGFuZGxlclxuICAgICAqIEBwYXJhbSB7fSBldmVudFxuICAgICAqIEBwYXJhbSB7fSB1aVxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGFzc2VtYmx5TGlzdFNsaWRlckV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICB1cGRhdGVTZWxlY3RlZEZpbGVzVUkodWkudmFsdWUpO1xuICAgICAgICAvKlxuICAgICAgICAvLyBVcGRhdGUgc2VxdWVuY2UgbGlzdCBpdGVtIGNvbnRlbnRcbiAgICAgICAgLy8gSGlkZSBhbGwgc2VxdWVuY2VzXG4gICAgICAgICQoJy5hc3NlbWJseS1pdGVtJykuaGlkZSgpO1xuICAgICAgICAvLyBTaG93IHNlbGVjdGVkIHNlcXVlbmNlXG4gICAgICAgIC8vJCgnLmFzc2VtYmx5LWl0ZW0tJyArIHVpLnZhbHVlKS5zaG93KCk7XG4gICAgICAgICQoJy5hc3NlbWJseS1pdGVtJykuZXEodWkudmFsdWUtMSkuc2hvdygpO1xuICAgICAgICAvLyBVcGRhdGUgYXNzZW1ibHkgZmlsZSBuYW1lXG4gICAgICAgICQoJy5hc3NlbWJseS1maWxlLW5hbWUnKS50ZXh0KCQoJy5hc3NlbWJseS1pdGVtLScgKyB1aS52YWx1ZSkuYXR0cignZGF0YS1uYW1lJykpO1xuICAgICAgICAvLyBTdG9yZSBkaXNwbGF5ZWQgZmFzdGEgZmlsZSBuYW1lXG4gICAgICAgIHNlbGVjdGVkRmFzdGFGaWxlTmFtZSA9ICQoJy5hc3NlbWJseS1pdGVtLScgKyB1aS52YWx1ZSkuYXR0cignZGF0YS1uYW1lJyk7XG4gICAgICAgICovXG4gICAgfTtcbiAgICAvLyBIYW5kbGUgc2xpZGUgZXZlbnRcbiAgICAvLyBUcmlnZ2VyZWQgd2hlbiB1c2VyIG1vdmVkIGJ1dCBkaWRuJ3QgcmVsZWFzZSByYW5nZSBoYW5kbGVcbiAgICAkKCcuYXNzZW1ibHktbGlzdC1zbGlkZXInKS5vbignc2xpZGUnLCBhc3NlbWJseUxpc3RTbGlkZXJFdmVudEhhbmRsZXIpO1xuICAgIC8vIEhhbmRsZSBzbGlkZWNoYW5nZSBldmVudFxuICAgIC8vIFRyaWdnZXJlZCB3aGVuIHVzZXIgY2xpY2tzIGEgYnV0dG9uIG9yIHJlbGVhc2VzIHJhbmdlIGhhbmRsZVxuICAgICQoJy5hc3NlbWJseS1saXN0LXNsaWRlcicpLm9uKCdzbGlkZWNoYW5nZScsIGFzc2VtYmx5TGlzdFNsaWRlckV2ZW50SGFuZGxlcik7XG4gICAgLy8gTmF2aWdhdGUgdG8gdGhlIHByZXZpb3VzIHNlcXVlbmNlXG4gICAgJCgnLm5hdi1wcmV2LWl0ZW0nKS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgLy8gQ2hlY2sgaWYgc2VsZWN0ZWQgc2VxdWVuY2UgY291bnRlciB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gMVxuICAgICAgICBpZiAoJCgnLmFzc2VtYmx5LWxpc3Qtc2xpZGVyJykuc2xpZGVyKCd2YWx1ZScpID4gMSkge1xuICAgICAgICAgICAgLy8gRGVjcmVtZW50IHNsaWRlcidzIHZhbHVlXG4gICAgICAgICAgICAkKCcuYXNzZW1ibHktbGlzdC1zbGlkZXInKS5zbGlkZXIoJ3ZhbHVlJywgJCgnLmFzc2VtYmx5LWxpc3Qtc2xpZGVyJykuc2xpZGVyKCd2YWx1ZScpIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICAgIC8vIE5hdmlnYXRlIHRvIHRoZSBuZXh0IHNlcXVlbmNlXG4gICAgJCgnLm5hdi1uZXh0LWl0ZW0nKS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgLy8gQ2hlY2sgaWYgc2VsZWN0ZWQgc2VxdWVuY2UgY291bnRlciB2YWx1ZSBpcyBsZXNzIHRoYW4gdG90YWwgbnVtYmVyIG9mIGRyb3BwZWQgYXNzZW1ibGllc1xuICAgICAgICBpZiAoJCgnLmFzc2VtYmx5LWxpc3Qtc2xpZGVyJykuc2xpZGVyKCd2YWx1ZScpIDwgcGFyc2VJbnQoJCgnLnRvdGFsLW51bWJlci1vZi1kcm9wcGVkLWFzc2VtYmxpZXMnKS50ZXh0KCksIDEwKSkge1xuICAgICAgICAgICAgLy8gSW5jcmVtZW50IHNsaWRlcidzIHZhbHVlXG4gICAgICAgICAgICAkKCcuYXNzZW1ibHktbGlzdC1zbGlkZXInKS5zbGlkZXIoJ3ZhbHVlJywgJCgnLmFzc2VtYmx5LWxpc3Qtc2xpZGVyJykuc2xpZGVyKCd2YWx1ZScpICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgLy8gQXNzZW1ibHkgbWV0YWRhdGEgZnJvbVxuXG4gICAgLy8gU2hvdyBoaW50IG1lc3NhZ2Ugd2hlbiAnSSBhbSBub3Qgc3VyZScgY2hlY2tib3ggaXMgY2hlY2tlY1xuICAgICQoJy5hc3NlbWJseS1tZXRhZGF0YS1saXN0LWNvbnRhaW5lcicpLm9uKCdjbGljaycsICcubm90LXN1cmUtY2hlY2tib3gnLCBmdW5jdGlvbigpe1xuICAgICAgICAvLyBTaG93ICdJIGFtIG5vdCBzdXJlJyBtZXNzYWdlXG4gICAgICAgICQodGhpcykuY2xvc2VzdCgnbGFiZWwnKS5maW5kKCcubm90LXN1cmUtaGludCcpLnRvZ2dsZUNsYXNzKCdoaWRlLXRoaXMnKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCB1cGRhdGVNZXRhZGF0YVByb2dyZXNzQmFyXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlTWV0YWRhdGFQcm9ncmVzc0JhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBDYWxjdWxhdGUgdG90YWwgbnVtYmVyIG9mIG1ldGFkYXRhIGZvcm0gZWxlbWVudHNcbiAgICAgICAgdmFyIHRvdGFsTnVtYmVyT2ZNZXRhZGF0YUl0ZW1zID0gXG4gICAgICAgICAgICArICQoJy5hc3NlbWJseS10aW1lc3RhbXAtaW5wdXQteWVhcicpLmxlbmd0aFxuICAgICAgICAgICAgKyAkKCcuYXNzZW1ibHktc2FtcGxlLWxvY2F0aW9uLWlucHV0JykubGVuZ3RoXG4gICAgICAgICAgICArICQoJy5hc3NlbWJseS1zYW1wbGUtc291cmNlLWlucHV0JykubGVuZ3RoO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSBudW1iZXIgb2Ygbm9uIGVtcHR5IG1ldGFkYXRhIGZvcm0gZWxlbWVudHNcbiAgICAgICAgdmFyIG51bWJlck9mTm9uRW1wdHlNZXRhZGF0YUl0ZW1zID1cbiAgICAgICAgICAgIC8vIEZpbHRlciBvdXQgZW1wdHkgZGF0ZXRpbWUgaW5wdXRzXG4gICAgICAgICAgICArICQoJy5hc3NlbWJseS10aW1lc3RhbXAtaW5wdXQteWVhcicpLmZpbHRlcihmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlICE9PSAnLTEnO1xuICAgICAgICAgICAgfSkubGVuZ3RoXG4gICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IGVtcHR5IGxvY2F0aW9uIGlucHV0c1xuICAgICAgICAgICAgKyAkKCcuYXNzZW1ibHktc2FtcGxlLWxvY2F0aW9uLWlucHV0JykuZmlsdGVyKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubGVuZ3RoICE9PSAwO1xuICAgICAgICAgICAgfSkubGVuZ3RoXG4gICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IGRlZmF1bHQgc291cmNlIGlucHV0c1xuICAgICAgICAgICAgKyAkKCcuYXNzZW1ibHktc2FtcGxlLXNvdXJjZS1pbnB1dCcpLmZpbHRlcihmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlICE9PSAnMCc7XG4gICAgICAgICAgICB9KS5sZW5ndGg7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBwcm9ncmVzcyBiYXIgcGVyY2VudGFnZSB2YWx1ZVxuICAgICAgICB2YXIgbmV3UHJvZ3Jlc3NCYXJQZXJjZW50YWdlVmFsdWUgPSBNYXRoLmZsb29yKG51bWJlck9mTm9uRW1wdHlNZXRhZGF0YUl0ZW1zICogMTAwIC8gdG90YWxOdW1iZXJPZk1ldGFkYXRhSXRlbXMpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBiYXIncyB3aWR0aFxuICAgICAgICAkKCcuYWRkaW5nLW1ldGFkYXRhLXByb2dyZXNzLWNvbnRhaW5lciAucHJvZ3Jlc3MtYmFyJykud2lkdGgobmV3UHJvZ3Jlc3NCYXJQZXJjZW50YWdlVmFsdWUgKyAnJScpO1xuICAgICAgICAvLyBVcGRhdGUgYXJpYS12YWx1ZW5vdyBhdHRyaWJ1dGVcbiAgICAgICAgJCgnLmFkZGluZy1tZXRhZGF0YS1wcm9ncmVzcy1jb250YWluZXIgLnByb2dyZXNzLWJhcicpLmF0dHIoJ2FyaWEtdmFsdWVub3cnLCBuZXdQcm9ncmVzc0JhclBlcmNlbnRhZ2VWYWx1ZSk7XG4gICAgICAgIC8vIFVwZGF0ZSBwZXJjZW50YWdlIHZhbHVlXG4gICAgICAgICQoJy5hZGRpbmctbWV0YWRhdGEtcHJvZ3Jlc3MtY29udGFpbmVyIC5wcm9ncmVzcy1wZXJjZW50YWdlJykudGV4dChuZXdQcm9ncmVzc0JhclBlcmNlbnRhZ2VWYWx1ZSArICclJyk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgYWxsIGZvcm0gZWxlbWVudHMgYXJlIGNvbXBsZXRlZFxuICAgICAgICBpZiAobmV3UHJvZ3Jlc3NCYXJQZXJjZW50YWdlVmFsdWUgPT09IDEwMCkge1xuXG4gICAgICAgICAgICAvLyBIaWRlIG1ldGFkYXRhIHByb2dyZXNzIGJhclxuICAgICAgICAgICAgJCgnLmFkZGluZy1tZXRhZGF0YS1wcm9ncmVzcy1jb250YWluZXIgLnByb2dyZXNzLWNvbnRhaW5lcicpLmhpZGUoKTtcblxuICAgICAgICAgICAgLy8gU2hvdyB1cGxvYWQgYnV0dG9uc1xuICAgICAgICAgICAgJCgnLmFkZGluZy1tZXRhZGF0YS1wcm9ncmVzcy1jb250YWluZXIgLnVwbG9hZC1jb250cm9scy1jb250YWluZXInKS5zaG93KCk7XG5cbiAgICAgICAgICAgIGlmIChXR1NULnNwZWFrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBuZXcgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlKCdSZWFkeSB0byB1cGxvYWQnKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnNwZWFrKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFbmFibGUgJ1VwbG9hZCcgYnV0dG9uXG4gICAgICAgICAgICAvLyQoJy5hc3NlbWJsaWVzLXVwbG9hZC1yZWFkeS1idXR0b24nKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qXG4gICAgLy8gU2hvdyBuZXh0IGZvcm0gYmxvY2sgd2hlbiB1c2VyIHNlbGVjdHMgc3BlY2llc1xuICAgIC8vIFRPIERPOiBEbyBub3cgaW5jcmVtZW50IG1ldGFkYXRhIHByb2dyZXNzIGJhciBtb3JlIHRoYW4gb25jZVxuICAgICQoJy5hc3NlbWJseS1saXN0LWNvbnRhaW5lcicpLm9uKCdjaGFuZ2UnLCAnLmFzc2VtYmx5LXNhbXBsZS1zcGVjaWVzLXNlbGVjdCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vIFNob3cgbmV4dCBmb3JtIGJsb2NrXG4gICAgICAgICQodGhpcykuY2xvc2VzdCgnLmZvcm0tYmxvY2snKS5uZXh0KCcuZm9ybS1ibG9jaycpLmZhZGVJbigpO1xuICAgIH0pO1xuICAgIC8vIEluY3JlbWVudCBtZXRhZGF0YSBwcm9ncmVzcyBiYXJcbiAgICAkKCcuYXNzZW1ibHktbGlzdC1jb250YWluZXInKS5vbignY2hhbmdlJywgJy5hc3NlbWJseS1zYW1wbGUtc3BlY2llcy1zZWxlY3QnLCBmdW5jdGlvbigpe1xuICAgICAgICAvLyBJbmNyZW1lbnQgcHJvZ3Jlc3MgYmFyXG4gICAgICAgIHVwZGF0ZU1ldGFkYXRhUHJvZ3Jlc3NCYXIoKTtcbiAgICB9KTtcbiAgICAqL1xuXG4gICAgLy8gLy8gU2hvdyBuZXh0IGZvcm0gYmxvY2sgd2hlbiB1c2VyIGZpbGxzIGluIGFuIGlucHV0XG4gICAgLy8gLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNjQ1ODk0NlxuICAgIC8vIC8vIFJlbGV2YW50IGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vRW9uYXNkYW4vYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2lzc3Vlcy84M1xuICAgIC8vICQoJy5hc3NlbWJseS1tZXRhZGF0YS1saXN0LWNvbnRhaW5lcicpLm9uKCdjaGFuZ2UgY2hhbmdlLmRwJywgJy5hc3NlbWJseS1zYW1wbGUtZGF0ZXRpbWUtaW5wdXQnLCBmdW5jdGlvbigpe1xuICAgIC8vICAgICAvLyBUT0RPOiB2YWxpZGF0ZSBpbnB1dCB2YWx1ZVxuICAgIC8vICAgICAvLyBTaG93IG5leHQgZm9ybSBibG9ja1xuICAgIC8vICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5mb3JtLWJsb2NrJykubmV4dCgnLmZvcm0tYmxvY2snKS5mYWRlSW4oKTtcbiAgICAvLyAgICAgLy8gU2Nyb2xsIHRvIHRoZSBuZXh0IGZvcm0gYmxvY2tcbiAgICAvLyAgICAgLy8kKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YScpLnNjcm9sbFRvcCgkKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YScpLmhlaWdodCgpKTtcbiAgICAvLyAgICAgLy8kKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YScpLmFuaW1hdGUoe3Njcm9sbFRvcDogJCh0aGlzKS5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEnKS5oZWlnaHQoKX0sIDQwMCk7XG4gICAgLy8gICAgIC8vIEZvY3VzIG9uIHRoZSBuZXh0IGlucHV0XG4gICAgLy8gICAgICQodGhpcykuY2xvc2VzdCgnLmZvcm0tYmxvY2snKS5uZXh0KCcuZm9ybS1ibG9jaycpLmZpbmQoJy5hc3NlbWJseS1zYW1wbGUtbG9jYXRpb24taW5wdXQnKS5mb2N1cygpO1xuICAgIC8vICAgICAvLyQoJy5hc3NlbWJseS1zYW1wbGUtbG9jYXRpb24taW5wdXQnKS5mb2N1cygpO1xuICAgIC8vIH0pO1xuICAgIC8vIC8vIEluY3JlbWVudCBtZXRhZGF0YSBwcm9ncmVzcyBiYXJcbiAgICAvLyAkKCcuYXNzZW1ibHktbWV0YWRhdGEtbGlzdC1jb250YWluZXInKS5vbignY2hhbmdlIGNoYW5nZS5kcCcsICcuYXNzZW1ibHktc2FtcGxlLWRhdGV0aW1lLWlucHV0JywgZnVuY3Rpb24oKXtcbiAgICAvLyAgICAgLy8gSW5jcmVtZW50IHByb2dyZXNzIGJhclxuICAgIC8vICAgICB1cGRhdGVNZXRhZGF0YVByb2dyZXNzQmFyKCk7XG4gICAgLy8gfSk7XG4gICAgLy8gJCgnLmFzc2VtYmx5LW1ldGFkYXRhLWxpc3QtY29udGFpbmVyJykub25lKCdoaWRlLmRwJywgJy5hc3NlbWJseS1zYW1wbGUtZGF0ZXRpbWUtaW5wdXQnLCBmdW5jdGlvbihldmVudCl7XG4gICAgLy8gICAgIHZhciB0aGF0ID0gJCh0aGlzKTtcbiAgICAvLyAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgIC8vICAgICAgICAgLy8gU2Nyb2xsIHRvIHRoZSBuZXh0IGZvcm0gYmxvY2tcbiAgICAvLyAgICAgICAgIC8vJCh0aGlzKS5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEnKS5zY3JvbGxUb3AoJCh0aGlzKS5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEnKS5oZWlnaHQoKSk7XG4gICAgLy8gICAgICAgICB0aGF0LmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YScpLmFuaW1hdGUoe3Njcm9sbFRvcDogdGhhdC5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEnKS5oZWlnaHQoKX0sIDQwMCk7XG4gICAgLy8gICAgIH0sIDUwMCk7XG4gICAgLy8gfSk7XG5cbiAgICAvLyB2YXIgaGFuZGxlTWV0YWRhdGFJbnB1dENoYW5nZSA9IGZ1bmN0aW9uKGlucHV0RWxlbWVudCkge1xuXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGlucHV0RWxlbWVudCk7XG5cbiAgICAvLyAgICAgLy8gU2hvdyBuZXh0IGZvcm0gYmxvY2sgaWYgY3VycmVudCBpbnB1dCBoYXMgc29tZSB2YWx1ZVxuICAgIC8vICAgICBpZiAoaW5wdXRFbGVtZW50LnZhbCgpLmxlbmd0aCA+IDApIHtcblxuICAgIC8vICAgICAgICAgLy8gVE8gRE86IFZhbGlkYXRlIGlucHV0IHZhbHVlXG5cbiAgICAvLyAgICAgICAgIC8vIFNob3cgbmV4dCBtZXRhZGF0YSBmb3JtIGJsb2NrXG4gICAgLy8gICAgICAgICBpbnB1dEVsZW1lbnQuY2xvc2VzdCgnLmZvcm0tYmxvY2snKS5uZXh0KCcuZm9ybS1ibG9jaycpLmZhZGVJbigpO1xuXG4gICAgLy8gICAgICAgICAvLyBTY3JvbGwgdG8gdGhlIG5leHQgZm9ybSBibG9ja1xuICAgIC8vICAgICAgICAgLy8kKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YScpLnNjcm9sbFRvcCgkKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YScpLmhlaWdodCgpKTtcbiAgICAvLyAgICAgICAgIGlucHV0RWxlbWVudC5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEnKS5hbmltYXRlKHtzY3JvbGxUb3A6IGlucHV0RWxlbWVudC5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEnKS5oZWlnaHQoKX0sIDQwMCk7XG4gICAgLy8gICAgIH0gLy8gaWZcblxuICAgIC8vICAgICAvLyBJbmNyZW1lbnQgbWV0YWRhdGEgcHJvZ3Jlc3MgYmFyXG4gICAgLy8gICAgIHVwZGF0ZU1ldGFkYXRhUHJvZ3Jlc3NCYXIoKTtcbiAgICAvLyAgICAgLy8gSGlkZSBwcm9ncmVzcyBoaW50XG4gICAgLy8gICAgICQoJy5hZGRpbmctbWV0YWRhdGEtcHJvZ3Jlc3MtY29udGFpbmVyIC5wcm9ncmVzcy1oaW50JykuZmFkZU91dCgpO1xuICAgIC8vIH07XG5cbiAgICAvLyBTaG93IG5leHQgZm9ybSBibG9jayB3aGVuIHVzZXIgZmlsbHMgaW4gYW4gaW5wdXRcbiAgICAvLyBUbyBkbzogUmVmYWN0b3JcbiAgICAkKCcuYXNzZW1ibHktbWV0YWRhdGEtbGlzdC1jb250YWluZXInKS5vbignY2hhbmdlJywgJy5hc3NlbWJseS1zYW1wbGUtc291cmNlLWlucHV0JywgZnVuY3Rpb24oKXtcblxuICAgICAgICAvLyBTaG93IG5leHQgZm9ybSBibG9jayBpZiB1c2VyIHNlbGVjdGVkIG5vbiBkZWZhdWx0IG9wdGlvblxuICAgICAgICBpZiAoJCh0aGlzKS52YWwoKSAhPT0gMCkge1xuICAgICAgICAgICAgLy8gU2hvdyBuZXh0IG1ldGFkYXRhIGZvcm0gYmxvY2tcbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnLmZvcm0tYmxvY2snKS5uZXh0KCcuZm9ybS1ibG9jaycpLmZhZGVJbigpO1xuICAgICAgICAgICAgLy8gU2Nyb2xsIHRvIHRoZSBuZXh0IGZvcm0gYmxvY2tcbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnLmFzc2VtYmx5LW1ldGFkYXRhJykuYW5pbWF0ZSh7c2Nyb2xsVG9wOiAkKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YScpLmhlaWdodCgpfSwgNDAwKTtcbiAgICAgICAgfSAvLyBpZlxuXG4gICAgICAgIC8vIEluY3JlbWVudCBtZXRhZGF0YSBwcm9ncmVzcyBiYXJcbiAgICAgICAgdXBkYXRlTWV0YWRhdGFQcm9ncmVzc0JhcigpO1xuICAgICAgICAvLyBIaWRlIHByb2dyZXNzIGhpbnRcbiAgICAgICAgJCgnLmFkZGluZy1tZXRhZGF0YS1wcm9ncmVzcy1jb250YWluZXIgLnByb2dyZXNzLWhpbnQnKS5mYWRlT3V0KCk7XG4gICAgfSk7XG5cbiAgICAvLyBUTyBETzogUmVmYWN0b3JcbiAgICAvLyBXaGVuICdOZXh0IGVtcHR5IGFzc2VtYmx5JyBidXR0b24gaXMgcHJlc3NlZFxuICAgICQoJy5hc3NlbWJseS1tZXRhZGF0YS1saXN0LWNvbnRhaW5lcicpLm9uKCdjbGljaycsICcuYXNzZW1ibHktbWV0YWRhdGEgYnV0dG9uLm5leHQtYXNzZW1ibHktYnV0dG9uJywgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAvLyBTaG93IGFzc2VtYmx5IHdpdGggZW1wdHkgbWV0YWRhdGEgaW5wdXQgZmllbGRcblxuICAgICAgICAvLyBUcmlnZ2VyIHRvIHNob3cgbmV4dCBhc3NlbWJseVxuICAgICAgICAkKCcubmF2LW5leHQtaXRlbScpLnRyaWdnZXIoJ2NsaWNrJyk7XG5cbiAgICAgICAgLy8kKCcjYXNzZW1ibHktaXRlbS0nICsgKCtjdXJyZW50QXNzZW1ibHlJZENvdW50ZXIgKyAxKSkuZmluZCgnaW5wdXQ6Zmlyc3QnKS5mb2N1cygpO1xuXG4gICAgICAgIC8vIEZvY3VzIG9uIHRoZSBuZXh0IGVtcHR5IGlucHV0IGZpZWxkXG4gICAgICAgIC8vJCh0aGlzKS5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEtbGlzdC1jb250YWluZXInKS5maW5kKCcuYXNzZW1ibHktbWV0YWRhdGEtaXRlbSBpbnB1dDp0ZXh0W3ZhbHVlPVwiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZygkKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YS1saXN0LWNvbnRhaW5lcicpLmZpbmQoJy5hc3NlbWJseS1tZXRhZGF0YS1pdGVtIGlucHV0OnRleHRbdmFsdWU9XCJcIl0nKSk7XG5cbiAgICAgICAgdmFyIGN1cnJlbnRBc3NlbWJseUlkQ291bnRlciA9ICQodGhpcykuY2xvc2VzdCgnLmFzc2VtYmx5LWl0ZW0nKS5hdHRyKCdpZCcpLnJlcGxhY2UoJ2Fzc2VtYmx5LW1ldGFkYXRhLWl0ZW0tJywgJycpO1xuXG4gICAgICAgICQodGhpcykuY2xvc2VzdCgnLmFzc2VtYmx5LW1ldGFkYXRhLWxpc3QtY29udGFpbmVyJykuZmluZCgnLmFzc2VtYmx5LW1ldGFkYXRhLWJsb2NrIGlucHV0OnRleHRbdmFsdWU9XCJcIl0nKS5mb2N1cygpO1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgY2FsY3VsYXRlQXNzZW1ibHlUb3BTY29yZVxuICAgICAqIEBwYXJhbSB7fSBhc3NlbWJseVNjb3Jlc1xuICAgICAqIEByZXR1cm4gTWVtYmVyRXhwcmVzc2lvblxuICAgICAqL1xuICAgIHZhciBjYWxjdWxhdGVBc3NlbWJseVRvcFNjb3JlID0gZnVuY3Rpb24oYXNzZW1ibHlTY29yZXMpIHtcbiAgICAgICAgLy8gU29ydCBkYXRhIGJ5IHNjb3JlXG4gICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE1MzIyMTI5XG4gICAgICAgIHZhciBzb3J0ZWRTY29yZXMgPSBbXSxcbiAgICAgICAgICAgIHNjb3JlO1xuXG4gICAgICAgIC8vIEZpcnN0IGNyZWF0ZSB0aGUgYXJyYXkgb2Yga2V5cy92YWx1ZXMgc28gdGhhdCB3ZSBjYW4gc29ydCBpdFxuICAgICAgICBmb3IgKHNjb3JlIGluIGFzc2VtYmx5U2NvcmVzKSB7XG4gICAgICAgICAgICBpZiAoYXNzZW1ibHlTY29yZXMuaGFzT3duUHJvcGVydHkoc2NvcmUpKSB7XG4gICAgICAgICAgICAgICAgc29ydGVkU2NvcmVzLnB1c2goeyBcbiAgICAgICAgICAgICAgICAgICAgJ3JlZmVyZW5jZUlkJzogYXNzZW1ibHlTY29yZXNbc2NvcmVdLnJlZmVyZW5jZUlkLFxuICAgICAgICAgICAgICAgICAgICAnc2NvcmUnOiBhc3NlbWJseVNjb3Jlc1tzY29yZV0uc2NvcmVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvcnQgc2NvcmVzXG4gICAgICAgIHNvcnRlZFNjb3JlcyA9IHNvcnRlZFNjb3Jlcy5zb3J0KGZ1bmN0aW9uKGEsYil7XG4gICAgICAgICAgICByZXR1cm4gYi5zY29yZSAtIGEuc2NvcmU7IC8vIERlc2NlbmRpbmcgc29ydCAoWi1BKVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc29ydGVkU2NvcmVzWzBdO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgdXBkYXRlQXNzZW1ibHlVcGxvYWRQcm9ncmVzc1VJXG4gICAgICogQHBhcmFtIHt9IGFzc2VtYmx5SWRcbiAgICAgKiBAcGFyYW0ge30gdXNlckFzc2VtYmx5SWRcbiAgICAgKiBAcGFyYW0ge30gbnVtYmVyT2ZBbmFseXNpc1Jlc3VsdHNQZXJBc3NlbWJseVxuICAgICAqIEBwYXJhbSB7fSByZXN1bHRcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciB1cGRhdGVBc3NlbWJseVVwbG9hZFByb2dyZXNzVUkgPSBmdW5jdGlvbihhc3NlbWJseUlkLCB1c2VyQXNzZW1ibHlJZCwgbnVtYmVyT2ZBbmFseXNpc1Jlc3VsdHNQZXJBc3NlbWJseSwgcmVzdWx0KSB7XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBDcmVhdGUgcmVzdWx0IGVsZW1lbnRcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHZhciAkYXNzZW1ibHlSb3cgPSAkKCcuYXNzZW1ibHktbGlzdC11cGxvYWQtcHJvZ3Jlc3MgdHJbZGF0YS1hc3NlbWJseS1pZD1cIicgKyB1c2VyQXNzZW1ibHlJZCArICdcIl0gJyksXG4gICAgICAgICAgICAkYXNzZW1ibHlSb3dQcm9ncmVzc0JhciA9ICRhc3NlbWJseVJvdy5maW5kKCcucHJvZ3Jlc3MtYmFyJyksXG4gICAgICAgICAgICBzdGF0dXNDb21wbGV0ZUh0bWwgPSAnPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLW9rXCI+PC9zcGFuPicsXG4gICAgICAgICAgICBjdXJyZW50UHJvZ3Jlc3NCYXJQZXJjZW50YWdlVmFsdWUgPSBwYXJzZUZsb2F0KCRhc3NlbWJseVJvdy5maW5kKCcucHJvZ3Jlc3MtYmFyJykuYXR0cignYXJpYS12YWx1ZW5vdycpKSxcbiAgICAgICAgICAgIHByb2dyZXNzU3RlcFNpemUgPSAxMDAgLyBudW1iZXJPZkFuYWx5c2lzUmVzdWx0c1BlckFzc2VtYmx5LFxuICAgICAgICAgICAgbmV3UHJvZ3Jlc3NCYXJQZXJjZW50YWdlVmFsdWUgPSBjdXJyZW50UHJvZ3Jlc3NCYXJQZXJjZW50YWdlVmFsdWUgKyBwcm9ncmVzc1N0ZXBTaXplO1xuXG4gICAgICAgIGlmIChyZXN1bHQgPT09IFdHU1QuYXNzZW1ibHkuYW5hbHlzaXMuVVBMT0FEX09LKSB7XG4gICAgICAgICAgICAkYXNzZW1ibHlSb3cuZmluZCgnLmFzc2VtYmx5LXVwbG9hZC11cGxvYWRlZCcpLmh0bWwoc3RhdHVzQ29tcGxldGVIdG1sKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgPT09IFdHU1QuYXNzZW1ibHkuYW5hbHlzaXMuTUxTVF9SRVNVTFQpIHtcbiAgICAgICAgICAgICRhc3NlbWJseVJvdy5maW5kKCcuYXNzZW1ibHktdXBsb2FkLXJlc3VsdC1tbHN0JykuaHRtbChzdGF0dXNDb21wbGV0ZUh0bWwpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gV0dTVC5hc3NlbWJseS5hbmFseXNpcy5QQUFSU05QX1JFU1VMVCkge1xuICAgICAgICAgICAgJGFzc2VtYmx5Um93LmZpbmQoJy5hc3NlbWJseS11cGxvYWQtcmVzdWx0LXBhYXJzbnAnKS5odG1sKHN0YXR1c0NvbXBsZXRlSHRtbCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSBXR1NULmFzc2VtYmx5LmFuYWx5c2lzLkZQX0NPTVApIHtcbiAgICAgICAgICAgICRhc3NlbWJseVJvdy5maW5kKCcuYXNzZW1ibHktdXBsb2FkLXJlc3VsdC1mcC1jb21wJykuaHRtbChzdGF0dXNDb21wbGV0ZUh0bWwpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gV0dTVC5hc3NlbWJseS5hbmFseXNpcy5DT1JFKSB7XG4gICAgICAgICAgICAkYXNzZW1ibHlSb3cuZmluZCgnLmFzc2VtYmx5LXVwbG9hZC1yZXN1bHQtY29yZScpLmh0bWwoc3RhdHVzQ29tcGxldGVIdG1sKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBVcGRhdGUgYXNzZW1ibHkgdXBsb2FkIHByb2dyZXNzIGJhciB2YWx1ZVxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgJGFzc2VtYmx5Um93UHJvZ3Jlc3NCYXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgbmV3UHJvZ3Jlc3NCYXJQZXJjZW50YWdlVmFsdWUgKyAnJScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS12YWx1ZW5vdycsIG5ld1Byb2dyZXNzQmFyUGVyY2VudGFnZVZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhc3NlbWJseSBwcm9jZXNzaW5nIGhhcyBzdGFydGVkIHRoZW4gc2hvdyBwZXJjZW50YWdlIHZhbHVlXG4gICAgICAgIGlmIChuZXdQcm9ncmVzc0JhclBlcmNlbnRhZ2VWYWx1ZSA+IDApIHtcbiAgICAgICAgICAgIC8vYXNzZW1ibHlSb3dQcm9ncmVzc0Jhci50ZXh0KE1hdGguZmxvb3IobmV3UHJvZ3Jlc3NCYXJQZXJjZW50YWdlVmFsdWUpICsgJyUnKTtcbiAgICAgICAgICAgICRhc3NlbWJseVJvd1Byb2dyZXNzQmFyLnRleHQoTWF0aC5yb3VuZChuZXdQcm9ncmVzc0JhclBlcmNlbnRhZ2VWYWx1ZSkgKyAnJScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT25jZSAxMDAlIHJlYWNoZWQgY2hhbmdlIHByb2dyZXNzIGJhciBjb2xvciB0byBncmVlblxuICAgICAgICBpZiAobmV3UHJvZ3Jlc3NCYXJQZXJjZW50YWdlVmFsdWUgPj0gMTAwKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgbnVtYmVyIG9mIHByb2Nlc3NpbmcgYXNzZW1ibGllc1xuICAgICAgICAgICAgbnVtYmVyT2ZGaWxlc1Byb2Nlc3NpbmcgPSBudW1iZXJPZkZpbGVzUHJvY2Vzc2luZyAtIDE7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBzdHJpcGVzIGZyb20gcHJvZ3Jlc3MgYmFyXG4gICAgICAgICAgICAkYXNzZW1ibHlSb3cuZmluZCgnLnByb2dyZXNzJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdwcm9ncmVzcy1zdHJpcGVkJyk7XG5cbiAgICAgICAgICAgIC8vIENoYW5nZSBwcm9ncmVzcyBiYXIgY29sb3IgdG8gZ3JlZW5cbiAgICAgICAgICAgICRhc3NlbWJseVJvd1Byb2dyZXNzQmFyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdwcm9ncmVzcy1iYXItaW5mbycpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdwcm9ncmVzcy1iYXItc3VjY2VzcycpO1xuXG4gICAgICAgICAgICB2YXIgYXNzZW1ibHlOYW1lID0gJGFzc2VtYmx5Um93LmZpbmQoJy5hc3NlbWJseS11cGxvYWQtbmFtZScpLnRleHQoKTtcbiAgICAgICAgICAgICRhc3NlbWJseVJvdy5maW5kKCcuYXNzZW1ibHktdXBsb2FkLW5hbWUnKS5odG1sKCc8YSBocmVmPVwiI1wiIGNsYXNzPVwib3Blbi1hc3NlbWJseS1idXR0b25cIiBkYXRhLWFzc2VtYmx5LWlkPVwiJyArIGFzc2VtYmx5SWQgKyAnXCI+JyArIGFzc2VtYmx5TmFtZSArICc8L2E+Jyk7ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0b3RhbCBudW1iZXIgb2YgcHJvY2Vzc2VkIGFzc2VtYmxpZXNcbiAgICAgICAgICAgIHZhciAkYXNzZW1ibGllc1VwbG9hZFByb2Nlc3NlZCA9ICQoJy5hc3NlbWJsaWVzLXVwbG9hZC1wcm9jZXNzZWQnKTtcbiAgICAgICAgICAgICRhc3NlbWJsaWVzVXBsb2FkUHJvY2Vzc2VkLnRleHQocGFyc2VJbnQoJGFzc2VtYmxpZXNVcGxvYWRQcm9jZXNzZWQudGV4dCgpLCAxMCkgKyAxKTtcbiAgICAgICAgfSAvLyBpZlxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgdXBkYXRlQ29sbGVjdGlvblVwbG9hZFByb2dyZXNzVUlcbiAgICAgKiBAcGFyYW0ge30gY29sbGVjdGlvbklkXG4gICAgICogQHBhcmFtIHt9IHVzZXJBc3NlbWJseUlkXG4gICAgICogQHBhcmFtIHt9IGFzc2VtYmx5SWRcbiAgICAgKiBAcGFyYW0ge30gdG90YWxOdW1iZXJPZkFuYWx5c2lzUmVzdWx0c1xuICAgICAqIEBwYXJhbSB7fSByZXN1bHRcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciB1cGRhdGVDb2xsZWN0aW9uVXBsb2FkUHJvZ3Jlc3NVSSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb25JZCwgdXNlckFzc2VtYmx5SWQsIGFzc2VtYmx5SWQsIHRvdGFsTnVtYmVyT2ZBbmFseXNpc1Jlc3VsdHMsIHJlc3VsdCkge1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gVXBkYXRlIGNvbGxlY3Rpb24gcHJvZ3Jlc3NcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHZhciAkY29sbGVjdGlvblVwbG9hZFByb2dyZXNzQmFyID0gJCgnLmFzc2VtYmxpZXMtdXBsb2FkLXByb2dyZXNzJykuZmluZCgnLnByb2dyZXNzLWJhcicpLFxuICAgICAgICAgICAgY3VycmVudFByb2dyZXNzQmFyUGVyY2VudGFnZVZhbHVlID0gcGFyc2VGbG9hdCgkY29sbGVjdGlvblVwbG9hZFByb2dyZXNzQmFyLmF0dHIoJ2FyaWEtdmFsdWVub3cnKSksXG4gICAgICAgICAgICBwcm9ncmVzc1N0ZXBTaXplID0gMTAwIC8gdG90YWxOdW1iZXJPZkFuYWx5c2lzUmVzdWx0cyxcbiAgICAgICAgICAgIG5ld1Byb2dyZXNzQmFyUGVyY2VudGFnZVZhbHVlID0gY3VycmVudFByb2dyZXNzQmFyUGVyY2VudGFnZVZhbHVlICsgcHJvZ3Jlc3NTdGVwU2l6ZTtcblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gVXBkYXRlIGFzc2VtYmx5IHVwbG9hZCBwcm9ncmVzcyBiYXIgdmFsdWVcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICRjb2xsZWN0aW9uVXBsb2FkUHJvZ3Jlc3NCYXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgbmV3UHJvZ3Jlc3NCYXJQZXJjZW50YWdlVmFsdWUgKyAnJScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS12YWx1ZW5vdycsIG5ld1Byb2dyZXNzQmFyUGVyY2VudGFnZVZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhc3NlbWJseSBwcm9jZXNzaW5nIGhhcyBzdGFydGVkIHRoZW4gc2hvdyBwZXJjZW50YWdlIHZhbHVlXG4gICAgICAgIGlmIChuZXdQcm9ncmVzc0JhclBlcmNlbnRhZ2VWYWx1ZSA+IDApIHtcbiAgICAgICAgICAgICRjb2xsZWN0aW9uVXBsb2FkUHJvZ3Jlc3NCYXIudGV4dChNYXRoLnJvdW5kKG5ld1Byb2dyZXNzQmFyUGVyY2VudGFnZVZhbHVlKSArICclJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPbmNlIDEwMCUgcmVhY2hlZCBjaGFuZ2UgcHJvZ3Jlc3MgYmFyIGNvbG9yIHRvIGdyZWVuXG4gICAgICAgIGlmIChuZXdQcm9ncmVzc0JhclBlcmNlbnRhZ2VWYWx1ZSA+PSAxMDApIHtcbiAgICAgICAgICAgICRjb2xsZWN0aW9uVXBsb2FkUHJvZ3Jlc3NCYXIuYWRkQ2xhc3MoJ3Byb2dyZXNzLWJhci1zdWNjZXNzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoV0dTVC5zcGVhayA9PT0gdHJ1ZSAmJiBuZXdQcm9ncmVzc0JhclBlcmNlbnRhZ2VWYWx1ZSAlIDMwID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG5ldyBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UoJ1VwbG9hZGVkIG92ZXIgJyArIG5ld1Byb2dyZXNzQmFyUGVyY2VudGFnZVZhbHVlICsgJyBwZXJjZW50Jyk7XG4gICAgICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnNwZWFrKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBhZGRSZXNpc3RhbmNlUHJvZmlsZVRvQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7fSBjb2xsZWN0aW9uSWRcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBhZGRSZXNpc3RhbmNlUHJvZmlsZVRvQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKGNvbGxlY3Rpb25JZCkge1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIFVuZ3JvdXAgYW50aWJpb3RpYyByZXNpc3RhbmNlIHByb2ZpbGVcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB2YXIgYXNzZW1ibHlJZCxcbiAgICAgICAgICAgIGFzc2VtYmx5LFxuICAgICAgICAgICAgcmVzaXN0YW5jZVByb2ZpbGVHcm91cHMgPSB7fSxcbiAgICAgICAgICAgIHJlc2lzdGFuY2VQcm9maWxlR3JvdXBOYW1lLFxuICAgICAgICAgICAgcmVzaXN0YW5jZVByb2ZpbGVHcm91cCxcbiAgICAgICAgICAgIHVuZ3JvdXBlZFJlc2lzdGFuY2VQcm9maWxlLFxuICAgICAgICAgICAgYW50aWJpb3RpY05hbWU7XG5cbiAgICAgICAgZm9yIChhc3NlbWJseUlkIGluIFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLmFzc2VtYmxpZXMpIHtcbiAgICAgICAgICAgIGFzc2VtYmx5ID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllc1thc3NlbWJseUlkXTtcbiAgICAgICAgICAgIHJlc2lzdGFuY2VQcm9maWxlR3JvdXBzID0gYXNzZW1ibHkuUEFBUlNOUF9SRVNVTFQucGFhclJlc3VsdC5yZXNpc3RhbmNlUHJvZmlsZTtcbiAgICAgICAgICAgIHVuZ3JvdXBlZFJlc2lzdGFuY2VQcm9maWxlID0ge307XG5cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdyZXNpc3RhbmNlUHJvZmlsZUdyb3VwczogJyArIHJlc2lzdGFuY2VQcm9maWxlR3JvdXBzKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZGlyKHJlc2lzdGFuY2VQcm9maWxlR3JvdXBzKTtcblxuICAgICAgICAgICAgZm9yIChyZXNpc3RhbmNlUHJvZmlsZUdyb3VwTmFtZSBpbiByZXNpc3RhbmNlUHJvZmlsZUdyb3Vwcykge1xuICAgICAgICAgICAgICAgIHJlc2lzdGFuY2VQcm9maWxlR3JvdXAgPSByZXNpc3RhbmNlUHJvZmlsZUdyb3Vwc1tyZXNpc3RhbmNlUHJvZmlsZUdyb3VwTmFtZV07XG5cbiAgICAgICAgICAgICAgICBmb3IgKGFudGliaW90aWNOYW1lIGluIHJlc2lzdGFuY2VQcm9maWxlR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgdW5ncm91cGVkUmVzaXN0YW5jZVByb2ZpbGVbYW50aWJpb3RpY05hbWVdID0gcmVzaXN0YW5jZVByb2ZpbGVHcm91cFthbnRpYmlvdGljTmFtZV07XG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLmFzc2VtYmxpZXNbYXNzZW1ibHlJZF0uUEFBUlNOUF9SRVNVTFQucGFhclJlc3VsdC51bmdyb3VwZWRSZXNpc3RhbmNlUHJvZmlsZSA9IHVuZ3JvdXBlZFJlc2lzdGFuY2VQcm9maWxlO1xuICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5hc3NlbWJsaWVzW2Fzc2VtYmx5SWRdLlBBQVJTTlBfUkVTVUxULnBhYXJSZXN1bHQudW5ncm91cGVkUmVzaXN0YW5jZVByb2ZpbGU6Jyk7XG4gICAgICAgICAgICBjb25zb2xlLmRpcihXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5hc3NlbWJsaWVzW2Fzc2VtYmx5SWRdLlBBQVJTTlBfUkVTVUxULnBhYXJSZXN1bHQudW5ncm91cGVkUmVzaXN0YW5jZVByb2ZpbGUpO1xuICAgICAgICB9IC8vIGZvclxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgcG9wdWxhdGVMaXN0T2ZBbnRpYmlvdGljc1xuICAgICAqIEBwYXJhbSB7fSAkYW50aWJpb3RpY1NlbGVjdEVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBwb3B1bGF0ZUxpc3RPZkFudGliaW90aWNzID0gZnVuY3Rpb24oJGFudGliaW90aWNTZWxlY3RFbGVtZW50KSB7XG4gICAgICAgIC8vIFBvcHVsYXRlIGxpc3Qgb2YgYW50aWJpb3RpY3NcbiAgICAgICAgdmFyIGFudGliaW90aWNHcm91cE5hbWUsXG4gICAgICAgICAgICBhbnRpYmlvdGljTmFtZSxcbiAgICAgICAgICAgIGFudGliaW90aWNOYW1lcyA9IFtdLFxuICAgICAgICAgICAgYW50aWJpb3RpY09wdGlvbkh0bWxFbGVtZW50cyA9IHt9O1xuICAgICAgICAgICAgLy9hbnRpYmlvdGljcyA9IHt9O1xuXG4gICAgICAgIGZvciAoYW50aWJpb3RpY0dyb3VwTmFtZSBpbiBXR1NULmFudGliaW90aWNzKSB7XG4gICAgICAgICAgICBmb3IgKGFudGliaW90aWNOYW1lIGluIFdHU1QuYW50aWJpb3RpY3NbYW50aWJpb3RpY0dyb3VwTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAvL2FudGliaW90aWNzW2FudGliaW90aWNOYW1lXSA9IFdHU1QuYW50aWJpb3RpY3NbYW50aWJpb3RpY0dyb3VwTmFtZV1bYW50aWJpb3RpY05hbWVdO1xuICAgICAgICAgICAgICAgIGFudGliaW90aWNOYW1lcy5wdXNoKGFudGliaW90aWNOYW1lKTtcbiAgICAgICAgICAgICAgICBhbnRpYmlvdGljT3B0aW9uSHRtbEVsZW1lbnRzW2FudGliaW90aWNOYW1lXSA9ICc8b3B0aW9uIHZhbHVlPVwiJyArIGFudGliaW90aWNOYW1lLnJlcGxhY2UoV0dTVC5hbnRpYmlvdGljTmFtZVJlZ2V4LCAnXycpLnRvTG93ZXJDYXNlKCkgKyAnXCI+JyArIGFudGliaW90aWNOYW1lICsgJzwvb3B0aW9uPic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb3J0IGFudGliaW90aWMgbmFtZXNcbiAgICAgICAgYW50aWJpb3RpY05hbWVzLnNvcnQoKTtcblxuICAgICAgICB2YXIgYW50aWJpb3RpY0NvdW50ZXIgPSBhbnRpYmlvdGljTmFtZXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoYW50aWJpb3RpY0NvdW50ZXIgPSAwOyBhbnRpYmlvdGljQ291bnRlciA8IGFudGliaW90aWNOYW1lcy5sZW5ndGg7KSB7XG4gICAgICAgICAgICBhbnRpYmlvdGljTmFtZSA9IGFudGliaW90aWNOYW1lc1thbnRpYmlvdGljQ291bnRlcl07XG4gICAgICAgICAgICAkYW50aWJpb3RpY1NlbGVjdEVsZW1lbnQuYXBwZW5kKCQoYW50aWJpb3RpY09wdGlvbkh0bWxFbGVtZW50c1thbnRpYmlvdGljTmFtZV0pKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYW50aWJpb3RpY0NvdW50ZXIgPSBhbnRpYmlvdGljQ291bnRlciArIDE7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBXR1NULnNvY2tldC5jb25uZWN0aW9uLm9uKCdjb2xsZWN0aW9uVHJlZU1lcmdlTm90aWZpY2F0aW9uJywgZnVuY3Rpb24obWVyZ2VkQ29sbGVjdGlvblRyZWVEYXRhKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF0gUmVjZWl2ZWQgbWVyZ2VkIHRyZWUgbm90aWZpY2F0aW9uJyk7XG5cbiAgICAgICAgaWYgKFdHU1Quc3BlYWspIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSgnTWVyZ2VkIGNvbGxlY3Rpb25zJyk7XG4gICAgICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnNwZWFrKG1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbGxlY3Rpb25JZCA9IG1lcmdlZENvbGxlY3Rpb25UcmVlRGF0YS5tZXJnZWRDb2xsZWN0aW9uVHJlZUlkLFxuICAgICAgICAgICAgY29sbGVjdGlvblRyZWUgPSBtZXJnZWRDb2xsZWN0aW9uVHJlZURhdGEudHJlZSxcbiAgICAgICAgICAgIGFzc2VtYmx5SWRzRGF0YSA9IG1lcmdlZENvbGxlY3Rpb25UcmVlRGF0YS5hc3NlbWJsaWVzLFxuICAgICAgICAgICAgYXNzZW1ibHlJZHMgPSBbXTtcblxuICAgICAgICBhc3NlbWJseUlkcyA9IGFzc2VtYmx5SWRzRGF0YS5tYXAoZnVuY3Rpb24oYXNzZW1ibHkpe1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VtYmx5LmFzc2VtYmx5SWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBHZXQgYXNzZW1ibGllc1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBHZXR0aW5nIG1lcmdlZCBjb2xsZWN0aW9uIGFzc2VtYmxpZXMnKTtcbiAgICAgICAgY29uc29sZS5kaXIoYXNzZW1ibHlJZHMpO1xuXG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6ICcvYXBpL2Fzc2VtYmxpZXMvJyxcbiAgICAgICAgICAgIGRhdGF0eXBlOiAnanNvbicsIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzkxNTUyMTdcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBhc3NlbWJseUlkczogYXNzZW1ibHlJZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmRvbmUoZnVuY3Rpb24oYXNzZW1ibGllcywgdGV4dFN0YXR1cywganFYSFIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF0gR290IG1lcmdlZCBjb2xsZWN0aW9uIGFzc2VtYmxpZXMnKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZGlyKGFzc2VtYmxpZXMpO1xuXG4gICAgICAgICAgICBpbml0Q29sbGVjdGlvbihjb2xsZWN0aW9uSWQsIGFzc2VtYmxpZXMsIGNvbGxlY3Rpb25UcmVlKTtcbiAgICAgICAgICAgIHJlbmRlckNvbGxlY3Rpb25UcmVlcyhjb2xsZWN0aW9uSWQsIHtcbiAgICAgICAgICAgICAgICAvLyBTaG93IGJ1dHRvbnNcbiAgICAgICAgICAgICAgICBtYXRjaEFzc2VtYmx5TGlzdEJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtZXJnZVdpdGhCdXR0b246IHRydWVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIC8vIFByZXBhcmUgbmVhcmVzdCByZXByZXNlbnRhdGl2ZVxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICB2YXIgYXNzZW1ibHlJZCxcbiAgICAgICAgICAgICAgICBhc3NlbWJseSxcbiAgICAgICAgICAgICAgICBhc3NlbWJseVNjb3JlcztcblxuICAgICAgICAgICAgZm9yIChhc3NlbWJseUlkIGluIFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLmFzc2VtYmxpZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllcy5oYXNPd25Qcm9wZXJ0eShhc3NlbWJseUlkKSkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLmFzc2VtYmxpZXNbYXNzZW1ibHlJZF07XG4gICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5U2NvcmVzID0gYXNzZW1ibHlbJ0ZQX0NPTVAnXS5zY29yZXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCB0b3Agc2NvcmVcbiAgICAgICAgICAgICAgICAgICAgV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllc1thc3NlbWJseUlkXVsnRlBfQ09NUCddLnRvcFNjb3JlID0gY2FsY3VsYXRlQXNzZW1ibHlUb3BTY29yZShhc3NlbWJseVNjb3Jlcyk7XG4gICAgICAgICAgICAgICAgfSAvLyBpZlxuICAgICAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICAgICAgYWRkUmVzaXN0YW5jZVByb2ZpbGVUb0NvbGxlY3Rpb24oY29sbGVjdGlvbklkKTtcbiAgICAgICAgICAgIHBvcHVsYXRlTGlzdE9mQW50aWJpb3RpY3MoJCgnI3NlbGVjdC10cmVlLW5vZGUtYW50aWJpb3RpYy1tZXJnZWQnKSk7XG5cbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgLy8gRW5hYmxlIE1lcmdlIENvbGxlY3Rpb25zIGJ1dHRvblxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lcmdlQ29sbGVjdGlvblRyZWVzQnV0dG9uID0gJCgnLndnc3QtdHJlZS1jb250cm9sX19tZXJnZS1jb2xsZWN0aW9uLXRyZWVzJyk7XG4gICAgICAgICAgICAgICAgbWVyZ2VDb2xsZWN0aW9uVHJlZXNCdXR0b24uZmluZCgnLndnc3Qtc3Bpbm5lcicpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBtZXJnZUNvbGxlY3Rpb25UcmVlc0J1dHRvbi5maW5kKCcud2dzdC1zcGlubmVyLWxhYmVsJykuc2hvdygpO1xuICAgICAgICAgICAgICAgIG1lcmdlQ29sbGVjdGlvblRyZWVzQnV0dG9uLmF0dHIoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfSgpKTtcblxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAvLyBDbG9zZSBwYW5lbHNcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgLy8gQ2xvc2UgQ29sbGVjdGlvbiBwYW5lbFxuICAgICAgICAgICAgJCgnLndnc3QtcGFuZWxfX2NvbGxlY3Rpb24gLndnc3QtcGFuZWwtY29udHJvbC1idXR0b25fX2Nsb3NlJykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgIC8vIENsb3NlIENvbGxlY3Rpb24gVHJlZSBwYW5lbFxuICAgICAgICAgICAgJCgnLndnc3QtcGFuZWxfX2NvbGxlY3Rpb24tdHJlZSAud2dzdC1wYW5lbC1jb250cm9sLWJ1dHRvbl9fY2xvc2UnKS50cmlnZ2VyKCdjbGljaycpO1xuXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIC8vIE9wZW4gY29sbGVjdGlvbiB0cmVlIHBhbmVsXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uVHJlZVR5cGUgPSAnTUVSR0VEJyxcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uVHJlZVBhbmVsSWQgPSAnY29sbGVjdGlvblRyZWUnICsgJ19fJyArIGNvbGxlY3Rpb25JZCArICdfXycgKyBjb2xsZWN0aW9uVHJlZVR5cGU7XG5cbiAgICAgICAgICAgIGFjdGl2YXRlUGFuZWwoY29sbGVjdGlvblRyZWVQYW5lbElkKTtcbiAgICAgICAgICAgIHNob3dQYW5lbChjb2xsZWN0aW9uVHJlZVBhbmVsSWQpO1xuICAgICAgICAgICAgc2hvd1BhbmVsQm9keUNvbnRlbnQoY29sbGVjdGlvblRyZWVQYW5lbElkKTtcbiAgICAgICAgICAgIGJyaW5nUGFuZWxUb1RvcChjb2xsZWN0aW9uVHJlZVBhbmVsSWQpO1xuICAgICAgICB9KVxuICAgICAgICAuZmFpbChmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tXR1NUXVtFcnJvcl0g4pyXIEZhaWxlZCB0byBnZXQgYXNzZW1ibGllcycpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcih0ZXh0U3RhdHVzKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihqcVhIUik7XG5cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBMaXN0ZW4gdG8gbm90aWZpY2F0aW9uc1xuICAgIC8vIFRvIGRvOiBGaW5pc2ggcmVmYWN0b3JpbmcgYW5kIGNsZWFuIHVwXG4gICAgV0dTVC5zb2NrZXQuY29ubmVjdGlvbi5vbignYXNzZW1ibHlVcGxvYWROb3RpZmljYXRpb24nLCBmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAgICAgdmFyIGNvbGxlY3Rpb25JZCA9IGRhdGEuY29sbGVjdGlvbklkLFxuICAgICAgICAgICAgYXNzZW1ibHlJZCA9IGRhdGEuYXNzZW1ibHlJZCxcbiAgICAgICAgICAgIHVzZXJBc3NlbWJseUlkID0gZGF0YS51c2VyQXNzZW1ibHlJZCxcbiAgICAgICAgICAgIHJlc3VsdCA9IGRhdGEucmVzdWx0LFxuICAgICAgICAgICAgcmVzdWx0S2V5ID0gY29sbGVjdGlvbklkICsgJ19fJyArIGFzc2VtYmx5SWQgKyAnX18nICsgcmVzdWx0LFxuICAgICAgICAgICAgYXNzZW1ibGllcyA9IE9iamVjdC5rZXlzKGZhc3RhRmlsZXNBbmRNZXRhZGF0YSksXG4gICAgICAgICAgICBudW1iZXJPZkFuYWx5c2lzUmVzdWx0c1BlckFzc2VtYmx5ID0gT2JqZWN0LmtleXMoV0dTVC5hc3NlbWJseS5hbmFseXNpcykubGVuZ3RoLFxuICAgICAgICAgICAgbnVtYmVyT2ZBbmFseXNpc1Jlc3VsdHNQZXJBbGxBc3NlbWJsaWVzID0gbnVtYmVyT2ZBbmFseXNpc1Jlc3VsdHNQZXJBc3NlbWJseSAqIGFzc2VtYmxpZXMubGVuZ3RoLFxuICAgICAgICAgICAgbnVtYmVyT2ZBbmFseXNpc1Jlc3VsdHNQZXJDb2xsZWN0aW9uID0gT2JqZWN0LmtleXMoV0dTVC5jb2xsZWN0aW9uLmFuYWx5c2lzKS5sZW5ndGgsXG4gICAgICAgICAgICB0b3RhbE51bWJlck9mQW5hbHlzaXNSZXN1bHRzID0gbnVtYmVyT2ZBbmFseXNpc1Jlc3VsdHNQZXJBbGxBc3NlbWJsaWVzICsgbnVtYmVyT2ZBbmFseXNpc1Jlc3VsdHNQZXJDb2xsZWN0aW9uO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF1bU29ja2V0LmlvXSBSZWNlaXZlZCBhc3NlbWJseSB1cGxvYWQgbm90aWZpY2F0aW9uOicpO1xuICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdW1NvY2tldC5pb10gQXNzZW1ibHkgaWQ6ICcgKyBhc3NlbWJseUlkKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXVtTb2NrZXQuaW9dIFJlc3VsdDogJyArIHJlc3VsdCk7XG5cbiAgICAgICAgLy8gSWYgYSBuZXcgcmVzdWx0IHJlY2VpdmVkIChub3QgYSBkdXBsaWNhdGUgb25lKSwgdGhlbiBwcm9jZXNzIGl0XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhXR1NULnVwbG9hZC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0ubm90aWZpY2F0aW9ucy5hbGwpLmluZGV4T2YocmVzdWx0S2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIFRyYWNrIHJlY2VpdmVkIHJlc3VsdHNcbiAgICAgICAgICAgIFdHU1QudXBsb2FkLmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5ub3RpZmljYXRpb25zLmFsbFtyZXN1bHRLZXldID0gJ09LJztcblxuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnW1dHU1RdIMK7IFJlY2VpdmVkICcgKyBPYmplY3Qua2V5cyhXR1NULnVwbG9hZC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0ubm90aWZpY2F0aW9ucy5hbGwpLmxlbmd0aCArICcgb3V0IG9mICcgKyB0b3RhbE51bWJlck9mQW5hbHlzaXNSZXN1bHRzICsgJyBhc3NlbWJseSByZXN1bHRzJyApO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgYXNzZW1ibHkgdXBsb2FkIGJhciB1aSBvbmx5IGlmIGFuYWx5c2lzIHJlc3VsdCByZWxhdGVzIHRvIGFzc2VtYmx5LCBub3QgY29sbGVjdGlvblxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKFdHU1QuYXNzZW1ibHkuYW5hbHlzaXMpLmluZGV4T2YocmVzdWx0KSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVBc3NlbWJseVVwbG9hZFByb2dyZXNzVUkoYXNzZW1ibHlJZCwgdXNlckFzc2VtYmx5SWQsIG51bWJlck9mQW5hbHlzaXNSZXN1bHRzUGVyQXNzZW1ibHksIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgY29sbGVjdGlvbiB1cGxvYWQgYmFyIHVpXG4gICAgICAgICAgICB1cGRhdGVDb2xsZWN0aW9uVXBsb2FkUHJvZ3Jlc3NVSShjb2xsZWN0aW9uSWQsIHVzZXJBc3NlbWJseUlkLCBhc3NlbWJseUlkLCB0b3RhbE51bWJlck9mQW5hbHlzaXNSZXN1bHRzLCByZXN1bHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBXaGVuIGFsbCByZXN1bHRzIHdlcmUgcHJvY2Vzc2VkIC0gZ2V0IGNvbGxlY3Rpb25cbiAgICAgICAgICAgIGlmICh0b3RhbE51bWJlck9mQW5hbHlzaXNSZXN1bHRzID09PSBPYmplY3Qua2V5cyhXR1NULnVwbG9hZC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0ubm90aWZpY2F0aW9ucy5hbGwpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF0g4pyUIEZpbmlzaGVkIHVwbG9hZGluZyBhbmQgcHJvY2Vzc2luZyBuZXcgY29sbGVjdGlvbiAnICsgY29sbGVjdGlvbklkKTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZVBhbmVsKCdhc3NlbWJseVVwbG9hZFByb2dyZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0QXNzZW1seVVwbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICBnZXRDb2xsZWN0aW9uKGNvbGxlY3Rpb25JZCk7XG4gICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICB9IC8vIGlmXG4gICAgICAgIH0gLy8gaWZcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBlbmRBc3NlbWJseVVwbG9hZFByb2dyZXNzQmFyXG4gICAgICogQHBhcmFtIHt9IGNvbGxlY3Rpb25JZFxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGVuZEFzc2VtYmx5VXBsb2FkUHJvZ3Jlc3NCYXIgPSBmdW5jdGlvbihjb2xsZWN0aW9uSWQpIHtcbiAgICAgICAgLy8gVXBkYXRlIGJhcidzIHdpZHRoXG4gICAgICAgICQoJy51cGxvYWRpbmctYXNzZW1ibHktcHJvZ3Jlc3MtY29udGFpbmVyIC5wcm9ncmVzcy1iYXInKS53aWR0aCgnMTAwJScpO1xuICAgICAgICAvLyBVcGRhdGUgYXJpYS12YWx1ZW5vdyBhdHRyaWJ1dGVcbiAgICAgICAgJCgnLnVwbG9hZGluZy1hc3NlbWJseS1wcm9ncmVzcy1jb250YWluZXIgLnByb2dyZXNzLWJhcicpLmF0dHIoJ2FyaWEtdmFsdWVub3cnLCAxMDApO1xuICAgICAgICAvLyBVcGRhdGUgcGVyY2VudGFnZSB2YWx1ZVxuICAgICAgICAkKCcudXBsb2FkaW5nLWFzc2VtYmx5LXByb2dyZXNzLWNvbnRhaW5lciAucHJvZ3Jlc3MtcGVyY2VudGFnZScpLnRleHQoJzEwMCUnKTtcblxuICAgICAgICAvLyQoJy51cGxvYWRpbmctYXNzZW1ibHktcHJvZ3Jlc3MtY29udGFpbmVyIC5wcm9ncmVzcycpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblxuICAgICAgICAvLyBBbGxvdyBzbW9vdGggdmlzdWFsIHRyYW5zaXRpb24gb2YgZWxlbWVudHNcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgJCgnLnVwbG9hZGluZy1hc3NlbWJseS1wcm9ncmVzcy1jb250YWluZXIgLnByb2dyZXNzLXBlcmNlbnRhZ2UnKS50ZXh0KCdBbGwgZG9uZSEnKTtcbiAgICAgICAgICAgICQoJy51cGxvYWRpbmctYXNzZW1ibHktcHJvZ3Jlc3MtY29udGFpbmVyIC5wcm9ncmVzcycpLnNsaWRlVXAoZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgLy8gQWxsb3cgc21vb3RoIHZpc3VhbCB0cmFuc2l0aW9uIG9mIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkKCcudXBsb2FkZWQtYXNzZW1ibHktdXJsJykuc2xpZGVEb3duKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcudXBsb2FkaW5nLWFzc2VtYmx5LXByb2dyZXNzLWNvbnRhaW5lciAucHJvZ3Jlc3MtbGFiZWwnKS5zbGlkZVVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIDUwMCk7XG5cbiAgICAgICAgLy8gSXQgdGFrZXMgbGVzcyB0aGFuIDMwIHNlY29uZHMgdG8gcHJvY2VzcyBvbmUgYXNzZW1ibHlcbiAgICAgICAgLy92YXIgc2Vjb25kcyA9IDMwICogT2JqZWN0LmtleXMoZmFzdGFGaWxlc0FuZE1ldGFkYXRhKS5sZW5ndGg7XG4gICAgICAgICAgICAvL2Z1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vJCgnLnZpc2l0LXVybC1zZWNvbmRzLW51bWJlcicpLnRleHQoc2Vjb25kcyk7XG4gICAgICAgICAgICAgICAgLy9zZWNvbmRzID0gc2Vjb25kcyAtIDE7XG4gICAgICAgICAgICAgICAgLy9pZiAoc2Vjb25kcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBIaWRlIHByb2Nlc3NpbmcgYXNzZW1ibHkgc2Vjb25kcyBjb3VudGRvd25cbiAgICAgICAgICAgICAgICAgICAgLy8kKCcudXBsb2FkZWQtYXNzZW1ibHktcHJvY2Vzcy1jb3VudGRvd24tbGFiZWwnKS5mYWRlT3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyQoJy51cGxvYWRlZC1hc3NlbWJseS1wcm9jZXNzLXN0YXR1cycpLnRleHQoJ2ZpbmlzaGVkIHByb2Nlc3NpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgLy99KTtcbiAgICAgICAgICAgICAgICAvL31cblxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAkKCcud2dzdC1wYW5lbF9fY29sbGVjdGlvbi1wYW5lbCAuYXNzZW1ibGllcy1zdW1tYXJ5LXRhYmxlJykub24oJ2NsaWNrJywgJ3RyJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgKiBpZiAoZXZlbnQudGFyZ2V0LnR5cGUgIT09ICdyYWRpbycgJiYgZXZlbnQudGFyZ2V0LnR5cGUgIT09ICdjaGVja2JveCcpIHtcbiAgICAgKiAkKCc6Y2hlY2tib3gnLCB0aGlzKS50cmlnZ2VyKCdjbGljaycpO1xuICAgICAqIH1cbiAgICAgKiB9KTtcbiAgICAgKiBAbWV0aG9kIGlzRnVsbHNjcmVlbkFjdGl2ZVxuICAgICAqIEBwYXJhbSB7fSBmdWxsc2NyZWVuTmFtZVxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGlzRnVsbHNjcmVlbkFjdGl2ZSA9IGZ1bmN0aW9uKGZ1bGxzY3JlZW5OYW1lKSB7XG4gICAgICAgIHZhciBmdWxsc2NyZWVuRWxlbWVudCA9ICQoJ1tkYXRhLWZ1bGxzY3JlZW4tbmFtZT1cIicgKyBmdWxsc2NyZWVuTmFtZSArICdcIl0nKTtcblxuICAgICAgICBpZiAoZnVsbHNjcmVlbkVsZW1lbnQuaGFzQ2xhc3MoJ3dnc3QtZnVsbHNjcmVlbi0tYWN0aXZlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBpc0Z1bGxzY3JlZW5WaXNpYmxlXG4gICAgICogQHBhcmFtIHt9IGZ1bGxzY3JlZW5OYW1lXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgaXNGdWxsc2NyZWVuVmlzaWJsZSA9IGZ1bmN0aW9uKGZ1bGxzY3JlZW5OYW1lKSB7XG4gICAgICAgIHZhciBmdWxsc2NyZWVuRWxlbWVudCA9ICQoJ1tkYXRhLWZ1bGxzY3JlZW4tbmFtZT1cIicgKyBmdWxsc2NyZWVuTmFtZSArICdcIl0nKTtcblxuICAgICAgICBpZiAoZnVsbHNjcmVlbkVsZW1lbnQuaGFzQ2xhc3MoJ3dnc3QtZnVsbHNjcmVlbi0tdmlzaWJsZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBVc2VyIHdhbnRzIHRvIHNob3cvaGlkZSBhbGwgYXNzZW1ibGllcyBvbiBtYXBcbiAgICAkKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0uc2hvdy1hbGwtYXNzZW1ibGllcy1vbi1tYXAnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgc2hvd09uTWFwQ2hlY2tib3hlcyA9ICQodGhpcykuY2xvc2VzdCgnLmNvbGxlY3Rpb24tZGV0YWlscycpLmZpbmQoJy5jb2xsZWN0aW9uLWFzc2VtYmx5LWxpc3QgLmFzc2VtYmx5LWxpc3QtaGVhZGVyLW1hcCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKTtcbiAgICAgICAgaWYgKCQodGhpcykucHJvcCgnY2hlY2tlZCcpKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBhbGxcbiAgICAgICAgICAgIHNob3dPbk1hcENoZWNrYm94ZXMucHJvcCgnY2hlY2tlZCcsIHRydWUpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVW5jaGVjayBhbGxcbiAgICAgICAgICAgIHNob3dPbk1hcENoZWNrYm94ZXMucHJvcCgnY2hlY2tlZCcsIGZhbHNlKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGdldEFzc2VtYmxpZXNXaXRoSWRlbnRpY2FsUG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge30gbWFya2VyUG9zaXRpb25MYXRMbmdcbiAgICAgKiBAcmV0dXJuIGFzc2VtYmxpZXNXaXRoSWRlbnRpY2FsUG9zaXRpb25cbiAgICAgKi9cbiAgICB2YXIgZ2V0QXNzZW1ibGllc1dpdGhJZGVudGljYWxQb3NpdGlvbiA9IGZ1bmN0aW9uKG1hcmtlclBvc2l0aW9uTGF0TG5nKSB7XG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hpY2ggbWFya2VyIHRvIGNyZWF0ZVxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB2YXIgbmV3TWFya2VyTGF0aXR1ZGUgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtbGF0aXR1ZGUnKSxcbiAgICAgICAgICAgIG5ld01hcmtlckxvbmdpdHVkZSA9ICQodGhpcykuYXR0cignZGF0YS1sb25naXR1ZGUnKSxcbiAgICAgICAgICAgIG5ld01hcmtlclBvc2l0aW9uID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhuZXdNYXJrZXJMYXRpdHVkZSwgbmV3TWFya2VyTG9uZ2l0dWRlKTtcblxuICAgICAgICAvLyBDb3VudCBtYXJrZXJzIHdpdGggaWRlbnRpY2FsIHBvc2l0aW9uXG4gICAgICAgIHZhciBhc3NlbWJseUlkLFxuICAgICAgICAgICAgZXhpc3RpbmdNYXJrZXIsXG4gICAgICAgICAgICAvL251bWJlck9mTWFya2Vyc1dpdGhJZGVudGljYWxQb3NpdGlvbiA9IDEsXG4gICAgICAgICAgICBhc3NlbWJsaWVzV2l0aElkZW50aWNhbFBvc2l0aW9uID0gW107XG4gICAgICAgIGZvciAoYXNzZW1ibHlJZCBpbiBXR1NULmdlby5tYXAubWFya2Vycy5hc3NlbWJseSkge1xuICAgICAgICAgICAgZXhpc3RpbmdNYXJrZXIgPSBXR1NULmdlby5tYXAubWFya2Vycy5hc3NlbWJseVthc3NlbWJseUlkXTtcbiAgICAgICAgICAgIGlmIChtYXJrZXJQb3NpdGlvbkxhdExuZy5lcXVhbHMoZXhpc3RpbmdNYXJrZXIuZ2V0UG9zaXRpb24oKSkpIHtcbiAgICAgICAgICAgICAgICAvL251bWJlck9mTWFya2Vyc1dpdGhJZGVudGljYWxQb3NpdGlvbisrO1xuICAgICAgICAgICAgICAgIGFzc2VtYmxpZXNXaXRoSWRlbnRpY2FsUG9zaXRpb24ucHVzaChhc3NlbWJseUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc3NlbWJsaWVzV2l0aElkZW50aWNhbFBvc2l0aW9uO1xuICAgIH07XG5cbiAgICAvLyBVc2VyIHdhbnRzIHRvIHNob3cgYXNzZW1ibHkgb24gYSBtYXBcbiAgICAkKCcud2dzdC1wYW5lbF9fY29sbGVjdGlvbiAuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0Jykub24oJ2NoYW5nZScsICdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nLCBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLy8gTWFwXG4gICAgICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIHZhciBjaGVja2VkQXNzZW1ibHlJZCA9ICQodGhpcykuYXR0cignZGF0YS1hc3NlbWJseS1pZCcpLFxuICAgICAgICAgICAgY29sbGVjdGlvbklkID0gJCh0aGlzKS5jbG9zZXN0KCcud2dzdC1jb2xsZWN0aW9uJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyk7XG5cbiAgICAgICAgdmFyIGFsbENoZWNrZWRDaGVja2JveGVzID0gJCh0aGlzKS5jbG9zZXN0KCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0JykuZmluZCgnLnNob3ctb24tbWFwLWNoZWNrYm94IFt0eXBlPVwiY2hlY2tib3hcIl06Y2hlY2tlZCcpLFxuICAgICAgICAgICAgc2VsZWN0ZWRBc3NlbWJseUlkcyA9IFtdLFxuICAgICAgICAgICAgc2VsZWN0ZWRBc3NlbWJseUlkO1xuXG4gICAgICAgIGFsbENoZWNrZWRDaGVja2JveGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpe1xuICAgICAgICAgICAgc2VsZWN0ZWRBc3NlbWJseUlkID0gJCh0aGlzKS5hdHRyKCdkYXRhLWFzc2VtYmx5LWlkJyk7XG4gICAgICAgICAgICBzZWxlY3RlZEFzc2VtYmx5SWRzLnB1c2goc2VsZWN0ZWRBc3NlbWJseUlkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJpZ2dlck1hcE1hcmtlcnMoY29sbGVjdGlvbklkLCBzZWxlY3RlZEFzc2VtYmx5SWRzKTtcblxuICAgICAgICAvLyBPcGVuIG1hcCBwYW5lbCBpZiBpdCdzIG5vdCBkaXNwbGF5ZWQgYW5kIG1hcCBpcyBub3QgaW4gZnVsbHNjcmVlbiBtb2RlXG4gICAgICAgIGlmICgkKCcud2dzdC1mdWxsc2NyZWVuLS1hY3RpdmUnKS5hdHRyKCdkYXRhLWZ1bGxzY3JlZW4tbmFtZScpICE9PSAnbWFwJykge1xuICAgICAgICAgICAgaWYgKCEgJCgnLndnc3QtcGFuZWxfX21hcCcpLmhhc0NsYXNzKCd3Z3N0LXBhbmVsLS1hY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgIG9wZW5QYW5lbCgnbWFwJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyAvLyBGaW5kIG1hcmtlcnMgd2l0aCBpZGVudGljYWwgcG9zaXRpb25cbiAgICAgICAgLy8gLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gdmFyIG5ld01hcmtlckxhdGl0dWRlID0gJCh0aGlzKS5hdHRyKCdkYXRhLWxhdGl0dWRlJyksXG4gICAgICAgIC8vICAgICBuZXdNYXJrZXJMb25naXR1ZGUgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtbG9uZ2l0dWRlJyksXG4gICAgICAgIC8vICAgICBuZXdNYXJrZXJQb3NpdGlvbiA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobmV3TWFya2VyTGF0aXR1ZGUsIG5ld01hcmtlckxvbmdpdHVkZSk7XG5cbiAgICAgICAgLy8gdmFyIG1hcmtlckljb24gPSAnJyxcbiAgICAgICAgLy8gICAgIG1hcmtlcnNXaXRoSWRlbnRpY2FsUG9zaXRpb24gPSBnZXRBc3NlbWJsaWVzV2l0aElkZW50aWNhbFBvc2l0aW9uKG5ld01hcmtlclBvc2l0aW9uKTtcblxuICAgICAgICAvLyAvLyBDaGVja2VkXG4gICAgICAgIC8vIGlmICgkKHRoaXMpLmlzKFwiOmNoZWNrZWRcIikpIHtcbiAgICAgICAgLy8gICAgIC8vY29uc29sZS5sb2coJ1tXR1NUXSBDcmVhdGluZyBtYXJrZXIgZm9yIGFzc2VtYmx5IGlkOiAnICsgY2hlY2tlZEFzc2VtYmx5SWQpO1xuXG4gICAgICAgIC8vICAgICAvLyAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyAgICAgLy8gLy8gRmlndXJlIG91dCB3aGljaCBtYXJrZXIgdG8gY3JlYXRlXG4gICAgICAgIC8vICAgICAvLyAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyAgICAgLy8gdmFyIG5ld01hcmtlckxhdGl0dWRlID0gJCh0aGlzKS5hdHRyKCdkYXRhLWxhdGl0dWRlJyksXG4gICAgICAgIC8vICAgICAvLyAgICAgbmV3TWFya2VyTG9uZ2l0dWRlID0gJCh0aGlzKS5hdHRyKCdkYXRhLWxvbmdpdHVkZScpLFxuICAgICAgICAvLyAgICAgLy8gICAgIG5ld01hcmtlclBvc2l0aW9uID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhuZXdNYXJrZXJMYXRpdHVkZSwgbmV3TWFya2VyTG9uZ2l0dWRlKTtcblxuICAgICAgICAvLyAgICAgLy8gdmFyIG1hcmtlckljb24gPSAnJyxcbiAgICAgICAgLy8gICAgIC8vICAgICBtYXJrZXJzV2l0aElkZW50aWNhbFBvc2l0aW9uID0gZ2V0TWFya2Vyc1dpdGhJZGVudGljYWxQb3NpdGlvbihuZXdNYXJrZXJQb3NpdGlvbik7XG5cbiAgICAgICAgLy8gICAgIC8vIENvdW50IG1hcmtlcnMgd2l0aCBpZGVudGljYWwgcG9zaXRpb25cbiAgICAgICAgLy8gICAgIC8vIHZhciBtYXJrZXJJY29uID0gJycsXG4gICAgICAgIC8vICAgICAvLyAgICAgYXNzZW1ibHlJZCxcbiAgICAgICAgLy8gICAgIC8vICAgICBleGlzdGluZ01hcmtlcixcbiAgICAgICAgLy8gICAgIC8vICAgICAvL251bWJlck9mTWFya2Vyc1dpdGhJZGVudGljYWxQb3NpdGlvbiA9IDEsXG4gICAgICAgIC8vICAgICAvLyAgICAgbWFya2Vyc1dpdGhJZGVudGljYWxQb3NpdGlvbiA9IFtdO1xuICAgICAgICAvLyAgICAgLy8gZm9yIChhc3NlbWJseUlkIGluIFdHU1QuZ2VvLm1hcC5tYXJrZXJzLmFzc2VtYmx5KSB7XG4gICAgICAgIC8vICAgICAvLyAgICAgZXhpc3RpbmdNYXJrZXIgPSBXR1NULmdlby5tYXAubWFya2Vycy5hc3NlbWJseVthc3NlbWJseUlkXTtcbiAgICAgICAgLy8gICAgIC8vICAgICBpZiAobmV3TWFya2VyUG9zaXRpb24uZXF1YWxzKGV4aXN0aW5nTWFya2VyLmdldFBvc2l0aW9uKCkpKSB7XG4gICAgICAgIC8vICAgICAvLyAgICAgICAgIC8vbnVtYmVyT2ZNYXJrZXJzV2l0aElkZW50aWNhbFBvc2l0aW9uKys7XG4gICAgICAgIC8vICAgICAvLyAgICAgICAgIG1hcmtlcnNXaXRoSWRlbnRpY2FsUG9zaXRpb24ucHVzaChhc3NlbWJseUlkKTtcbiAgICAgICAgLy8gICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICAvLyB9XG5cbiAgICAgICAgLy8gICAgIC8vIG1hcmtlckljb24gPSAnLy9jaGFydC5hcGlzLmdvb2dsZS5jb20vY2hhcnQ/Y2hzdD1kX21hcF9waW5fbGV0dGVyJmNobGQ9JyArIChtYXJrZXJzV2l0aElkZW50aWNhbFBvc2l0aW9uLmxlbmd0aCArIDEpICsgJ3wwMEZGRkZ8MDAwMDAwJztcblxuICAgICAgICAvLyAgICAgLy8gLy8gSWYgbW9yZSB0aGFuIG9uZSBtYXJrZXIgaGFzIGlkZW50aWNhbCBwb3NpdGlvbiB0aGVuIGNoZWNrIHRoZWlyIHJlc2lzdGFuY2UgcHJvZmlsZXMgYW5kIGZpbmQgb3V0IGlmIHRoZXkgYXJlIGFueSBkaWZmZXJlbnRcbiAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKG1hcmtlcnNXaXRoSWRlbnRpY2FsUG9zaXRpb24ubGVuZ3RoICsgJyBtYXJrZXJzIHdpdGggaWRlbnRpY2FsIHBvc2l0aW9uJyk7XG4gICAgICAgIC8vICAgICAvLyAvLyBpZiAobWFya2Vyc1dpdGhJZGVudGljYWxQb3NpdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vICAgICAvLyAvLyAgICAgLy8gTWFya2VyIGFscmVhZHkgZXhpc3RzIGZvciB0aGlzIHBvc2l0aW9uIC0gZG8gbm90IGNyZWF0ZSBhIG5ldyBvbmUsIGp1c3QgdXBkYXRlIG1hcmtlciBpY29uXG4gICAgICAgIC8vICAgICAvLyAvLyAgICAgV0dTVC5nZW8ubWFwLm1hcmtlcnMuYXNzZW1ibHlbY2hlY2tlZEFzc2VtYmx5SWRdLnNldEljb24obWFya2VySWNvbik7XG4gICAgICAgIC8vICAgICAvLyAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgLy8gICAgIC8vIENyZWF0ZSBtYXJrZXJcbiAgICAgICAgLy8gICAgIC8vICAgICBXR1NULmdlby5tYXAubWFya2Vycy5hc3NlbWJseVtjaGVja2VkQXNzZW1ibHlJZF0gPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcbiAgICAgICAgLy8gICAgIC8vICAgICAgICAgcG9zaXRpb246IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoJCh0aGlzKS5hdHRyKCdkYXRhLWxhdGl0dWRlJyksICQodGhpcykuYXR0cignZGF0YS1sb25naXR1ZGUnKSksXG4gICAgICAgIC8vICAgICAvLyAgICAgICAgIG1hcDogV0dTVC5nZW8ubWFwLmNhbnZhcyxcbiAgICAgICAgLy8gICAgIC8vICAgICAgICAgaWNvbjogbWFya2VySWNvbixcbiAgICAgICAgLy8gICAgIC8vICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAvLyAgICAgLy8gICAgICAgICBvcHRpbWl6ZWQ6IHRydWUgLy8gaHR0cDovL3d3dy5ndXRlbnNpdGUuY29tL0dvb2dsZS1NYXBzLUN1c3RvbS1NYXJrZXJzLUN1dC1PZmYtQnktQ2FudmFzLVRpbGVzXG4gICAgICAgIC8vICAgICAvLyAgICAgfSk7XG5cbiAgICAgICAgLy8gICAgIC8vICAgICAvLyBPcGVuIGFzc2VtYmx5IG9uIG1hcmtlciBjbGlja1xuICAgICAgICAvLyAgICAgLy8gICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKFdHU1QuZ2VvLm1hcC5tYXJrZXJzLmFzc2VtYmx5W2NoZWNrZWRBc3NlbWJseUlkXSwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vICAgICAvLyAgICAgICAgIG9wZW5Bc3NlbWJseVBhbmVsKGNoZWNrZWRBc3NlbWJseUlkKTtcbiAgICAgICAgLy8gICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gICAgIC8vIC8vIH1cblxuICAgICAgICAvLyAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gICAgIC8vIFVwZGF0ZSBsaXN0IG9mIGFzc2VtYmxpZXNcbiAgICAgICAgLy8gICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgICAgLy8gICAgIC8vIEhpZ2hsaWdodCByb3dcbiAgICAgICAgLy8gICAgICQodGhpcykuY2xvc2VzdCgnLmFzc2VtYmx5LWxpc3QtaXRlbScpLmFkZENsYXNzKFwicm93LXNlbGVjdGVkXCIpO1xuXG4gICAgICAgIC8vICAgICBpZiAoISBpc0Z1bGxzY3JlZW5WaXNpYmxlKCdtYXAnKSkge1xuICAgICAgICAvLyAgICAgICAgIGlmICghIGlzUGFuZWxWaXNpYmxlKCdtYXAnKSkge1xuICAgICAgICAvLyAgICAgICAgICAgICBvcGVuUGFuZWwoJ21hcCcpO1xuICAgICAgICAvLyAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKFdHU1QuZ2VvLm1hcC5jYW52YXMsICdyZXNpemUnKTtcbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICB9XG5cbiAgICAgICAgLy8gICAgIC8vIEV4dGVuZCBtYXJrZXJCb3VuZHMgd2l0aCBlYWNoIG1ldGFkYXRhIG1hcmtlclxuICAgICAgICAvLyAgICAgLy9XR1NULmdlby5tYXAubWFya2VyQm91bmRzLmV4dGVuZChXR1NULmdlby5tYXAubWFya2Vycy5hc3NlbWJseVtjaGVja2VkQXNzZW1ibHlJZF0uZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgIC8vICAgICBhc3NlbWJseU1hcmtlckJvdW5kcy5leHRlbmQoV0dTVC5nZW8ubWFwLm1hcmtlcnMuYXNzZW1ibHlbY2hlY2tlZEFzc2VtYmx5SWRdLmdldFBvc2l0aW9uKCkpO1xuXG4gICAgICAgIC8vIC8vIFVuY2hlY2tlZFxuICAgICAgICAvLyB9IGVsc2Uge1xuXG4gICAgICAgIC8vICAgICBpZiAodHlwZW9mIFdHU1QuZ2VvLm1hcC5tYXJrZXJzLmFzc2VtYmx5W2NoZWNrZWRBc3NlbWJseUlkXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdIFJlbW92aW5nIG1hcmtlciBmb3IgYXNzZW1ibHkgaWQ6ICcgKyBjaGVja2VkQXNzZW1ibHlJZCk7XG5cbiAgICAgICAgLy8gICAgICAgICBtYXJrZXJJY29uID0gJy8vY2hhcnQuYXBpcy5nb29nbGUuY29tL2NoYXJ0P2Noc3Q9ZF9tYXBfcGluX2xldHRlciZjaGxkPScgKyAobWFya2Vyc1dpdGhJZGVudGljYWxQb3NpdGlvbi5sZW5ndGggLSAxKSArICd8MDBGRkZGfDAwMDAwMCc7XG5cbiAgICAgICAgLy8gICAgICAgICAvLyBSZW1vdmUgbWFya2VyXG4gICAgICAgIC8vICAgICAgICAgV0dTVC5nZW8ubWFwLm1hcmtlcnMuYXNzZW1ibHlbY2hlY2tlZEFzc2VtYmx5SWRdLnNldE1hcChudWxsKTtcbiAgICAgICAgLy8gICAgICAgICBkZWxldGUgV0dTVC5nZW8ubWFwLm1hcmtlcnMuYXNzZW1ibHlbY2hlY2tlZEFzc2VtYmx5SWRdO1xuXG4gICAgICAgIC8vICAgICAgICAgZm9yIChhc3NlbWJseUlkTWFya2VyIGluIFdHU1QuZ2VvLm1hcC5tYXJrZXJzLmFzc2VtYmx5KSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIGlmIChXR1NULmdlby5tYXAubWFya2Vycy5hc3NlbWJseS5oYXNPd25Qcm9wZXJ0eShhc3NlbWJseUlkTWFya2VyKSkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgYXNzZW1ibHlNYXJrZXJCb3VuZHMuZXh0ZW5kKFdHU1QuZ2VvLm1hcC5tYXJrZXJzLmFzc2VtYmx5W2Fzc2VtYmx5SWRNYXJrZXJdLmdldFBvc2l0aW9uKCkpOyAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuXG4gICAgICAgIC8vICAgICAgICAgLy8gVXBkYXRlIG90aGVyIGlkZW50aWNhbCBtYXJrZXJzXG4gICAgICAgIC8vICAgICAgICAgdmFyIGFzc2VtYmx5SWQsXG4gICAgICAgIC8vICAgICAgICAgICAgIGV4aXN0aW5nTWFya2VyO1xuICAgICAgICAvLyAgICAgICAgICAgICAvL251bWJlck9mTWFya2Vyc1dpdGhJZGVudGljYWxQb3NpdGlvbiA9IDEsXG4gICAgICAgIC8vICAgICAgICAgICAgIC8vYXNzZW1ibGllc1dpdGhJZGVudGljYWxQb3NpdGlvbiA9IFtdO1xuICAgICAgICAvLyAgICAgICAgIGZvciAoYXNzZW1ibHlJZCBpbiBXR1NULmdlby5tYXAubWFya2Vycy5hc3NlbWJseSkge1xuICAgICAgICAvLyAgICAgICAgICAgICBleGlzdGluZ01hcmtlciA9IFdHU1QuZ2VvLm1hcC5tYXJrZXJzLmFzc2VtYmx5W2Fzc2VtYmx5SWRdO1xuICAgICAgICAvLyAgICAgICAgICAgICBpZiAobmV3TWFya2VyUG9zaXRpb24uZXF1YWxzKGV4aXN0aW5nTWFya2VyLmdldFBvc2l0aW9uKCkpKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAvL251bWJlck9mTWFya2Vyc1dpdGhJZGVudGljYWxQb3NpdGlvbisrO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgLy9hc3NlbWJsaWVzV2l0aElkZW50aWNhbFBvc2l0aW9uLnB1c2goYXNzZW1ibHlJZCk7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBleGlzdGluZ01hcmtlci5zZXRJY29uKG1hcmtlckljb24pO1xuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuXG4gICAgICAgIC8vICAgICAgICAgLy8gRXh0ZW5kIG1hcmtlckJvdW5kcyB3aXRoIGVhY2ggbWV0YWRhdGEgbWFya2VyXG4gICAgICAgIC8vICAgICAgICAgLy9XR1NULmdlby5tYXAubWFya2VyQm91bmRzLmV4dGVuZChXR1NULmdlby5tYXAubWFya2Vycy5hc3NlbWJseVtjaGVja2VkQXNzZW1ibHlJZF0uZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgIC8vICAgICB9XG5cbiAgICAgICAgLy8gICAgIC8vIFJlbW92ZSBub2RlIGhpZ2hsaWdoaW5nXG4gICAgICAgIC8vICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1saXN0LWl0ZW0nKS5yZW1vdmVDbGFzcyhcInJvdy1zZWxlY3RlZFwiKTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIGlmIChhc3NlbWJseU1hcmtlckJvdW5kcy5pc0VtcHR5KCkpIHtcbiAgICAgICAgLy8gICAgIFdHU1QuZ2VvLm1hcC5jYW52YXMuc2V0Q2VudGVyKG5ldyBnb29nbGUubWFwcy5MYXRMbmcoNDguNjkwODMzMzMzMywgOS4xNDA1NTU1NTU1NikpO1xuICAgICAgICAvLyAgICAgV0dTVC5nZW8ubWFwLmNhbnZhcy5zZXRab29tKDUpO1xuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgLy8gUGFuIHRvIG1hcmtlciBib3VuZHNcbiAgICAgICAgLy8gICAgIC8vV0dTVC5nZW8ubWFwLmNhbnZhcy5wYW5Ub0JvdW5kcyhXR1NULmdlby5tYXAubWFya2VyQm91bmRzKTtcbiAgICAgICAgLy8gICAgIFdHU1QuZ2VvLm1hcC5jYW52YXMucGFuVG9Cb3VuZHMoYXNzZW1ibHlNYXJrZXJCb3VuZHMpO1xuICAgICAgICAvLyAgICAgLy8gU2V0IHRoZSBtYXAgdG8gZml0IG1hcmtlciBib3VuZHNcbiAgICAgICAgLy8gICAgIC8vV0dTVC5nZW8ubWFwLmNhbnZhcy5maXRCb3VuZHMoV0dTVC5nZW8ubWFwLm1hcmtlckJvdW5kcyk7XG4gICAgICAgIC8vICAgICBXR1NULmdlby5tYXAuY2FudmFzLmZpdEJvdW5kcyhhc3NlbWJseU1hcmtlckJvdW5kcyk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBDaGVjayBpZiB5b3UgaGF2ZSBzZWxlY3RlZCBhbGwgKGZpbHRlcmVkIG91dCkgYXNzZW1ibGllc1xuICAgICAgICBpZiAoJCh0aGlzKS5jbG9zZXN0KCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0JykuZmluZCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdOm5vdCg6Y2hlY2tlZCknKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICQoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXS5zaG93LWFsbC1hc3NlbWJsaWVzLW9uLW1hcCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXS5zaG93LWFsbC1hc3NlbWJsaWVzLW9uLW1hcCcpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFVzZXIgd2FudHMgdG8gc2VsZWN0IHJlcHJlc2VudGF0aXZlIHRyZWUgYnJhbmNoXG4gICAgLy8kKCcud2dzdC1wYW5lbF9fY29sbGVjdGlvbiAuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0Jykub24oJ2NoYW5nZScsICdpbnB1dFt0eXBlPVwicmFkaW9cIl0nLCBmdW5jdGlvbihlKSB7XG4gICAgJCgnLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdCcpLm9uKCdjaGFuZ2UnLCAnaW5wdXRbdHlwZT1cInJhZGlvXCJdJywgZnVuY3Rpb24oZSkge1xuXG4gICAgICAgIHZhciBzZWxlY3RlZEFzc2VtYmx5SWQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtYXNzZW1ibHktaWQnKSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25JZCA9ICQodGhpcykuY2xvc2VzdCgnLndnc3QtY29sbGVjdGlvbi1pbmZvJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyk7XG5cbiAgICAgICAgJCgnLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdCAuYXNzZW1ibHktbGlzdC1pdGVtLnJvdy1zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdyb3ctc2VsZWN0ZWQnKTtcbiAgICAgICAgJCgnLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdCAuYXNzZW1ibHktbGlzdC1pdGVtW2RhdGEtYXNzZW1ibHktaWQ9XCInICsgc2VsZWN0ZWRBc3NlbWJseUlkICsgJ1wiXScpLmFkZENsYXNzKCdyb3ctc2VsZWN0ZWQnKTtcblxuICAgICAgICBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS50cmVlLmNhbnZhcy5zZWxlY3ROb2RlcyhzZWxlY3RlZEFzc2VtYmx5SWQpO1xuXG4gICAgICAgIC8vIHZhciBsZWF2ZXMgPSBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS50cmVlLmNhbnZhcy5sZWF2ZXM7XG4gICAgICAgIC8vIGNvbnNvbGUuZGlyKFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWUuY2FudmFzLmxlYXZlcyk7XG4gICAgICAgIC8vIHZhciBzZWxlY3RlZExlYWYgPSAkLmdyZXAobGVhdmVzLCBmdW5jdGlvbihsZWFmKXsgcmV0dXJuIGxlYWYuaWQgPT09IHNlbGVjdGVkQXNzZW1ibHlJZDsgfSk7XG4gICAgICAgIC8vIHNlbGVjdGVkTGVhZlswXS5ub2RlU2hhcGUgPSAnc3F1YXJlJztcbiAgICAgICAgLy9XR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS50cmVlLmNhbnZhcy5sZWF2ZXNbc2VsZWN0ZWRBc3NlbWJseUlkXS5ub2RlU2hhcGUgPSAncmVjdGFuZ3VsYXInO1xuXG4gICAgICAgIC8vIFNob3cgY29sbGVjdGlvbiB0cmVlIHBhbmVsXG4gICAgICAgIGFjdGl2YXRlUGFuZWwoJ2NvbGxlY3Rpb25UcmVlJyk7XG4gICAgICAgIHNob3dQYW5lbCgnY29sbGVjdGlvblRyZWUnKTtcbiAgICAgICAgc2hvd1BhbmVsQm9keUNvbnRlbnQoJ2NvbGxlY3Rpb25UcmVlJyk7XG4gICAgICAgIGJyaW5nUGFuZWxUb1RvcCgnY29sbGVjdGlvblRyZWUnKTtcblxuICAgICAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAvLyBUcmVlIC0gVEhJUyBJUyBGT1IgU0VMRUNUSU5HIE1VTFRJUExFIEFTU0VNQkxJRVNcbiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgICAgICAvLyAvLyBTdG9yZSBub2RlIGlkcyB0byBoaWdobGlnaHQgaW4gYSBzdHJpbmdcbiAgICAgICAgLy8gdmFyIGNoZWNrZWRBc3NlbWJseU5vZGVzU3RyaW5nID0gJycsXG4gICAgICAgIC8vICAgICBjb2xsZWN0aW9uSWQgPSAkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyk7XG5cbiAgICAgICAgLy8gLy8gR2V0IG5vZGUgaWQgb2YgZWFjaCBub2RlIHRoYXQgdXNlciBzZWxlY3RlZCB2aWEgY2hlY2tlZCBjaGVja2JveCBcbiAgICAgICAgLy8gJCgnLndnc3QtcGFuZWxfX2NvbGxlY3Rpb24gLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdCBpbnB1dFt0eXBlPVwicmFkaW9cIl06Y2hlY2tlZCcpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gICAgIC8vIENvbmNhdCBhc3NlbWJseSBpZHMgdG8gc3RyaW5nXG4gICAgICAgIC8vICAgICAvLyBVc2UgdGhpcyBzdHJpbmcgdG8gaGlnaGxpZ2h0IG5vZGVzIG9uIHRyZWVcbiAgICAgICAgLy8gICAgIGlmIChjaGVja2VkQXNzZW1ibHlOb2Rlc1N0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vICAgICAgICAgY2hlY2tlZEFzc2VtYmx5Tm9kZXNTdHJpbmcgPSBjaGVja2VkQXNzZW1ibHlOb2Rlc1N0cmluZyArICcsJyArICQodGhpcykuYXR0cignZGF0YS1hc3NlbWJseS1pZCcpO1xuICAgICAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICBjaGVja2VkQXNzZW1ibHlOb2Rlc1N0cmluZyA9ICQodGhpcykuYXR0cignZGF0YS1hc3NlbWJseS1pZCcpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9KTtcblxuICAgICAgICAvLyAvL2NvbnNvbGUuZGVidWcoJ2NoZWNrZWRBc3NlbWJseU5vZGVzU3RyaW5nOiAnICsgY2hlY2tlZEFzc2VtYmx5Tm9kZXNTdHJpbmcpO1xuICAgICAgICAvLyAvL2NvbnNvbGUuZGlyKFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWUuY2FudmFzKTtcblxuICAgICAgICAvLyAvLyBIaWdobGlnaHQgYXNzZW1ibHkgd2l0aCB0aGUgaGlnaGVzdCBzY29yZSBvbiB0aGUgcmVwcmVzZW50YXRpdmUgdHJlZVxuXG4gICAgICAgIC8vIFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWUuY2FudmFzLnNlbGVjdE5vZGVzKGNoZWNrZWRBc3NlbWJseU5vZGVzU3RyaW5nKTtcbiAgICAgICAgLy8gLy9XR1NULnJlcHJlc2VudGF0aXZlVHJlZS50cmVlLnNlbGVjdE5vZGVzKGNoZWNrZWRBc3NlbWJseU5vZGVzU3RyaW5nKTtcbiAgICB9KTtcblxuICAgICQoJy5hc3NlbWJsaWVzLXVwbG9hZC1jYW5jZWwtYnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIENsb3NlIEZBU1RBIGZpbGVzIHVwbG9hZCBwYW5lbFxuICAgICAgICAkKCcuYXNzZW1ibHktdXBsb2FkLXBhbmVsJykuaGlkZSgpO1xuICAgICAgICAvLyBSZW1vdmUgc3RvcmVkIGRyb3BwZWQgRkFTVEEgZmlsZXNcbiAgICAgICAgZmFzdGFGaWxlc0FuZE1ldGFkYXRhID0ge307XG4gICAgICAgIC8vIFJlbW92ZSBzdG9yZWQgc2VsZWN0ZWQgRkFTVEEgZmlsZVxuICAgICAgICBzZWxlY3RlZEZhc3RhRmlsZU5hbWUgPSAnJztcbiAgICAgICAgLy8gUmVtb3ZlIGFuYWx5dGljcyBIVE1MIGVsZW1lbnRcbiAgICAgICAgJCgnLmFzc2VtYmx5LWxpc3QtY29udGFpbmVyIHVsJykuaHRtbCgnJyk7XG4gICAgICAgIC8vIFJlbW92ZSBtZXRhZGF0YSBIVE1MIGVsZW1lbnRcbiAgICAgICAgJCgnLmFzc2VtYmx5LW1ldGFkYXRhLWxpc3QtY29udGFpbmVyIHVsJykuaHRtbCgnJyk7XG4gICAgICAgIC8vIFJlc2V0IHByb2dyZXNzIGJhclxuICAgICAgICAvLyBVcGRhdGUgYmFyJ3Mgd2lkdGhcbiAgICAgICAgJCgnLmFkZGluZy1tZXRhZGF0YS1wcm9ncmVzcy1jb250YWluZXIgLnByb2dyZXNzLWJhcicpLndpZHRoKCcwJScpO1xuICAgICAgICAvLyBVcGRhdGUgYXJpYS12YWx1ZW5vdyBhdHRyaWJ1dGVcbiAgICAgICAgJCgnLmFkZGluZy1tZXRhZGF0YS1wcm9ncmVzcy1jb250YWluZXIgLnByb2dyZXNzLWJhcicpLmF0dHIoJ2FyaWEtdmFsdWVub3cnLCAwKTtcbiAgICAgICAgLy8gVXBkYXRlIHBlcmNlbnRhZ2UgdmFsdWVcbiAgICAgICAgJCgnLmFkZGluZy1tZXRhZGF0YS1wcm9ncmVzcy1jb250YWluZXIgLnByb2dyZXNzLXBlcmNlbnRhZ2UnKS50ZXh0KCcwJScpO1xuICAgICAgICAvLyBSZW1vdmUgbWV0YWRhdGEgbWFya2VyXG4gICAgICAgIFdHU1QuZ2VvLm1hcC5tYXJrZXJzLm1ldGFkYXRhLnNldE1hcChudWxsKTtcbiAgICB9KTtcblxuICAgIC8vIHZhciBhc3NlbWJseVVwbG9hZERvbmVIYW5kbGVyID0gZnVuY3Rpb24oY29sbGVjdGlvbklkLCBhc3NlbWJseUlkKSB7XG4gICAgLy8gICAgIHJldHVybiBmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBTdWNjZXNzZnVsbHkgdXBsb2FkZWQgJyArIGFzc2VtYmx5SWQgKyAnIGFzc2VtYmx5Jyk7XG5cbiAgICAvLyAgICAgICAgIC8vIENyZWF0ZSBhc3NlbWJseSBVUkxcbiAgICAvLyAgICAgICAgIC8vdmFyIHVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lICsgKGxvY2F0aW9uLnBvcnQgPyAnOicgKyBsb2NhdGlvbi5wb3J0IDogJycpICsgJy9hc3NlbWJseS8nICsgJ0ZQX0NPTVBfJyArIGFzc2VtYmx5SWQ7XG4gICAgLy8gICAgICAgICAvLyQoJy51cGxvYWRlZC1hc3NlbWJseS11cmwtaW5wdXQnKS52YWwodXJsKTtcblxuICAgIC8vICAgICAgICAgLy8gTWFyayBhc3NlbWJseSBhcyB1cGxvYWRlZFxuICAgIC8vICAgICAgICAgZmFzdGFGaWxlc0FuZE1ldGFkYXRhW2Fzc2VtYmx5SWRdLnVwbG9hZGVkID0gdHJ1ZTtcblxuICAgIC8vICAgICAgICAgdXBkYXRlQXNzZW1ibHlVcGxvYWRQcm9ncmVzcyhjb2xsZWN0aW9uSWQsIGZhc3RhRmlsZXNBbmRNZXRhZGF0YVthc3NlbWJseUlkXS5uYW1lLCBhc3NlbWJseUlkLCBXR1NULmFzc2VtYmx5LmFuYWx5c2lzLlVQTE9BRF9PSyk7XG4gICAgLy8gICAgIH07XG4gICAgLy8gfTtcblxuICAgIHZhciBudW1iZXJPZkZpbGVzUHJvY2Vzc2luZyA9IDAsXG4gICAgICAgIFBBUkFMTEVMX1VQTE9BRF9BU1NFTUJMWV9MSU1JVCA9IDUsXG4gICAgICAgIEFTU0VNQkxZX1VQTE9BRF9USU1FUiA9IDIwMDA7XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgdXBsb2FkQXNzZW1ibHlcbiAgICAgKiBAcGFyYW0ge30gY29sbGVjdGlvbklkXG4gICAgICogQHBhcmFtIHt9IGFzc2VtYmx5SWRcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciB1cGxvYWRBc3NlbWJseSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb25JZCwgYXNzZW1ibHlJZCkge1xuICAgICAgICAvLyBVcGxvYWQgYXNzZW1ibHkgb25seSBpZiB5b3UgYXJlIHdpdGhpbiBwYXJhbGxlbCBhc3NlbWJseSB1cGxvYWQgbGltaXRcbiAgICAgICAgaWYgKG51bWJlck9mRmlsZXNQcm9jZXNzaW5nIDwgUEFSQUxMRUxfVVBMT0FEX0FTU0VNQkxZX0xJTUlUKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdIFVwbG9hZGluZyAnICsgYXNzZW1ibHlJZCArICcgYXNzZW1ibHknKTtcblxuICAgICAgICAgICAgLy8gSW5jcmVtZW50IG51bWJlciBvZiBhc3NlbWJseSB1cGxvYWQgY291bnRlclxuICAgICAgICAgICAgbnVtYmVyT2ZGaWxlc1Byb2Nlc3NpbmcgPSBudW1iZXJPZkZpbGVzUHJvY2Vzc2luZyArIDE7XG4gICAgICAgICAgICAvLyBTZXQgc29ja2V0IHJvb20gaWRcbiAgICAgICAgICAgIGZhc3RhRmlsZXNBbmRNZXRhZGF0YVthc3NlbWJseUlkXS5zb2NrZXRSb29tSWQgPSBXR1NULnNvY2tldC5yb29tSWQ7XG4gICAgICAgICAgICAvLyBTZXQgYXNzZW1ibHkgaWRcbiAgICAgICAgICAgIGZhc3RhRmlsZXNBbmRNZXRhZGF0YVthc3NlbWJseUlkXS5hc3NlbWJseUlkID0gYXNzZW1ibHlJZDtcbiAgICAgICAgICAgIC8vIFBvc3QgYXNzZW1ibHlcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIHVybDogJy9hc3NlbWJseS9hZGQvJyxcbiAgICAgICAgICAgICAgICBkYXRhdHlwZTogJ2pzb24nLCAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS85MTU1MjE3XG4gICAgICAgICAgICAgICAgZGF0YTogZmFzdGFGaWxlc0FuZE1ldGFkYXRhW2Fzc2VtYmx5SWRdXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLy8uZG9uZShhc3NlbWJseVVwbG9hZERvbmVIYW5kbGVyKGNvbGxlY3Rpb25JZCwgYXNzZW1ibHlJZCkpXG4gICAgICAgICAgICAuZG9uZShmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmFpbChmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdW0VSUk9SXSBGYWlsZWQgdG8gc2VuZCBGQVNUQSBmaWxlIG9iamVjdCB0byBzZXJ2ZXIgb3IgcmVjZWl2ZWQgZXJyb3IgbWVzc2FnZScpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IodGV4dFN0YXR1cyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvclRocm93bik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihqcVhIUik7XG5cbiAgICAgICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKHRleHRTdGF0dXMpO1xuICAgICAgICAgICAgICAgIC8vdXBkYXRlQXNzZW1ibHlVcGxvYWRQcm9ncmVzc0JhcigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHVwbG9hZEFzc2VtYmx5LCBBU1NFTUJMWV9VUExPQURfVElNRVIsIGNvbGxlY3Rpb25JZCwgYXNzZW1ibHlJZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIEdFVF9DT0xMRUNUSU9OX0lEX1RJTUVSID0gMjAwMDtcblxuICAgICQoJy5hc3NlbWJsaWVzLXVwbG9hZC1yZWFkeS1idXR0b24nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBHZXR0aW5nIHJlYWR5IHRvIHVwbG9hZCBhc3NlbWJsaWVzIGFuZCBtZXRhZGF0YScpO1xuXG4gICAgICAgIC8vIFJlc2V0IHBhbmVsc1xuICAgICAgICByZXNldFBhbmVsQXNzZW1ibHlVcGxvYWRNZXRhZGF0YSgpO1xuICAgICAgICByZXNldFBhbmVsQXNzZW1ibHlVcGxvYWRQcm9ncmVzcygpO1xuXG4gICAgICAgIC8vIERpc2FibGUgdXBsb2FkIGJ1dHRvblxuICAgICAgICAvLyQodGhpcykuYXR0cignZGlzYWJsZWQnLCdkaXNhYmxlZCcpO1xuXG4gICAgICAgIC8vIFJlbW92ZSBtZXRhZGF0YSBtYXJrZXJcbiAgICAgICAgV0dTVC5nZW8ubWFwLm1hcmtlcnMubWV0YWRhdGEuc2V0TWFwKG51bGwpO1xuXG4gICAgICAgIC8vIENsb3NlIHBhbmVsc1xuICAgICAgICBkZWFjdGl2YXRlUGFuZWwoWydhc3NlbWJseVVwbG9hZE5hdmlnYXRvcicsICdhc3NlbWJseVVwbG9hZEFuYWx5dGljcycsICdhc3NlbWJseVVwbG9hZE1ldGFkYXRhJ10pO1xuXG4gICAgICAgIFdHU1QuZHJhZ0FuZERyb3AuZmlsZXMgPSBbXTtcblxuICAgICAgICB2YXIgdXNlckFzc2VtYmx5SWQsXG4gICAgICAgICAgICBhc3NlbWJsdFVwbG9hZFByb2dyZXNzVGVtcGxhdGUsXG4gICAgICAgICAgICBhc3NlbWJseVVwbG9hZFByb2dyZXNzSHRtbDtcblxuICAgICAgICAvLyBQb3N0IGVhY2ggZmFzdGEgZmlsZSBzZXBhcmF0ZWx5XG4gICAgICAgIGZvciAodXNlckFzc2VtYmx5SWQgaW4gZmFzdGFGaWxlc0FuZE1ldGFkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZmFzdGFGaWxlc0FuZE1ldGFkYXRhLmhhc093blByb3BlcnR5KHVzZXJBc3NlbWJseUlkKSkge1xuXG4gICAgICAgICAgICAgICAgYXNzZW1ibHRVcGxvYWRQcm9ncmVzc1RlbXBsYXRlID1cbiAgICAgICAgICAgICAgICAnPHRyIGRhdGEtYXNzZW1ibHktaWQ9XCJ7e3VzZXJBc3NlbWJseUlkfX1cIj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzx0ZCBjbGFzcz1cImFzc2VtYmx5LXVwbG9hZC1uYW1lXCI+e3t1c2VyQXNzZW1ibHlJZH19PC90ZD4nXG4gICAgICAgICAgICAgICAgICAgICsgJzx0ZCBjbGFzcz1cImFzc2VtYmx5LXVwbG9hZC1wcm9ncmVzc1wiPidcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJwcm9ncmVzcyBwcm9ncmVzcy1zdHJpcGVkIGFjdGl2ZVwiPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBwcm9ncmVzcy1iYXItaW5mb1wiICByb2xlPVwicHJvZ3Jlc3NiYXJcIiBhcmlhLXZhbHVlbm93PVwiMFwiIGFyaWEtdmFsdWVtaW49XCIwXCIgYXJpYS12YWx1ZW1heD1cIjEwMFwiIHN0eWxlPVwid2lkdGg6IDAlXCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzwvdGQ+J1xuICAgICAgICAgICAgICAgICAgICArICc8dGQgY2xhc3M9XCJhc3NlbWJseS11cGxvYWQtcmVzdWx0IGFzc2VtYmx5LXVwbG9hZC11cGxvYWRlZFwiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZWNvcmRcIj48L3NwYW4+PC90ZD4nXG4gICAgICAgICAgICAgICAgICAgICsgJzx0ZCBjbGFzcz1cImFzc2VtYmx5LXVwbG9hZC1yZXN1bHQgYXNzZW1ibHktdXBsb2FkLXJlc3VsdC1tbHN0XCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXJlY29yZFwiPjwvc3Bhbj48L3RkPidcbiAgICAgICAgICAgICAgICAgICAgKyAnPHRkIGNsYXNzPVwiYXNzZW1ibHktdXBsb2FkLXJlc3VsdCBhc3NlbWJseS11cGxvYWQtcmVzdWx0LWZwLWNvbXBcIj48c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcmVjb3JkXCI+PC9zcGFuPjwvdGQ+J1xuICAgICAgICAgICAgICAgICAgICArICc8dGQgY2xhc3M9XCJhc3NlbWJseS11cGxvYWQtcmVzdWx0IGFzc2VtYmx5LXVwbG9hZC1yZXN1bHQtcGFhcnNucFwiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZWNvcmRcIj48L3NwYW4+PC90ZD4nXG4gICAgICAgICAgICAgICAgICAgICsgJzx0ZCBjbGFzcz1cImFzc2VtYmx5LXVwbG9hZC1yZXN1bHQgYXNzZW1ibHktdXBsb2FkLXJlc3VsdC1jb3JlXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXJlY29yZFwiPjwvc3Bhbj48L3RkPidcbiAgICAgICAgICAgICAgICArICc8L3RyPic7XG5cbiAgICAgICAgICAgICAgICBhc3NlbWJseVVwbG9hZFByb2dyZXNzSHRtbCA9IGFzc2VtYmx0VXBsb2FkUHJvZ3Jlc3NUZW1wbGF0ZS5yZXBsYWNlKC97e3VzZXJBc3NlbWJseUlkfX0vZywgdXNlckFzc2VtYmx5SWQpO1xuXG4gICAgICAgICAgICAgICAgLy8gQXBwZW5kIGFzc2VtYmx5IHVwbG9hZCBwcm9ncmVzcyByb3dcbiAgICAgICAgICAgICAgICAkKCcuYXNzZW1ibHktbGlzdC11cGxvYWQtcHJvZ3Jlc3MgdGJvZHknKS5hcHBlbmQoYXNzZW1ibHlVcGxvYWRQcm9ncmVzc0h0bWwpO1xuICAgICAgICAgICAgfSAvLyBpZlxuICAgICAgICB9IC8vIGZvclxuXG4gICAgICAgIC8vIFNldCBudW1iZXIgb2YgYXNzZW1ibGllc1xuICAgICAgICB2YXIgbnVtYmVyT2ZBc3NlbWJsaWVzID0gT2JqZWN0LmtleXMoZmFzdGFGaWxlc0FuZE1ldGFkYXRhKS5sZW5ndGg7XG4gICAgICAgICQoJy53Z3N0LXBhbmVsX19hc3NlbWJseS11cGxvYWQtcHJvZ3Jlc3MgLmhlYWRlci10aXRsZSBzbWFsbCcpLnRleHQobnVtYmVyT2ZBc3NlbWJsaWVzKTtcbiAgICAgICAgJCgnLndnc3QtcGFuZWxfX2Fzc2VtYmx5LXVwbG9hZC1wcm9ncmVzcyAuYXNzZW1ibGllcy11cGxvYWQtdG90YWwnKS50ZXh0KG51bWJlck9mQXNzZW1ibGllcyk7XG5cbiAgICAgICAgLy8gT3BlbiBhc3NlbWJseSB1cGxvYWQgcHJvZ3Jlc3MgcGFuZWxcbiAgICAgICAgYWN0aXZhdGVQYW5lbCgnYXNzZW1ibHlVcGxvYWRQcm9ncmVzcycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzaG93UGFuZWwoJ2Fzc2VtYmx5VXBsb2FkUHJvZ3Jlc3MnKTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBjcmVhdGVzIG5ldyBjb2xsZWN0aW9uIG9yIHVwbG9hZHMgYXNzZW1ibGllcyB0byB0aGUgZXhpc3RpbmcgY29sbGVjdGlvblxuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb25JZCA9ICQoJy53Z3N0LXBhbmVsX19hc3NlbWJseS11cGxvYWQtbmF2aWdhdG9yJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyk7XG5cbiAgICAgICAgICAgIC8vIFVwbG9hZCB0byBuZXcgY29sbGVjdGlvblxuICAgICAgICAgICAgLy9pZiAoJCgnLndnc3QtcGFuZWxfX2Fzc2VtYmx5LXVwbG9hZC1uYXZpZ2F0b3InKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdIEdldHRpbmcgY29sbGVjdGlvbiBpZCcpO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgY29sbGVjdGlvbiBpZFxuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2NvbGxlY3Rpb24vYWRkLycsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhdHlwZTogJ2pzb24nLCAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS85MTU1MjE3XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbklkOiBjb2xsZWN0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlckFzc2VtYmx5SWRzOiBPYmplY3Qua2V5cyhmYXN0YUZpbGVzQW5kTWV0YWRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKGNvbGxlY3Rpb25JZERhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAvL2NvbGxlY3Rpb25JZERhdGEgPSBKU09OLnBhcnNlKGRhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25JZCA9IGNvbGxlY3Rpb25JZERhdGEuY29sbGVjdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJBc3NlbWJseUlkVG9Bc3NlbWJseUlkTWFwID0gY29sbGVjdGlvbklkRGF0YS51c2VyQXNzZW1ibHlJZFRvQXNzZW1ibHlJZE1hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NlbWJseUlkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBXR1NULnVwbG9hZC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFdHU1QudXBsb2FkLmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS5ub3RpZmljYXRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5OiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGw6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyZWU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9XR1NULnVwbG9hZC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0ubm90aWZpY2F0aW9ucy5hbGwgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vV0dTVC51cGxvYWQuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLm5vdGlmaWNhdGlvbnMudHJlZSA9IGZhbHNlOyAvLyBIYXZlIHlvdSByZWNlaXZlZCBhdCBsZWFzdCAxIENPTExFQ1RJT05fVFJFRSBub3RpZmljYXRpb25cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVwbGFjZSB1c2VyIGFzc2VtYmx5IGlkIChmYXN0YSBmaWxlIG5hbWUpIHdpdGggYXNzZW1ibHkgaWQgZ2VuZXJhdGVkIG9uIHNlcnZlciBzaWRlXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmFzdGFGaWxlc0FuZE1ldGFkYXRhV2l0aFVwZGF0ZWRJZHMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaCh1c2VyQXNzZW1ibHlJZFRvQXNzZW1ibHlJZE1hcCwgZnVuY3Rpb24oYXNzZW1ibHlJZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRpcih1c2VyQXNzZW1ibHlJZFRvQXNzZW1ibHlJZE1hcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXNzZW1ibHlJZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlckFzc2VtYmx5SWQgPSB1c2VyQXNzZW1ibHlJZFRvQXNzZW1ibHlJZE1hcFthc3NlbWJseUlkXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZmFzdGFGaWxlc0FuZE1ldGFkYXRhW3VzZXJBc3NlbWJseUlkXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFzdGFGaWxlc0FuZE1ldGFkYXRhV2l0aFVwZGF0ZWRJZHNbYXNzZW1ibHlJZF0gPSBmYXN0YUZpbGVzQW5kTWV0YWRhdGFbdXNlckFzc2VtYmx5SWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJC5lYWNoKGZhc3RhRmlsZXNBbmRNZXRhZGF0YSwgZnVuY3Rpb24odXNlckFzc2VtYmx5SWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHZhciBhc3NlbWJseUlkID0gdXNlckFzc2VtYmx5SWRUb0Fzc2VtYmx5SWRNYXBbdXNlckFzc2VtYmx5SWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGZhc3RhRmlsZXNBbmRNZXRhZGF0YVdpdGhVcGRhdGVkSWRzW2Fzc2VtYmx5SWRdID0gZmFzdGFGaWxlc0FuZE1ldGFkYXRhW3VzZXJBc3NlbWJseUlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmYXN0YUZpbGVzQW5kTWV0YWRhdGEgPSBmYXN0YUZpbGVzQW5kTWV0YWRhdGFXaXRoVXBkYXRlZElkcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kaXIoZmFzdGFGaWxlc0FuZE1ldGFkYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG9zdCBlYWNoIEZBU1RBIGZpbGUgc2VwYXJhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChhc3NlbWJseUlkIGluIGZhc3RhRmlsZXNBbmRNZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmYXN0YUZpbGVzQW5kTWV0YWRhdGEuaGFzT3duUHJvcGVydHkoYXNzZW1ibHlJZCkpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHNhdmVkQ29sbGVjdGlvbklkID0gY29sbGVjdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlckFzc2VtYmx5SWQgPSBmYXN0YUZpbGVzQW5kTWV0YWRhdGFbYXNzZW1ibHlJZF0ubmFtZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgY29sbGVjdGlvbiBpZCB0byBlYWNoIEZBU1RBIGZpbGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZmFzdGFGaWxlc0FuZE1ldGFkYXRhW2Fzc2VtYmx5SWRdLmNvbGxlY3Rpb25JZCA9IHNhdmVkQ29sbGVjdGlvbklkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYXN0YUZpbGVzQW5kTWV0YWRhdGFbYXNzZW1ibHlJZF0uY29sbGVjdGlvbklkID0gY29sbGVjdGlvbklkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPIERPOiBDaGFuZ2UgJ2RhdGEtbmFtZScgdG8gJ2RhdGEtZmlsZS1uYW1lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXV0b2NvbXBsZXRlSW5wdXQgPSAkKCdsaVtkYXRhLW5hbWU9XCInICsgdXNlckFzc2VtYmx5SWQgKyAnXCJdIC5hc3NlbWJseS1zYW1wbGUtbG9jYXRpb24taW5wdXQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCd1c2VyQXNzZW1ibHlJZDogJyArIHVzZXJBc3NlbWJseUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kaXIoV0dTVC51cGxvYWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBtZXRhZGF0YSB0byBlYWNoIEZBU1RBIGZpbGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhc3RhRmlsZXNBbmRNZXRhZGF0YVthc3NlbWJseUlkXS5tZXRhZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lOiBXR1NULnVwbG9hZC5hc3NlbWJseVt1c2VyQXNzZW1ibHlJZF0ubWV0YWRhdGEuZGF0ZXRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9ncmFwaHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogV0dTVC51cGxvYWQuYXNzZW1ibHlbdXNlckFzc2VtYmx5SWRdLm1ldGFkYXRhLmdlb2dyYXBoeS5wb3NpdGlvbi5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBXR1NULnVwbG9hZC5hc3NlbWJseVt1c2VyQXNzZW1ibHlJZF0ubWV0YWRhdGEuZ2VvZ3JhcGh5LnBvc2l0aW9uLmxvbmdpdHVkZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogV0dTVC51cGxvYWQuYXNzZW1ibHlbdXNlckFzc2VtYmx5SWRdLm1ldGFkYXRhLmdlb2dyYXBoeS5hZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBXR1NULnVwbG9hZC5hc3NlbWJseVt1c2VyQXNzZW1ibHlJZF0ubWV0YWRhdGEuc291cmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBNZXRhZGF0YSBmb3IgJyArIGFzc2VtYmx5SWQgKyAnOicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKGZhc3RhRmlsZXNBbmRNZXRhZGF0YVthc3NlbWJseUlkXS5tZXRhZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGNsb3N1cmUgdG8gc2F2ZSBjb2xsZWN0aW9uSWQgYW5kIGFzc2VtYmx5SWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjb2xsZWN0aW9uSWQ6ICcgKyBjb2xsZWN0aW9uSWQgKyAnIGFzc2VtYmx5SWQ6ICcgKyBhc3NlbWJseUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZEFzc2VtYmx5KGNvbGxlY3Rpb25JZCwgYXNzZW1ibHlJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAvLyBpZlxuICAgICAgICAgICAgICAgICAgICAgICAgfSAvLyBmb3JcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1dHU1RdW0VSUk9SXSBGYWlsZWQgdG8gZ2V0IGNvbGxlY3Rpb24gaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IodGV4dFN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yVGhyb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanFYSFIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKHRleHRTdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBHRVRfQ09MTEVDVElPTl9JRF9USU1FUik7XG4gICAgICAgIH0pOyAvLyBhY3RpdmF0ZVBhbmVsKClcblxuICAgICAgICBpZiAoV0dTVC5zcGVhaykge1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBuZXcgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlKCdVcGxvYWRpbmcuLi4nKTtcbiAgICAgICAgICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuc3BlYWsobWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgJCgnLmNhbmNlbC1hc3NlbWJseS11cGxvYWQtYnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gUmVtb3ZlIHNlbGVjdGVkIEZBU1RBIGZpbGVcblxuICAgICAgICAvLyBSZW1vdmUgSFRNTCBlbGVtZW50XG4gICAgICAgICQoJy5hc3NlbWJseS1pdGVtW2RhdGEtbmFtZT1cIicgKyBzZWxlY3RlZEZhc3RhRmlsZU5hbWUgKyAnXCJdJykucmVtb3ZlKCk7XG4gICAgICAgIC8vIERlbGV0ZSBkYXRhIG9iamVjdFxuICAgICAgICBkZWxldGUgZmFzdGFGaWxlc0FuZE1ldGFkYXRhW3NlbGVjdGVkRmFzdGFGaWxlTmFtZV07XG5cbiAgICAgICAgLy8gVXBkYXRlIGFzc2VtYmx5IGxpc3Qgc2xpZGVyXG4gICAgICAgICQoJy5hc3NlbWJseS1saXN0LXNsaWRlcicpLnNsaWRlcihcIm9wdGlvblwiLCBcIm1heFwiLCBPYmplY3Qua2V5cyhmYXN0YUZpbGVzQW5kTWV0YWRhdGEpLmxlbmd0aCk7XG4gICAgICAgIC8vIFJlY2FsY3VsYXRlIHRvdGFsIG51bWJlciBvZiBzZWxlY3RlZCBmaWxlc1xuICAgICAgICAkKCcudG90YWwtbnVtYmVyLW9mLWRyb3BwZWQtYXNzZW1ibGllcycpLnRleHQoT2JqZWN0LmtleXMoZmFzdGFGaWxlc0FuZE1ldGFkYXRhKS5sZW5ndGgpO1xuXG4gICAgICAgIHVwZGF0ZVNlbGVjdGVkRmlsZXNVSSgkKCcuYXNzZW1ibHktbGlzdC1zbGlkZXInKS5zbGlkZXIoJ3ZhbHVlJykpO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIG9ubHkgMSBzZWxlY3RlZCBmaWxlIGxlZnRcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGZhc3RhRmlsZXNBbmRNZXRhZGF0YSkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgbGFiZWxcbiAgICAgICAgICAgICQoJy5hc3NlbWJseS11cGxvYWQtdG90YWwtbnVtYmVyLWxhYmVsJykudGV4dCgnYXNzZW1ibHknKTtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBmaWxlIG5hbWUgb2YgYXNzZW1ibHlcbiAgICAgICAgICAgICQoJy51cGxvYWQtc2luZ2xlLWFzc2VtYmx5LWZpbGUtbmFtZScpLnRleHQoZmFzdGFGaWxlc0FuZE1ldGFkYXRhW09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGZhc3RhRmlsZXNBbmRNZXRhZGF0YSlbMF1dLm5hbWUpO1xuICAgICAgICAgICAgLy8gSGlkZSBtdWx0aXBsZSBhc3NlbWJsaWVzIGxhYmVsXG4gICAgICAgICAgICAkKCcudXBsb2FkLW11bHRpcGxlLWFzc2VtYmxpZXMtbGFiZWwnKS5oaWRlKCk7XG4gICAgICAgICAgICAvLyBTaG93IHNpbmdsZSBhc3NlbWJseSBsYWJlbFxuICAgICAgICAgICAgJCgnLnVwbG9hZC1zaW5nbGUtYXNzZW1ibHktbGFiZWwnKS5zaG93KCk7XG4gICAgICAgICAgICAvLyBPbmx5IDEgc2VsZWN0ZWQgZmlsZSBsZWZ0IC0gaGlkZSBhc3NlbWJseSBuYXZpZ2F0b3JcbiAgICAgICAgICAgICQoJy5hc3NlbWJseS1uYXZpZ2F0b3InKS5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBNb3JlIHRoYW4gMSBzZWxlY3RlZCBmaWxlcyBsZWZ0IC0gdXBkYXRlIGFzc2VtYmx5IG5hdmlnYXRvclxuICAgICAgICAgICAgdXBkYXRlUmFuZ2VOYXZpZ2F0aW9uQnV0dG9ucygkKCcuYXNzZW1ibHktbGlzdC1zbGlkZXInKS5zbGlkZXIoJ3ZhbHVlJykpOyBcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZVNlbGVjdGVkRmlsZXNTdW1tYXJ5KCk7XG4gICAgICAgIHVwZGF0ZU1ldGFkYXRhUHJvZ3Jlc3NCYXIoKTtcbiAgICB9KTtcblxuICAgIC8vIEJyaW5nIHRvIGZyb250IHNlbGVjdGVkIHBhbmVsXG4gICAgJCgnYm9keScpLm9uKCdtb3VzZWRvd24nLCAnLndnc3QtcGFuZWwnLCBmdW5jdGlvbigpe1xuXG4gICAgICAgIGJyaW5nUGFuZWxUb1RvcCgkKHRoaXMpLmF0dHIoJ2RhdGEtcGFuZWwtbmFtZScpKTtcblxuICAgICAgICAvKlxuICAgICAgICAvLyBDaGFuZ2UgeiBpbmRleCBmb3IgYWxsIHBhbmVsc1xuICAgICAgICAkKCcud2dzdC1wYW5lbCcpLmNzcygnei1pbmRleCcsIDEwMCk7XG4gICAgICAgIC8vIFNldCB0aGUgIGhpZ2hlc3QgeiBpbmRleCBmb3IgdGhpcyAoc2VsZWN0ZWQpIHBhbmVsXG4gICAgICAgICQodGhpcykuY3NzKCd6LWluZGV4JywgMTAxKTtcbiAgICAgICAgKi9cbiAgICB9KTtcblxuICAgIC8vIERlc2VsZWN0IFR3aXR0ZXIgQm9vdHN0cmFwIGJ1dHRvbiBvbiBjbGlja1xuICAgICQoJy50cmVlLXBhbmVsIC53Z3N0LXRyZWUtY29udHJvbHMgYnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgJCh0aGlzKS5ibHVyKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2Qgc2V0QXNzZW1ibHlNZXRhZGF0YVRpbWVzdGFtcFxuICAgICAqIEBwYXJhbSB7fSBzb3VyY2VGaWxlTmFtZVxuICAgICAqIEBwYXJhbSB7fSB0YXJnZXRGaWxlTmFtZVxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIHNldEFzc2VtYmx5TWV0YWRhdGFUaW1lc3RhbXAgPSBmdW5jdGlvbihzb3VyY2VGaWxlTmFtZSwgdGFyZ2V0RmlsZU5hbWUpIHtcblxuICAgICAgICBpZiAoc291cmNlRmlsZU5hbWUgPT09IHRhcmdldEZpbGVOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgJHNvdXJjZVRpbWVzdGFtcFllYXJIdG1sID0gJCgnLmFzc2VtYmx5LW1ldGFkYXRhLXRpbWVzdGFtcC15ZWFyW2RhdGEtZmlsZS1pZD1cIicgKyBzb3VyY2VGaWxlTmFtZSArICdcIl0nKSxcbiAgICAgICAgICAgIHNvdXJjZVRpbWVzdGFtcFllYXJWYWx1ZSA9ICRzb3VyY2VUaW1lc3RhbXBZZWFySHRtbC5maW5kKCdzZWxlY3Qgb3B0aW9uOnNlbGVjdGVkJykudmFsKCksIFxuICAgICAgICAgICAgJHNvdXJjZVRpbWVzdGFtcE1vbnRoSHRtbCA9ICQoJy5hc3NlbWJseS1tZXRhZGF0YS10aW1lc3RhbXAtbW9udGhbZGF0YS1maWxlLWlkPVwiJyArIHNvdXJjZUZpbGVOYW1lICsgJ1wiXScpLFxuICAgICAgICAgICAgc291cmNlVGltZXN0YW1wTW9udGhWYWx1ZSA9ICRzb3VyY2VUaW1lc3RhbXBNb250aEh0bWwuZmluZCgnc2VsZWN0IG9wdGlvbjpzZWxlY3RlZCcpLnZhbCgpLFxuICAgICAgICAgICAgJHNvdXJjZVRpbWVzdGFtcERheUh0bWwgPSAkKCcuYXNzZW1ibHktbWV0YWRhdGEtdGltZXN0YW1wLWRheVtkYXRhLWZpbGUtaWQ9XCInICsgc291cmNlRmlsZU5hbWUgKyAnXCJdJyksXG4gICAgICAgICAgICBzb3VyY2VUaW1lc3RhbXBEYXlWYWx1ZSA9ICRzb3VyY2VUaW1lc3RhbXBEYXlIdG1sLmZpbmQoJ3NlbGVjdCBvcHRpb246c2VsZWN0ZWQnKS52YWwoKSxcbiAgICAgICAgICAgICR0YXJnZXRUaW1lc3RhbXBZZWFySHRtbCA9ICQoJy5hc3NlbWJseS1tZXRhZGF0YS10aW1lc3RhbXAteWVhcltkYXRhLWZpbGUtaWQ9XCInICsgdGFyZ2V0RmlsZU5hbWUgKyAnXCJdJyksXG4gICAgICAgICAgICAkdGFyZ2V0VGltZXN0YW1wTW9udGhIdG1sID0gJCgnLmFzc2VtYmx5LW1ldGFkYXRhLXRpbWVzdGFtcC1tb250aFtkYXRhLWZpbGUtaWQ9XCInICsgdGFyZ2V0RmlsZU5hbWUgKyAnXCJdJyksXG4gICAgICAgICAgICAkdGFyZ2V0VGltZXN0YW1wRGF5SHRtbCA9ICQoJy5hc3NlbWJseS1tZXRhZGF0YS10aW1lc3RhbXAtZGF5W2RhdGEtZmlsZS1pZD1cIicgKyB0YXJnZXRGaWxlTmFtZSArICdcIl0nKSxcbiAgICAgICAgICAgICR0YXJnZXRUaW1lc3RhbXBEYXlTZWxlY3QgPSAkdGFyZ2V0VGltZXN0YW1wRGF5SHRtbC5maW5kKCdzZWxlY3QnKTtcblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gU3luYyBzdGF0ZSBiZXR3ZWVuIHNvdXJjZSBhbmQgdGFyZ2V0IGlucHV0IGVsZW1lbnRzXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBpZiAoc291cmNlVGltZXN0YW1wWWVhclZhbHVlICE9PSAnLTEnKSB7XG4gICAgICAgICAgICAvLyBTZWxlY3QgeWVhciBvcHRpb25cbiAgICAgICAgICAgICR0YXJnZXRUaW1lc3RhbXBZZWFySHRtbC5maW5kKCdvcHRpb25bdmFsdWU9XCInICsgc291cmNlVGltZXN0YW1wWWVhclZhbHVlICsgJ1wiXScpLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZVRpbWVzdGFtcE1vbnRoVmFsdWUgIT09ICctMScpIHtcbiAgICAgICAgICAgIC8vIFNlbGVjdCBtb250aCBvcHRpb25cbiAgICAgICAgICAgICR0YXJnZXRUaW1lc3RhbXBNb250aEh0bWwuZmluZCgnb3B0aW9uW3ZhbHVlPVwiJyArIHNvdXJjZVRpbWVzdGFtcE1vbnRoVmFsdWUgKyAnXCJdJykucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlVGltZXN0YW1wRGF5VmFsdWUgIT09ICctMScpIHtcbiAgICAgICAgICAgIHBvcHVsYXRlRGF5U2VsZWN0KCR0YXJnZXRUaW1lc3RhbXBEYXlTZWxlY3QsIHNvdXJjZVRpbWVzdGFtcFllYXJWYWx1ZSwgc291cmNlVGltZXN0YW1wTW9udGhWYWx1ZSk7XG4gICAgICAgICAgICAvLyBTZWxlY3QgZGF5IG9wdGlvblxuICAgICAgICAgICAgJHRhcmdldFRpbWVzdGFtcERheVNlbGVjdC5maW5kKCdvcHRpb25bdmFsdWU9XCInICsgc291cmNlVGltZXN0YW1wRGF5VmFsdWUgKyAnXCJdJykucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTaG93IHRpbWVzdGFtcCBwYXJ0c1xuICAgICAgICBpZiAoJHNvdXJjZVRpbWVzdGFtcFllYXJIdG1sLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAkdGFyZ2V0VGltZXN0YW1wWWVhckh0bWwucmVtb3ZlQ2xhc3MoJ2hpZGUtdGhpcycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkc291cmNlVGltZXN0YW1wTW9udGhIdG1sLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAkdGFyZ2V0VGltZXN0YW1wTW9udGhIdG1sLnJlbW92ZUNsYXNzKCdoaWRlLXRoaXMnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHNvdXJjZVRpbWVzdGFtcERheUh0bWwuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgICR0YXJnZXRUaW1lc3RhbXBEYXlIdG1sLnJlbW92ZUNsYXNzKCdoaWRlLXRoaXMnKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkKCcud2dzdC1wYW5lbF9fYXNzZW1ibHktdXBsb2FkLW1ldGFkYXRhJykub24oJ2NsaWNrJywgJy5jb3B5LW1ldGFkYXRhLXRvLWFsbC1lbXB0eS1hc3NlbWJsaWVzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gQ29weSBzYW1lIG1ldGFkYXRhIHRvIGFsbCBhc3NlbWJsaWVzIHdpdGggbm8gbWV0YWRhdGFcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB2YXIgJHNvdXJjZUFzc2VtYmx5TWV0YWRhdGEgPSAkKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YScpLFxuICAgICAgICAgICAgJHNvdXJjZUFzc2VtYmx5TWV0YWRhdGFMb2NhdGlvbiA9ICRzb3VyY2VBc3NlbWJseU1ldGFkYXRhLmZpbmQoJy5hc3NlbWJseS1zYW1wbGUtbG9jYXRpb24taW5wdXQnKSxcbiAgICAgICAgICAgICRzb3VyY2VBc3NlbWJseU1ldGFkYXRhU291cmNlID0gJHNvdXJjZUFzc2VtYmx5TWV0YWRhdGEuZmluZCgnLmFzc2VtYmx5LXNhbXBsZS1zb3VyY2UtaW5wdXQnKTtcblxuICAgICAgICB2YXIgc291cmNlID0ge1xuICAgICAgICAgICAgZmlsZU5hbWU6ICQodGhpcykuY2xvc2VzdCgnLmFzc2VtYmx5LWl0ZW0nKS5hdHRyKCdkYXRhLW5hbWUnKSxcbiAgICAgICAgICAgIGZpbGVJZDogJCh0aGlzKS5jbG9zZXN0KCcuYXNzZW1ibHktaXRlbScpLmF0dHIoJ2RhdGEtZmlsZS1pZCcpXG4gICAgICAgIH07XG4gICAgICAgIHNvdXJjZS5tZXRhZGF0YSA9IFdHU1QudXBsb2FkLmFzc2VtYmx5W3NvdXJjZS5maWxlTmFtZV0ubWV0YWRhdGE7XG5cbiAgICAgICAgLy8gdmFyIHNvdXJjZUZpbGVOYW1lID0gJCh0aGlzKS5jbG9zZXN0KCcuYXNzZW1ibHktaXRlbScpLmF0dHIoJ2RhdGEtbmFtZScpLFxuICAgICAgICAvLyAgICAgc291cmNlRmlsZUlkID0gJCh0aGlzKS5jbG9zZXN0KCcuYXNzZW1ibHktaXRlbScpLmF0dHIoJ2RhdGEtZmlsZS1pZCcpLFxuICAgICAgICAvLyAgICAgc291cmNlTWV0YWRhdGEgPSBXR1NULnVwbG9hZC5hc3NlbWJseVtzb3VyY2VGaWxlTmFtZV0ubWV0YWRhdGEsXG4gICAgICAgIC8vICAgICB0YXJnZXRGaWxlSWQ7XG5cbiAgICAgICAgdmFyICRhc3NlbWJseVVwbG9hZE1ldGFkYXRhUGFuZWwgPSAkKCcud2dzdC1wYW5lbF9fYXNzZW1ibHktdXBsb2FkLW1ldGFkYXRhJyksXG4gICAgICAgICAgICAkYXNzZW1ibHlJdGVtLFxuICAgICAgICAgICAgdGFyZ2V0RmlsZUlkO1xuXG4gICAgICAgICQuZWFjaChXR1NULnVwbG9hZC5hc3NlbWJseSwgZnVuY3Rpb24odGFyZ2V0RmlsZU5hbWUsIHRhcmdldEZpbGVNZXRhZGF0YSl7XG4gICAgICAgICAgICAvLyBPbmx5IGNvcHkgbWV0YWRhdGEgdG8gYXNzZW1ibGllcyB3aXRoIG5vIG1ldGFkYXRhXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXModGFyZ2V0RmlsZU1ldGFkYXRhLm1ldGFkYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBXR1NULnVwbG9hZC5hc3NlbWJseVt0YXJnZXRGaWxlTmFtZV0ubWV0YWRhdGEgPSBzb3VyY2UubWV0YWRhdGE7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIFVJXG4gICAgICAgICAgICAgICAgJGFzc2VtYmx5SXRlbSA9ICRhc3NlbWJseVVwbG9hZE1ldGFkYXRhUGFuZWwuZmluZCgnLmFzc2VtYmx5LWl0ZW1bZGF0YS1uYW1lPVwiJyArIHRhcmdldEZpbGVOYW1lICsgJ1wiXScpO1xuICAgICAgICAgICAgICAgIHRhcmdldEZpbGVJZCA9ICRhc3NlbWJseUl0ZW0uYXR0cignZGF0YS1maWxlLWlkJyk7XG5cbiAgICAgICAgICAgICAgICAkYXNzZW1ibHlVcGxvYWRNZXRhZGF0YVBhbmVsLmZpbmQoJy5hc3NlbWJseS1pdGVtW2RhdGEtbmFtZT1cIicgKyB0YXJnZXRGaWxlTmFtZSArICdcIl0gLmFzc2VtYmx5LXNhbXBsZS1sb2NhdGlvbi1pbnB1dCcpLnZhbCgkc291cmNlQXNzZW1ibHlNZXRhZGF0YUxvY2F0aW9uLnZhbCgpKTtcbiAgICAgICAgICAgICAgICAkYXNzZW1ibHlVcGxvYWRNZXRhZGF0YVBhbmVsLmZpbmQoJy5hc3NlbWJseS1pdGVtW2RhdGEtbmFtZT1cIicgKyB0YXJnZXRGaWxlTmFtZSArICdcIl0gLmFzc2VtYmx5LXNhbXBsZS1zb3VyY2UtaW5wdXQnKS52YWwoJHNvdXJjZUFzc2VtYmx5TWV0YWRhdGFTb3VyY2UudmFsKCkpO1xuICAgICAgICAgICAgICAgIHNldEFzc2VtYmx5TWV0YWRhdGFUaW1lc3RhbXAoc291cmNlLmZpbGVJZCwgdGFyZ2V0RmlsZUlkKTtcbiAgICAgICAgICAgIH0gLy8gaWZcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gLy8gR2V0IG1ldGFkYXRhIGZyb20gc2VsZWN0ZWQgYXNzZW1ibHlcbiAgICAgICAgLy8gdmFyIC8vbWV0YWRhdGFFbGVtZW50VGltZXN0YW1wID0gJCh0aGlzKS5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEnKS5maW5kKCcuYXNzZW1ibHktc2FtcGxlLWRhdGV0aW1lLWlucHV0JyksXG4gICAgICAgIC8vICAgICBtZXRhZGF0YUVsZW1lbnRMb2NhdGlvbiA9ICQodGhpcykuY2xvc2VzdCgnLmFzc2VtYmx5LW1ldGFkYXRhJykuZmluZCgnLmFzc2VtYmx5LXNhbXBsZS1sb2NhdGlvbi1pbnB1dCcpLFxuICAgICAgICAvLyAgICAgbWV0YWRhdGFFbGVtZW50U291cmNlID0gJCh0aGlzKS5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEnKS5maW5kKCcuYXNzZW1ibHktc2FtcGxlLXNvdXJjZS1pbnB1dCcpO1xuXG4gICAgICAgIC8vIC8vIFNldCB2YWx1ZVxuICAgICAgICAvLyAkKCcuYXNzZW1ibHktaXRlbScpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gICAgIHRhcmdldEZpbGVJZCA9ICQodGhpcykuYXR0cignZGF0YS1maWxlLWlkJyk7XG5cbiAgICAgICAgLy8gICAgIGNvbnNvbGUuZGlyKCQodGhpcykpO1xuXG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZygnc291cmNlRmlsZUlkOiAnICsgc291cmNlRmlsZUlkKTtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCd0YXJnZXRGaWxlSWQ6ICcgKyB0YXJnZXRGaWxlSWQpO1xuXG4gICAgICAgIC8vICAgICBzZXRBc3NlbWJseU1ldGFkYXRhVGltZXN0YW1wKHNvdXJjZUZpbGVJZCwgdGFyZ2V0RmlsZUlkKTtcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgLy8kKCcuYXNzZW1ibHktbWV0YWRhdGEnKS5maW5kKCcuYXNzZW1ibHktc2FtcGxlLWRhdGV0aW1lLWlucHV0JykudmFsKG1ldGFkYXRhRWxlbWVudFRpbWVzdGFtcC52YWwoKSk7XG4gICAgICAgIC8vICQoJy5hc3NlbWJseS1tZXRhZGF0YScpLmZpbmQoJy5hc3NlbWJseS1zYW1wbGUtbG9jYXRpb24taW5wdXQnKS52YWwobWV0YWRhdGFFbGVtZW50TG9jYXRpb24udmFsKCkpO1xuICAgICAgICAvLyAkKCcuYXNzZW1ibHktbWV0YWRhdGEnKS5maW5kKCcuYXNzZW1ibHktc2FtcGxlLXNvdXJjZS1pbnB1dCcpLnZhbChtZXRhZGF0YUVsZW1lbnRTb3VyY2UudmFsKCkpO1xuXG4gICAgICAgIC8vIC8vIFNldCBkYXRhXG4gICAgICAgIC8vICQoJy5hc3NlbWJseS1tZXRhZGF0YScpLmZpbmQoJy5hc3NlbWJseS1zYW1wbGUtbG9jYXRpb24taW5wdXQnKS5hdHRyKCdkYXRhLWxhdGl0dWRlJywgbWV0YWRhdGFFbGVtZW50TG9jYXRpb24uYXR0cignZGF0YS1sYXRpdHVkZScpKTtcbiAgICAgICAgLy8gJCgnLmFzc2VtYmx5LW1ldGFkYXRhJykuZmluZCgnLmFzc2VtYmx5LXNhbXBsZS1sb2NhdGlvbi1pbnB1dCcpLmF0dHIoJ2RhdGEtbG9uZ2l0dWRlJywgbWV0YWRhdGFFbGVtZW50TG9jYXRpb24uYXR0cignZGF0YS1sb25naXR1ZGUnKSk7XG5cbiAgICAgICAgLy8gU2hvdyBhbGwgbWV0YWRhdGFcbiAgICAgICAgJCgnLmFzc2VtYmx5LW1ldGFkYXRhLWJsb2NrJykuc2hvdygpO1xuXG4gICAgICAgIHVwZGF0ZU1ldGFkYXRhUHJvZ3Jlc3NCYXIoKTtcbiAgICB9KTtcblxuICAgIC8vICQoJy53Z3N0LXBhbmVsX19hc3NlbWJseS11cGxvYWQtbWV0YWRhdGEnKS5vbignY2xpY2snLCAnLmFwcGx5LXRvLWFsbC1hc3NlbWJsaWVzLWJ1dHRvbicsIGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vICAgICAvLyBDb3B5IHNhbWUgbWV0YWRhdGEgdG8gYWxsIGFzc2VtYmxpZXNcbiAgICAvLyAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gICAgIHZhciBzb3VyY2VGaWxlTmFtZSA9ICQodGhpcykuY2xvc2VzdCgnLmFzc2VtYmx5LWl0ZW0nKS5hdHRyKCdkYXRhLW5hbWUnKSxcbiAgICAvLyAgICAgICAgIHNvdXJjZUZpbGVJZCA9ICQodGhpcykuY2xvc2VzdCgnLmFzc2VtYmx5LWl0ZW0nKS5hdHRyKCdkYXRhLWZpbGUtaWQnKSxcbiAgICAvLyAgICAgICAgIHNvdXJjZU1ldGFkYXRhID0gV0dTVC51cGxvYWQuYXNzZW1ibHlbc291cmNlRmlsZU5hbWVdLm1ldGFkYXRhLFxuICAgIC8vICAgICAgICAgdGFyZ2V0RmlsZUlkO1xuXG4gICAgLy8gICAgICQuZWFjaChXR1NULnVwbG9hZC5hc3NlbWJseSwgZnVuY3Rpb24odGFyZ2V0RmlsZU5hbWUsIHRhcmdldE1ldGFkYXRhKXtcbiAgICAvLyAgICAgICAgIFdHU1QudXBsb2FkLmFzc2VtYmx5W3RhcmdldEZpbGVOYW1lXS5tZXRhZGF0YSA9IHNvdXJjZU1ldGFkYXRhO1xuICAgIC8vICAgICB9KTtcblxuICAgIC8vICAgICAvLyBHZXQgbWV0YWRhdGEgZnJvbSBzZWxlY3RlZCBhc3NlbWJseVxuICAgIC8vICAgICB2YXIgLy9tZXRhZGF0YUVsZW1lbnRUaW1lc3RhbXAgPSAkKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YScpLmZpbmQoJy5hc3NlbWJseS1zYW1wbGUtZGF0ZXRpbWUtaW5wdXQnKSxcbiAgICAvLyAgICAgICAgIG1ldGFkYXRhRWxlbWVudExvY2F0aW9uID0gJCh0aGlzKS5jbG9zZXN0KCcuYXNzZW1ibHktbWV0YWRhdGEnKS5maW5kKCcuYXNzZW1ibHktc2FtcGxlLWxvY2F0aW9uLWlucHV0JyksXG4gICAgLy8gICAgICAgICBtZXRhZGF0YUVsZW1lbnRTb3VyY2UgPSAkKHRoaXMpLmNsb3Nlc3QoJy5hc3NlbWJseS1tZXRhZGF0YScpLmZpbmQoJy5hc3NlbWJseS1zYW1wbGUtc291cmNlLWlucHV0Jyk7XG5cbiAgICAvLyAgICAgLy8gU2V0IHZhbHVlXG4gICAgLy8gICAgICQoJy5hc3NlbWJseS1pdGVtJykuZWFjaChmdW5jdGlvbigpe1xuICAgIC8vICAgICAgICAgdGFyZ2V0RmlsZUlkID0gJCh0aGlzKS5hdHRyKCdkYXRhLWZpbGUtaWQnKTtcblxuICAgIC8vICAgICAgICAgY29uc29sZS5kaXIoJCh0aGlzKSk7XG5cbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKCdzb3VyY2VGaWxlSWQ6ICcgKyBzb3VyY2VGaWxlSWQpO1xuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ3RhcmdldEZpbGVJZDogJyArIHRhcmdldEZpbGVJZCk7XG5cbiAgICAvLyAgICAgICAgIHNldEFzc2VtYmx5TWV0YWRhdGFUaW1lc3RhbXAoc291cmNlRmlsZUlkLCB0YXJnZXRGaWxlSWQpO1xuICAgIC8vICAgICB9KTtcblxuICAgIC8vICAgICAvLyQoJy5hc3NlbWJseS1tZXRhZGF0YScpLmZpbmQoJy5hc3NlbWJseS1zYW1wbGUtZGF0ZXRpbWUtaW5wdXQnKS52YWwobWV0YWRhdGFFbGVtZW50VGltZXN0YW1wLnZhbCgpKTtcbiAgICAvLyAgICAgJCgnLmFzc2VtYmx5LW1ldGFkYXRhJykuZmluZCgnLmFzc2VtYmx5LXNhbXBsZS1sb2NhdGlvbi1pbnB1dCcpLnZhbChtZXRhZGF0YUVsZW1lbnRMb2NhdGlvbi52YWwoKSk7XG4gICAgLy8gICAgICQoJy5hc3NlbWJseS1tZXRhZGF0YScpLmZpbmQoJy5hc3NlbWJseS1zYW1wbGUtc291cmNlLWlucHV0JykudmFsKG1ldGFkYXRhRWxlbWVudFNvdXJjZS52YWwoKSk7XG5cbiAgICAvLyAgICAgLy8gLy8gU2V0IGRhdGFcbiAgICAvLyAgICAgLy8gJCgnLmFzc2VtYmx5LW1ldGFkYXRhJykuZmluZCgnLmFzc2VtYmx5LXNhbXBsZS1sb2NhdGlvbi1pbnB1dCcpLmF0dHIoJ2RhdGEtbGF0aXR1ZGUnLCBtZXRhZGF0YUVsZW1lbnRMb2NhdGlvbi5hdHRyKCdkYXRhLWxhdGl0dWRlJykpO1xuICAgIC8vICAgICAvLyAkKCcuYXNzZW1ibHktbWV0YWRhdGEnKS5maW5kKCcuYXNzZW1ibHktc2FtcGxlLWxvY2F0aW9uLWlucHV0JykuYXR0cignZGF0YS1sb25naXR1ZGUnLCBtZXRhZGF0YUVsZW1lbnRMb2NhdGlvbi5hdHRyKCdkYXRhLWxvbmdpdHVkZScpKTtcblxuICAgIC8vICAgICAvLyBTaG93IG1ldGFkYXRhXG4gICAgLy8gICAgICQoJy5hc3NlbWJseS1tZXRhZGF0YS1ibG9jaycpLnNob3coKTtcblxuICAgIC8vICAgICB1cGRhdGVNZXRhZGF0YVByb2dyZXNzQmFyKCk7XG5cbiAgICAvLyB9KTtcblxuICAgICQoJy53Z3N0LXBhbmVsX19jb2xsZWN0aW9uLCAud2dzdC1mdWxsc2NyZWVuX19jb2xsZWN0aW9uJykub24oJ2NsaWNrJywgJy5zaG93LW9uLXJlcHJlc2VudGF0aXZlLXRyZWUnLCBmdW5jdGlvbihldmVudCl7XG5cbiAgICAgICAgb3BlblJlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUoKTtcblxuICAgICAgICAvLyBlbmRQYW5lbExvYWRpbmdJbmRpY2F0b3IoJ3JlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUnKTtcbiAgICAgICAgLy8gYWN0aXZhdGVQYW5lbCgncmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZScpO1xuICAgICAgICAvLyBzaG93UGFuZWwoJ3JlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUnKTtcbiAgICAgICAgLy8gc2hvd1BhbmVsQm9keUNvbnRlbnQoJ3JlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUnKTtcbiAgICAgICAgLy8gYnJpbmdQYW5lbFRvVG9wKCdyZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlJyk7XG5cbiAgICAgICAgdmFyIGNvbGxlY3Rpb25JZCA9ICQodGhpcykuY2xvc2VzdCgnLndnc3QtY29sbGVjdGlvbi1pbmZvJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyksXG4gICAgICAgICAgICAvL2NvbGxlY3Rpb25JZCA9ICQodGhpcykuY2xvc2VzdCgnLndnc3QtcGFuZWxfX2NvbGxlY3Rpb24nKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKSxcbiAgICAgICAgICAgIGFzc2VtYmx5SWQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtYXNzZW1ibHktaWQnKSxcbiAgICAgICAgICAgIHJlZmVyZW5jZUlkID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllc1thc3NlbWJseUlkXS5GUF9DT01QLnRvcFNjb3JlLnJlZmVyZW5jZUlkO1xuXG4gICAgICAgIFdHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmNhbnZhcy5zZWxlY3ROb2RlcyhyZWZlcmVuY2VJZCk7XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcblxuICAgIC8vIE9wZW4gQXNzZW1ibHkgZnJvbSBDb2xsZWN0aW9uIGxpc3RcbiAgICAkKCcud2dzdC1wYW5lbF9fY29sbGVjdGlvbiwgLndnc3QtcGFuZWxfX2Fzc2VtYmx5LXVwbG9hZC1wcm9ncmVzcywgLndnc3QtZnVsbHNjcmVlbl9fY29sbGVjdGlvbicpLm9uKCdjbGljaycsICcub3Blbi1hc3NlbWJseS1idXR0b24nLCBmdW5jdGlvbihldmVudCl7XG5cbiAgICAgICAgdmFyIGFzc2VtYmx5SWQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtYXNzZW1ibHktaWQnKTtcblxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLy8gQ2xvc2UgYW55IHByZXZpb3VzbHkgb3Blbm5lZCBhc3NlbWJseSBwYW5lbHNcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAgICAgaWYgKGlzUGFuZWxBY3RpdmUoJ2Fzc2VtYmx5JykpIHtcbiAgICAgICAgICAgIGRlYWN0aXZhdGVQYW5lbCgnYXNzZW1ibHknKTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBjb250ZW50XG4gICAgICAgICAgICAkKCcud2dzdC1wYW5lbF9fYXNzZW1ibHkgLmFzc2VtYmx5LWRldGFpbHMgLmFzc2VtYmx5LWRldGFpbC1jb250ZW50JykuaHRtbCgnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBvcGVuQXNzZW1ibHlQYW5lbChhc3NlbWJseUlkKTtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgJCgnLndnc3QtcGFuZWxfX2NvbGxlY3Rpb24nKS5vbignY2xpY2snLCAnLndnc3QtY29sbGVjdGlvbi1jb250cm9sX19zaG93LXRyZWUnLCBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgY29sbGVjdGlvbklkID0gJCh0aGlzKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25UcmVlVHlwZSA9ICQodGhpcykuYXR0cignZGF0YS10cmVlLXR5cGUnKSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25UcmVlUGFuZWxJZCA9ICdjb2xsZWN0aW9uVHJlZScgKyAnX18nICsgY29sbGVjdGlvbklkICsgJ19fJyArIGNvbGxlY3Rpb25UcmVlVHlwZTtcblxuICAgICAgICBhY3RpdmF0ZVBhbmVsKGNvbGxlY3Rpb25UcmVlUGFuZWxJZCk7XG4gICAgICAgIHNob3dQYW5lbChjb2xsZWN0aW9uVHJlZVBhbmVsSWQpO1xuICAgICAgICBzaG93UGFuZWxCb2R5Q29udGVudChjb2xsZWN0aW9uVHJlZVBhbmVsSWQpO1xuICAgICAgICBicmluZ1BhbmVsVG9Ub3AoY29sbGVjdGlvblRyZWVQYW5lbElkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBvcGVuQXNzZW1ibHlQYW5lbFxuICAgICAqIEBwYXJhbSB7fSBhc3NlbWJseUlkXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgb3BlbkFzc2VtYmx5UGFuZWwgPSBmdW5jdGlvbihhc3NlbWJseUlkKSB7XG5cbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIC8vIE9wZW4gcGFuZWxcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAgICAgLy8gU2hvdyBhbmltYXRlZCBsb2FkaW5nIGNpcmNsZVxuICAgICAgICAvLyQoJy53Z3N0LXBhbmVsX19hc3NlbWJseSAud2dzdC1wYW5lbC1sb2FkaW5nJykuc2hvdygpO1xuXG4gICAgICAgIGFjdGl2YXRlUGFuZWwoJ2Fzc2VtYmx5Jyk7XG4gICAgICAgIGJyaW5nUGFuZWxUb1RvcCgnYXNzZW1ibHknKTtcbiAgICAgICAgc3RhcnRQYW5lbExvYWRpbmdJbmRpY2F0b3IoJ2Fzc2VtYmx5Jyk7XG4gICAgICAgIHNob3dQYW5lbCgnYXNzZW1ibHknKTtcblxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLy8gR2V0IGFzc2VtYmx5IGRhdGFcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAgICAgLy8gR2V0IGFzc2VtYmx5IGRhdGFcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgIHVybDogJy9hcGkvYXNzZW1ibHknLFxuICAgICAgICAgICAgZGF0YXR5cGU6ICdqc29uJywgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvOTE1NTIxN1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGFzc2VtYmx5SWQ6IGFzc2VtYmx5SWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmRvbmUoZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF0gUmVjZWl2ZWQgZGF0YSBmb3IgYXNzZW1ibHkgaWQ6ICcgKyBhc3NlbWJseUlkKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZGlyKGRhdGEpO1xuXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgIC8vIFByZXBhcmUgYXNzZW1ibHkgcGFuZWxcbiAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgICAgICAgICB2YXIgYXNzZW1ibHkgPSBkYXRhLmFzc2VtYmx5LFxuICAgICAgICAgICAgICAgIGFzc2VtYmx5UGFuZWwgPSAkKCcud2dzdC1wYW5lbF9fYXNzZW1ibHknKTtcblxuICAgICAgICAgICAgLy8gU2V0IGFzc2VtYmx5IG5hbWVcbiAgICAgICAgICAgIGFzc2VtYmx5UGFuZWwuZmluZCgnLmhlYWRlci10aXRsZSBzbWFsbCcpLnRleHQoYXNzZW1ibHkuQVNTRU1CTFlfTUVUQURBVEEudXNlckFzc2VtYmx5SWQpO1xuXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgIC8vIFByZXBhcmUgcHJlZGljdGVkIHJlc2lzdGFuY2UgcHJvZmlsZVxuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAgICAgICAgIHZhciBhbnRpYmlvdGljcyA9IGRhdGEuYW50aWJpb3RpY3MsXG4gICAgICAgICAgICAgICAgYXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZSA9IGFzc2VtYmx5LlBBQVJTTlBfUkVTVUxULnBhYXJSZXN1bHQucmVzaXN0YW5jZVByb2ZpbGUsXG4gICAgICAgICAgICAgICAgYXNzZW1ibHlSZXNpc3RhbmNlUHJvZmlsZUh0bWwgPSAnJyxcbiAgICAgICAgICAgICAgICBhbnRpYmlvdGljR3JvdXBIdG1sID0gJycsXG4gICAgICAgICAgICAgICAgYW50aWJpb3RpY1Jlc2lzdGFuY2VzSHRtbCA9ICcnO1xuXG4gICAgICAgICAgICAvLyBQYXJzZSBlYWNoIGFudGliaW90aWMgZ3JvdXBcbiAgICAgICAgICAgIGZvciAodmFyIGFudGliaW90aWNHcm91cE5hbWUgaW4gYW50aWJpb3RpY3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW50aWJpb3RpY3MuaGFzT3duUHJvcGVydHkoYW50aWJpb3RpY0dyb3VwTmFtZSkpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbnRpYmlvdGljR3JvdXBIdG1sID0gXG4gICAgICAgICAgICAgICAgICAgICc8dGFibGUgY2xhc3M9XCJhbnRpYmlvdGljLWdyb3VwXCIgZGF0YS1hbnRpYmlvdGljLWdyb3VwLW5hbWU9XCJ7e2FudGliaW90aWNHcm91cE5hbWV9fVwiPidcbiAgICAgICAgICAgICAgICAgICAgKyAnPHRoZWFkPidcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzx0cj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPHRoPnt7YW50aWJpb3RpY0dyb3VwTmFtZX19PC90aD4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8L3RyPidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC90aGVhZD4nXG4gICAgICAgICAgICAgICAgICAgICsgJzx0Ym9keT4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8dHI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzx0ZD4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzx0YWJsZT4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8dGJvZHk+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzx0cj57e2FudGliaW90aWNSZXNpc3RhbmNlc0h0bWx9fTwvdHI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC90Ym9keT4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvdGFibGU+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvdGQ+J1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC90cj4nXG4gICAgICAgICAgICAgICAgICAgICsgJzwvdGJvZHk+J1xuICAgICAgICAgICAgICAgICAgICArICc8L3RhYmxlPicsXG4gICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNOYW1lc0h0bWwgPSAnJyxcbiAgICAgICAgICAgICAgICAgICAgYW50aWJpb3RpY1Jlc2lzdGFuY2VzSHRtbCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIGVhY2ggYW50aWJpb3RpY1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhbnRpYmlvdGljTmFtZSBpbiBhbnRpYmlvdGljc1thbnRpYmlvdGljR3JvdXBOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFudGliaW90aWNzW2FudGliaW90aWNHcm91cE5hbWVdLmhhc093blByb3BlcnR5KGFudGliaW90aWNOYW1lKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFudGliaW90aWNOYW1lc0h0bWwgPSBhbnRpYmlvdGljTmFtZXNIdG1sICsgJzx0ZD4nICsgYW50aWJpb3RpY05hbWUgKyAnPC90ZD4nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW50aWJpb3RpYyBmb3VuZCBpbiBSZXNpc3RhbmNlIFByb2ZpbGUgZm9yIHRoaXMgYXNzZW1ibHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVbYW50aWJpb3RpY0dyb3VwTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVbYW50aWJpb3RpY0dyb3VwTmFtZV1bYW50aWJpb3RpY05hbWVdICE9PSAndW5kZWZpbmVkJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYW50aWJpb3RpY05hbWU6ICcgKyBhbnRpYmlvdGljTmFtZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhc3NlbWJseUFudGliaW90aWNSZXNpc3RhbmNlU3RhdGUgPSBhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlW2FudGliaW90aWNHcm91cE5hbWVdW2FudGliaW90aWNOYW1lXS5yZXNpc3RhbmNlU3RhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3NlbWJseUFudGliaW90aWNSZXNpc3RhbmNlU3RhdGUgPT09ICdSRVNJU1RBTlQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW50aWJpb3RpY1Jlc2lzdGFuY2VzSHRtbCA9IGFudGliaW90aWNSZXNpc3RhbmNlc0h0bWwgKyAnPHRkPjxkaXYgY2xhc3M9XCJhbnRpYmlvdGljIHJlc2lzdGFuY2UtZmFpbFwiIGRhdGEtYW50aWJpb3RpYy1uYW1lPVwiJyArIGFudGliaW90aWNOYW1lICsgJ1wiIGRhdGEtYW50aWJpb3RpYy1yZXNpc3RhbmNlLXN0YXRlPVwiJyArIGFzc2VtYmx5QW50aWJpb3RpY1Jlc2lzdGFuY2VTdGF0ZSArICdcIiBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cInRvcFwiIHRpdGxlPVwiJyArIGFudGliaW90aWNOYW1lICsgJ1wiPicgKyBhbnRpYmlvdGljTmFtZSArJzwvZGl2PjwvdGQ+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXNzZW1ibHlBbnRpYmlvdGljUmVzaXN0YW5jZVN0YXRlID09PSAnU0VOU0lUSVZFJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNSZXNpc3RhbmNlc0h0bWwgPSBhbnRpYmlvdGljUmVzaXN0YW5jZXNIdG1sICsgJzx0ZD48ZGl2IGNsYXNzPVwiYW50aWJpb3RpYyByZXNpc3RhbmNlLXN1Y2Nlc3NcIiBkYXRhLWFudGliaW90aWMtbmFtZT1cIicgKyBhbnRpYmlvdGljTmFtZSArICdcIiBkYXRhLWFudGliaW90aWMtcmVzaXN0YW5jZS1zdGF0ZT1cIicgKyBhc3NlbWJseUFudGliaW90aWNSZXNpc3RhbmNlU3RhdGUgKyAnXCIgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT1cIicgKyBhbnRpYmlvdGljTmFtZSArICdcIj4nICsgYW50aWJpb3RpY05hbWUgKyc8L2Rpdj48L3RkPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNSZXNpc3RhbmNlc0h0bWwgPSBhbnRpYmlvdGljUmVzaXN0YW5jZXNIdG1sICsgJzx0ZD48ZGl2IGNsYXNzPVwiYW50aWJpb3RpYyByZXNpc3RhbmNlLXVua25vd25cIiBkYXRhLWFudGliaW90aWMtbmFtZT1cIicgKyBhbnRpYmlvdGljTmFtZSArICdcIiBkYXRhLWFudGliaW90aWMtcmVzaXN0YW5jZS1zdGF0ZT1cIicgKyBhc3NlbWJseUFudGliaW90aWNSZXNpc3RhbmNlU3RhdGUgKyAnXCIgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT1cIicgKyBhbnRpYmlvdGljTmFtZSArICdcIj4nICsgYW50aWJpb3RpY05hbWUgKyc8L2Rpdj48L3RkPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFudGliaW90aWNSZXNpc3RhbmNlc0h0bWwgPSBhbnRpYmlvdGljUmVzaXN0YW5jZXNIdG1sICsgJzx0ZD48ZGl2IGNsYXNzPVwiYW50aWJpb3RpYyByZXNpc3RhbmNlLXVua25vd25cIiBkYXRhLWFudGliaW90aWMtbmFtZT1cIicgKyBhbnRpYmlvdGljTmFtZSArICdcIiBkYXRhLWFudGliaW90aWMtcmVzaXN0YW5jZS1zdGF0ZT1cIicgKyBhc3NlbWJseUFudGliaW90aWNSZXNpc3RhbmNlU3RhdGUgKyAnXCIgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT1cIicgKyBhbnRpYmlvdGljTmFtZSArICdcIj4nICsgYW50aWJpb3RpY05hbWUgKyc8L2Rpdj48L3RkPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnPj4+IEFzc2VtYmx5IHJlc2lzdGFuY2UgcHJvZmlsZSBoYXMgbm8gYW50aWJpb3RpYzogJyArIGFudGliaW90aWNOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW50aWJpb3RpY1Jlc2lzdGFuY2VzSHRtbCA9IGFudGliaW90aWNSZXNpc3RhbmNlc0h0bWwgKyAnPHRkPjxkaXYgY2xhc3M9XCJhbnRpYmlvdGljIHJlc2lzdGFuY2UtdW5rbm93blwiIGRhdGEtYW50aWJpb3RpYy1uYW1lPVwiJyArIGFudGliaW90aWNOYW1lICsgJ1wiIGRhdGEtYW50aWJpb3RpYy1yZXNpc3RhbmNlLXN0YXRlPVwiJyArIGFzc2VtYmx5QW50aWJpb3RpY1Jlc2lzdGFuY2VTdGF0ZSArICdcIiBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cInRvcFwiIHRpdGxlPVwiJyArIGFudGliaW90aWNOYW1lICsgJ1wiPicgKyBhbnRpYmlvdGljTmFtZSArJzwvZGl2PjwvdGQ+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJz4+PiBBc3NlbWJseSByZXNpc3RhbmNlIHByb2ZpbGUgaGFzIG5vIGFudGliaW90aWMgZ3JvdXA6ICcgKyBhbnRpYmlvdGljR3JvdXBOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gLy8gaWZcbiAgICAgICAgICAgICAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICAgICAgICAgICAgICBhbnRpYmlvdGljR3JvdXBIdG1sID0gYW50aWJpb3RpY0dyb3VwSHRtbC5yZXBsYWNlKC97e2FudGliaW90aWNHcm91cE5hbWV9fS9nLCBhbnRpYmlvdGljR3JvdXBOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYW50aWJpb3RpY0dyb3VwSHRtbCA9IGFudGliaW90aWNHcm91cEh0bWwucmVwbGFjZSgve3thbnRpYmlvdGljUmVzaXN0YW5jZXNIdG1sfX0vLCBhbnRpYmlvdGljUmVzaXN0YW5jZXNIdG1sKTtcblxuICAgICAgICAgICAgICAgICAgICBhc3NlbWJseVJlc2lzdGFuY2VQcm9maWxlSHRtbCA9IGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVIdG1sICsgYW50aWJpb3RpY0dyb3VwSHRtbDtcblxuICAgICAgICAgICAgICAgIH0gLy8gaWZcbiAgICAgICAgICAgIH0gLy8gZm9yXG5cbiAgICAgICAgICAgICQoJy53Z3N0LXBhbmVsX19hc3NlbWJseSAuYXNzZW1ibHktZGV0YWlsX19yZXNpc3RhbmNlLXByb2ZpbGUgLmFzc2VtYmx5LWRldGFpbC1jb250ZW50JykuaHRtbCgkKGFzc2VtYmx5UmVzaXN0YW5jZVByb2ZpbGVIdG1sKSk7XG5cbiAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgLy8gUHJlcGFyZSBTVCB0eXBlXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgICAgICAgICAgaWYgKGFzc2VtYmx5Lk1MU1RfUkVTVUxULnN0VHlwZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAkKCcud2dzdC1wYW5lbF9fYXNzZW1ibHkgLmFzc2VtYmx5LWRldGFpbF9fc3QtdHlwZSAuYXNzZW1ibHktZGV0YWlsLWNvbnRlbnQnKS5odG1sKCdOb3QgZm91bmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCgnLndnc3QtcGFuZWxfX2Fzc2VtYmx5IC5hc3NlbWJseS1kZXRhaWxfX3N0LXR5cGUgLmFzc2VtYmx5LWRldGFpbC1jb250ZW50JykuaHRtbChhc3NlbWJseS5NTFNUX1JFU1VMVC5zdFR5cGUpO1xuICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICAvLyBQcmVwYXJlIE1MU1RcbiAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgICAgICAgICB2YXIgYXNzZW1ibHlBbGxlbGVzID0gYXNzZW1ibHkuTUxTVF9SRVNVTFQuYWxsZWxlcyxcbiAgICAgICAgICAgICAgICBhc3NlbWJseUFsbGVsZSxcbiAgICAgICAgICAgICAgICBhc3NlbWJseUFsbGVsZU5hbWUsXG4gICAgICAgICAgICAgICAgYXNzZW1ibHlNbHN0SHRtbCA9XG4gICAgICAgICAgICAgICAgJzx0YWJsZT4nXG4gICAgICAgICAgICAgICAgICAgICsgJzx0Ym9keT4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8dHI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzx0ZCBjbGFzcz1cInJvdy10aXRsZVwiPkxvY3VzIElkPC90ZD4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAne3tsb2N1c0lkc319J1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC90cj4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8dHI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzx0ZCBjbGFzcz1cInJvdy10aXRsZVwiPkFsbGVsZSBJZDwvdGQ+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ3t7YWxsZWxlSWRzfX0nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8L3RyPidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC90Ym9keT4nXG4gICAgICAgICAgICAgICAgKyAnPC90YWJsZT4nLFxuICAgICAgICAgICAgICAgIGxvY3VzRGF0YUh0bWwgPSAnJyxcbiAgICAgICAgICAgICAgICBhbGxlbGVEYXRhSHRtbCA9ICcnO1xuXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdhc3NlbWJseUFsbGVsZXM6Jyk7XG4gICAgICAgICAgICBjb25zb2xlLmRpcihhc3NlbWJseUFsbGVsZXMpO1xuXG4gICAgICAgICAgICBmb3IgKGFzc2VtYmx5QWxsZWxlTmFtZSBpbiBhc3NlbWJseUFsbGVsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXNzZW1ibHlBbGxlbGVzLmhhc093blByb3BlcnR5KGFzc2VtYmx5QWxsZWxlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibHlBbGxlbGUgPSBhc3NlbWJseUFsbGVsZXNbYXNzZW1ibHlBbGxlbGVOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2VtYmx5QWxsZWxlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2N1c0RhdGFIdG1sID0gbG9jdXNEYXRhSHRtbCArICc8dGQ+JyArICdOb25lJyArICc8L3RkPic7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxlbGVEYXRhSHRtbCA9IGFsbGVsZURhdGFIdG1sICsgJzx0ZD4nICsgYXNzZW1ibHlBbGxlbGVOYW1lICsgJzwvdGQ+JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY3VzRGF0YUh0bWwgPSBsb2N1c0RhdGFIdG1sICsgJzx0ZD4nICsgYXNzZW1ibHlBbGxlbGVzW2Fzc2VtYmx5QWxsZWxlTmFtZV0ubG9jdXNJZCArICc8L3RkPic7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxlbGVEYXRhSHRtbCA9IGFsbGVsZURhdGFIdG1sICsgJzx0ZD4nICsgYXNzZW1ibHlBbGxlbGVzW2Fzc2VtYmx5QWxsZWxlTmFtZV0uYWxsZWxlSWQgKyAnPC90ZD4nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAvLyBpZlxuICAgICAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICAgICAgYXNzZW1ibHlNbHN0SHRtbCA9IGFzc2VtYmx5TWxzdEh0bWwucmVwbGFjZSgne3tsb2N1c0lkc319JywgbG9jdXNEYXRhSHRtbCk7XG4gICAgICAgICAgICBhc3NlbWJseU1sc3RIdG1sID0gYXNzZW1ibHlNbHN0SHRtbC5yZXBsYWNlKCd7e2FsbGVsZUlkc319JywgYWxsZWxlRGF0YUh0bWwpO1xuXG4gICAgICAgICAgICAkKCcud2dzdC1wYW5lbF9fYXNzZW1ibHkgLmFzc2VtYmx5LWRldGFpbF9fbWxzdCAuYXNzZW1ibHktZGV0YWlsLWNvbnRlbnQnKS5odG1sKCQoYXNzZW1ibHlNbHN0SHRtbCkpO1xuXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgIC8vIFByZXBhcmUgbmVhcmVzdCByZXByZXNlbnRhdGl2ZVxuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAgICAgICAgIHZhciBhc3NlbWJseVNjb3JlcyA9IGFzc2VtYmx5WydGUF9DT01QJ10uc2NvcmVzLFxuICAgICAgICAgICAgICAgIGFzc2VtYmx5VG9wU2NvcmUgPSBjYWxjdWxhdGVBc3NlbWJseVRvcFNjb3JlKGFzc2VtYmx5U2NvcmVzKTtcblxuICAgICAgICAgICAgJCgnLndnc3QtcGFuZWxfX2Fzc2VtYmx5IC5hc3NlbWJseS1kZXRhaWxfX25lYXJlc3QtcmVwcmVzZW50YXRpdmUgLmFzc2VtYmx5LWRldGFpbC1jb250ZW50JykudGV4dChhc3NlbWJseVRvcFNjb3JlLnJlZmVyZW5jZUlkKTtcblxuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICAvLyBQcmVwYXJlIHNjb3Jlc1xuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICAgICAgICAgIHZhciBhc3NlbWJseVNjb3Jlc0h0bWwgPVxuICAgICAgICAgICAgICAgICc8dGFibGU+J1xuICAgICAgICAgICAgICAgICAgICArICc8dGhlYWQ+J1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPHRyPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8dGg+UmVmZXJlbmNlIElkPC90aD4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPHRoPlNjb3JlPC90aD4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICc8L3RyPidcbiAgICAgICAgICAgICAgICAgICAgKyAnPC90aGVhZD4nXG4gICAgICAgICAgICAgICAgICAgICsgJzx0Ym9keT4nXG4gICAgICAgICAgICAgICAgICAgICAgICArICd7e2Fzc2VtYmx5U2NvcmVzRGF0YUh0bWx9fSdcbiAgICAgICAgICAgICAgICAgICAgKyAnPC90Ym9keT4nXG4gICAgICAgICAgICAgICAgKyAnPC90YWJsZT4nLFxuICAgICAgICAgICAgICAgIGFzc2VtYmx5U2NvcmVzRGF0YUh0bWwgPSAnJyxcbiAgICAgICAgICAgICAgICBzY29yZVRleHQ7XG5cbiAgICAgICAgICAgIC8vIFNvcnQgc2NvcmVzXG4gICAgICAgICAgICB2YXIgc29ydGVkQXNzZW1ibHlTY29yZXMgPSBPYmplY3Qua2V5cyhhc3NlbWJseVNjb3Jlcykuc29ydChmdW5jdGlvbihhc3NlbWJseVNjb3JlUmVmZXJlbmNlSWQxLCBhc3NlbWJseVNjb3JlUmVmZXJlbmNlSWQyKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXNzZW1ibHlTY29yZXNbYXNzZW1ibHlTY29yZVJlZmVyZW5jZUlkMV0gLSBhc3NlbWJseVNjb3Jlc1thc3NlbWJseVNjb3JlUmVmZXJlbmNlSWQyXTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgYXNzZW1ibHlTY29yZUNvdW50ZXIgPSBzb3J0ZWRBc3NlbWJseVNjb3Jlcy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKDsgYXNzZW1ibHlTY29yZUNvdW50ZXIgIT09IDA7KSB7XG4gICAgICAgICAgICAgICAgYXNzZW1ibHlTY29yZUNvdW50ZXIgPSBhc3NlbWJseVNjb3JlQ291bnRlciAtIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZmVyZW5jZUlkID0gc29ydGVkQXNzZW1ibHlTY29yZXNbYXNzZW1ibHlTY29yZUNvdW50ZXJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVEYXRhID0gYXNzZW1ibHlTY29yZXNbcmVmZXJlbmNlSWRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVUZXh0ID0gc2NvcmVEYXRhLnNjb3JlLnRvRml4ZWQoMikgKyAnID0gJyArIE1hdGgucm91bmQoc2NvcmVEYXRhLnNjb3JlICogcGFyc2VJbnQoYXNzZW1ibHlbJ0ZQX0NPTVAnXVsnZmluZ2VycHJpbnRTaXplJ10sIDEwKSkgKyAnLycgKyBhc3NlbWJseVsnRlBfQ09NUCddWydmaW5nZXJwcmludFNpemUnXTtcblxuICAgICAgICAgICAgICAgICAgICBhc3NlbWJseVNjb3Jlc0RhdGFIdG1sID0gYXNzZW1ibHlTY29yZXNEYXRhSHRtbCBcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzx0cj4nIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzx0ZD4nICsgc2NvcmVEYXRhLnJlZmVyZW5jZUlkICsgJzwvdGQ+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzx0ZD4nICsgc2NvcmVUZXh0ICsgJzwvdGQ+J1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC90cj4nO1xuICAgICAgICAgICAgfSAvLyBmb3JcblxuICAgICAgICAgICAgYXNzZW1ibHlTY29yZXNIdG1sID0gYXNzZW1ibHlTY29yZXNIdG1sLnJlcGxhY2UoJ3t7YXNzZW1ibHlTY29yZXNEYXRhSHRtbH19JywgYXNzZW1ibHlTY29yZXNEYXRhSHRtbCk7XG5cbiAgICAgICAgICAgICQoJy53Z3N0LXBhbmVsX19hc3NlbWJseSAuYXNzZW1ibHktZGV0YWlsX19zY29yZSAuYXNzZW1ibHktZGV0YWlsLWNvbnRlbnQnKS5odG1sKGFzc2VtYmx5U2NvcmVzSHRtbCk7XG5cbiAgICAgICAgICAgIC8vIEhpZGUgYW5pbWF0ZWQgbG9hZGluZyBjaXJjbGVcbiAgICAgICAgICAgICQoJy53Z3N0LXBhbmVsX19hc3NlbWJseSAud2dzdC1wYW5lbC1sb2FkaW5nJykuaGlkZSgpO1xuICAgICAgICB9KVxuICAgICAgICAuZmFpbChmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF1bRVJST1JdIEZhaWxlZCB0byBnZXQgYXNzZW1ibHkgZGF0YScpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcih0ZXh0U3RhdHVzKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihqcVhIUik7XG5cbiAgICAgICAgICAgIHNob3dOb3RpZmljYXRpb24odGV4dFN0YXR1cyk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyAkKCcuY29sbGVjdGlvbi1jb250cm9scy1zaG93LW9uLXJlcHJlc2VudGF0aXZlLXRyZWUnKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgIC8vICAgICB2YXIgY29sbGVjdGlvbklkID0gJCh0aGlzKS5jbG9zZXN0KCcud2dzdC1wYW5lbF9fY29sbGVjdGlvbicpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi1pZCcpLFxuICAgIC8vICAgICAgICAgbmVhcmVzdFJlcHJlc2VudGF0aXZlID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF07XG5cbiAgICAvLyAgICAgICAgIGNvbnNvbGUuZGlyKG5lYXJlc3RSZXByZXNlbnRhdGl2ZSk7XG4gICAgLy8gfSk7XG5cbiAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy53Z3N0LXRyZWUtY29udHJvbF9fc2hvdy1uZXdpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgY29sbGVjdGlvbklkID0gJCh0aGlzKS5jbG9zZXN0KCcud2dzdC1wYW5lbCcpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi1pZCcpLFxuICAgICAgICAgICAgY29sbGVjdGlvblRyZWVUeXBlID0gJCh0aGlzKS5jbG9zZXN0KCcud2dzdC1wYW5lbCcpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi10cmVlLXR5cGUnKSxcbiAgICAgICAgICAgIG5ld2lja1N0cmluZ1dpdGhMYWJlbHMsXG4gICAgICAgICAgICBuZXdXaW5kb3c7XG5cbiAgICAgICAgbmV3aWNrU3RyaW5nV2l0aExhYmVscyA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWVbY29sbGVjdGlvblRyZWVUeXBlXS5uZXdpY2tTdHJpbmdXaXRoTGFiZWxzO1xuXG4gICAgICAgIG5ld1dpbmRvdyA9IHdpbmRvdy5vcGVuKCk7XG4gICAgICAgIG5ld1dpbmRvdy5kb2N1bWVudC53cml0ZShuZXdpY2tTdHJpbmdXaXRoTGFiZWxzKTtcbiAgICB9KTtcblxuICAgICQoJ2JvZHknKS5vbignY2xpY2snLCAnLndnc3QtdHJlZS1jb250cm9sX19kZWNyZWFzZS1sYWJlbC1mb250LXNpemUnLCBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgY29sbGVjdGlvbklkID0gJCh0aGlzKS5jbG9zZXN0KCcud2dzdC1wYW5lbCcpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi1pZCcpLFxuICAgICAgICAgICAgY29sbGVjdGlvblRyZWVUeXBlID0gJCh0aGlzKS5jbG9zZXN0KCcud2dzdC1wYW5lbCcpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi10cmVlLXR5cGUnKSxcbiAgICAgICAgICAgIGN1cnJlbnROb2RlVGV4dFNpemUsXG4gICAgICAgICAgICB0cmVlO1xuXG4gICAgICAgIHRyZWUgPSBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS50cmVlW2NvbGxlY3Rpb25UcmVlVHlwZV0uY2FudmFzO1xuICAgICAgICBjdXJyZW50Tm9kZVRleHRTaXplID0gdHJlZS50ZXh0U2l6ZTtcbiAgICAgICAgdHJlZS5zZXRUZXh0U2l6ZShjdXJyZW50Tm9kZVRleHRTaXplIC0gMyk7XG4gICAgfSk7XG5cbiAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy53Z3N0LXRyZWUtY29udHJvbF9faW5jcmVhc2UtbGFiZWwtZm9udC1zaXplJywgZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGNvbGxlY3Rpb25JZCA9ICQodGhpcykuY2xvc2VzdCgnLndnc3QtcGFuZWwnKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25UcmVlVHlwZSA9ICQodGhpcykuY2xvc2VzdCgnLndnc3QtcGFuZWwnKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24tdHJlZS10eXBlJyksXG4gICAgICAgICAgICBjdXJyZW50Tm9kZVRleHRTaXplLFxuICAgICAgICAgICAgdHJlZTtcblxuICAgICAgICB0cmVlID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZVtjb2xsZWN0aW9uVHJlZVR5cGVdLmNhbnZhcztcbiAgICAgICAgY3VycmVudE5vZGVUZXh0U2l6ZSA9IHRyZWUudGV4dFNpemU7XG4gICAgICAgIHRyZWUuc2V0VGV4dFNpemUoY3VycmVudE5vZGVUZXh0U2l6ZSArIDMpO1xuICAgIH0pO1xuXG4gICAgJCgnYm9keScpLm9uKCdjbGljaycsICcud2dzdC10cmVlLWNvbnRyb2xfX2RlY3JlYXNlLW5vZGUtc2l6ZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBjb2xsZWN0aW9uSWQgPSAkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyksXG4gICAgICAgICAgICBjb2xsZWN0aW9uVHJlZVR5cGUgPSAkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLXRyZWUtdHlwZScpLFxuICAgICAgICAgICAgdHJlZSxcbiAgICAgICAgICAgIGN1cnJlbnROb2RlU2l6ZTtcblxuICAgICAgICB0cmVlID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZVtjb2xsZWN0aW9uVHJlZVR5cGVdLmNhbnZhcztcbiAgICAgICAgY3VycmVudE5vZGVTaXplID0gdHJlZS5iYXNlTm9kZVNpemU7XG5cbiAgICAgICAgaWYgKGN1cnJlbnROb2RlU2l6ZSA+IDMpIHtcbiAgICAgICAgICAgIHRyZWUuc2V0Tm9kZVNpemUoY3VycmVudE5vZGVTaXplIC0gMyk7XG4gICAgICAgICAgICBjdXJyZW50Tm9kZVNpemUgPSB0cmVlLmJhc2VOb2RlU2l6ZTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50Tm9kZVNpemUgPCAzKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgJCgnYm9keScpLm9uKCdjbGljaycsICcud2dzdC10cmVlLWNvbnRyb2xfX2luY3JlYXNlLW5vZGUtc2l6ZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBjb2xsZWN0aW9uSWQgPSAkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyksXG4gICAgICAgICAgICBjb2xsZWN0aW9uVHJlZVR5cGUgPSAkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLXRyZWUtdHlwZScpLFxuICAgICAgICAgICAgdHJlZSxcbiAgICAgICAgICAgIGN1cnJlbnROb2RlU2l6ZTtcblxuICAgICAgICB0cmVlID0gV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZVtjb2xsZWN0aW9uVHJlZVR5cGVdLmNhbnZhcztcbiAgICAgICAgY3VycmVudE5vZGVTaXplID0gdHJlZS5iYXNlTm9kZVNpemU7XG4gICAgICAgIHRyZWUuc2V0Tm9kZVNpemUoY3VycmVudE5vZGVTaXplICsgMyk7XG5cbiAgICAgICAgaWYgKHRyZWUuYmFzZU5vZGVTaXplID4gMykge1xuICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcud2dzdC10cmVlLWNvbnRyb2wnKS5maW5kKCcud2dzdC10cmVlLWNvbnRyb2xfX2RlY3JlYXNlLW5vZGUtc2l6ZScpLmF0dHIoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgJCgnYm9keScpLm9uKCdjaGFuZ2UnLCAnLndnc3QtdHJlZS1jb250cm9sX19zaG93LW5vZGUtbGFiZWxzJywgZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGNvbGxlY3Rpb25JZCA9ICQodGhpcykuY2xvc2VzdCgnLndnc3QtcGFuZWwnKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25UcmVlVHlwZSA9ICQodGhpcykuY2xvc2VzdCgnLndnc3QtcGFuZWwnKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24tdHJlZS10eXBlJyksXG4gICAgICAgICAgICB0cmVlO1xuICAgICAgICBcbiAgICAgICAgdHJlZSA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWVbY29sbGVjdGlvblRyZWVUeXBlXS5jYW52YXM7XG4gICAgICAgIHRyZWUudG9nZ2xlTGFiZWxzKCk7XG4gICAgfSk7XG4gICAgJCgnYm9keScpLm9uKCdjbGljaycsICcud2dzdC10cmVlLWNvbnRyb2xfX21lcmdlLWNvbGxlY3Rpb24tdHJlZXMnLCBmdW5jdGlvbigpe1xuXG4gICAgICAgIHZhciBtZXJnZUJ1dHRvbiA9ICQodGhpcyk7XG5cbiAgICAgICAgbWVyZ2VCdXR0b24uYXR0cignZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgbWVyZ2VCdXR0b24uZmluZCgnLndnc3Qtc3Bpbm5lci1sYWJlbCcpLmhpZGUoKTtcbiAgICAgICAgbWVyZ2VCdXR0b24uZmluZCgnLndnc3Qtc3Bpbm5lcicpLnNob3coKTtcblxuICAgICAgICB2YXIgcmVxdWVzdERhdGEgPSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uSWQ6IG1lcmdlQnV0dG9uLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyksXG4gICAgICAgICAgICBtZXJnZVdpdGhDb2xsZWN0aW9uSWQ6ICc1MmEzMjlkMy00YmE5LTRmYTktYjNkOS02ZWViODY0MjI2MjUnLCAvLyc3OGNiNzAwOS02NGFjLTRmMDQtODQyOC1kNDA4OWFhZTJhMTMnLC8vJzg1MTA1NGQ5LTg2YzItNDUyZS1iOWFmLThjYWMxZDhmMGVmNicsXG4gICAgICAgICAgICBjb2xsZWN0aW9uVHJlZVR5cGU6IG1lcmdlQnV0dG9uLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi10cmVlLXR5cGUnKSxcbiAgICAgICAgICAgIHNvY2tldFJvb21JZDogV0dTVC5zb2NrZXQucm9vbUlkXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBSZXF1ZXN0aW5nIHRvIG1lcmdlIGNvbGxlY3Rpb24gdHJlZXM6ICcgKyByZXF1ZXN0RGF0YS5jb2xsZWN0aW9uSWQgKyAnLCAnICsgcmVxdWVzdERhdGEubWVyZ2VXaXRoQ29sbGVjdGlvbklkKTtcblxuICAgICAgICAvLyBNZXJnZSBjb2xsZWN0aW9uIHRyZWVzXG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6ICcvYXBpL2NvbGxlY3Rpb24vdHJlZS9tZXJnZScsXG4gICAgICAgICAgICBkYXRhdHlwZTogJ2pzb24nLCAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS85MTU1MjE3XG4gICAgICAgICAgICBkYXRhOiByZXF1ZXN0RGF0YVxuICAgICAgICB9KVxuICAgICAgICAuZG9uZShmdW5jdGlvbihtZXJnZVJlcXVlc3RTZW50LCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBSZXF1ZXN0ZWQgdG8gbWVyZ2UgY29sbGVjdGlvbiB0cmVlczogJyArIHJlcXVlc3REYXRhLmNvbGxlY3Rpb25JZCArICcsICcgKyByZXF1ZXN0RGF0YS5tZXJnZVdpdGhDb2xsZWN0aW9uSWQpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgcmVuZGVyUmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZVxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIHJlbmRlclJlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBSZW5kZXJpbmcgcmVwcmVzZW50YXRpdmUgY29sbGVjdGlvbiB0cmVlJyk7XG5cbiAgICAgICAgdmFyIGNvbGxlY3Rpb25JZCA9ICdyZXByZXNlbnRhdGl2ZSc7Ly9XR1NULnNldHRpbmdzLnJlcHJlc2VudGF0aXZlQ29sbGVjdGlvbklkO1xuXG4gICAgICAgIC8vIFJlbW92ZSBwcmV2aW9zbHkgcmVuZGVyZWQgY29sbGVjdGlvbiB0cmVlXG4gICAgICAgICQoJy53Z3N0LXBhbmVsX19yZXByZXNlbnRhdGl2ZS1jb2xsZWN0aW9uLXRyZWUgLndnc3QtdHJlZS1jb250ZW50JykuaHRtbCgnJyk7XG4gICAgICAgIC8vIEF0dGFjaCBjb2xsZWN0aW9uIGlkXG4gICAgICAgICQoJy53Z3N0LXBhbmVsX19yZXByZXNlbnRhdGl2ZS1jb2xsZWN0aW9uLXRyZWUgLndnc3QtdHJlZS1jb250ZW50JykuYXR0cignaWQnLCAncGh5bG9jYW52YXNfJyArIGNvbGxlY3Rpb25JZCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1dHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZTonKTtcbiAgICAgICAgY29uc29sZS5kaXIoV0dTVC5jb2xsZWN0aW9uLnJlcHJlc2VudGF0aXZlKTtcblxuICAgICAgICBXR1NULmNvbGxlY3Rpb24ucmVwcmVzZW50YXRpdmUudHJlZS5jYW52YXMgPSBuZXcgUGh5bG9DYW52YXMuVHJlZSgkKCdbZGF0YS1wYW5lbC1uYW1lPVwicmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZVwiXSAud2dzdC10cmVlLWNvbnRlbnQnKS5nZXQoMCksIHsgaGlzdG9yeV9jb2xsYXBzZWQ6IHRydWUgfSk7XG4gICAgICAgIFdHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmNhbnZhcy5sb2FkKCcvZGF0YS9yZWZlcmVuY2VfdHJlZS5ud2snKTtcbiAgICAgICAgV0dTVC5jb2xsZWN0aW9uLnJlcHJlc2VudGF0aXZlLnRyZWUuY2FudmFzLnRyZWVUeXBlID0gJ3JlY3Rhbmd1bGFyJztcblxuICAgICAgICAvLyAvLyBOZWVkIHRvIHJlc2l6ZSB0byBmaXQgaXQgY29ycmVjdGx5XG4gICAgICAgIC8vIFdHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmNhbnZhcy5yZXNpemVUb0NvbnRhaW5lcigpO1xuICAgICAgICAvLyAvLyBOZWVkIHRvIHJlZHJhdyB0byBhY3R1YWxseSBzZWUgaXRcbiAgICAgICAgLy8gV0dTVC5jb2xsZWN0aW9uLnJlcHJlc2VudGF0aXZlLnRyZWUuY2FudmFzLmRyYXduID0gZmFsc2U7XG4gICAgICAgIC8vIFdHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmNhbnZhcy5kcmF3KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBvcGVuUmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZVxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIG9wZW5SZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbV0dTVF0gT3BlbmluZyByZXByZXNlbnRhdGl2ZSBjb2xsZWN0aW9uIHRyZWUnKTtcblxuICAgICAgICAvLyBUTyBETzogRmlndXJlIG91dCB3aGV0aGVyIHJlcHJlc2VudGF0aXZlIHRyZWUgaXMganVzdCBhbm90aGVyIGNvbGxlY3Rpb24gb3IgaXQncyBhIGNvbXBsZXRlbHkgc2VwYXJhdGUgZW50aXR5LlxuICAgICAgICAvLyBDdXJyZW50bHkgdHJlYXRpbmcgaXQgbGlrZSBqdXN0IGFub3RoZXIgY29sbGVjdGlvbi5cblxuICAgICAgICB2YXIgY29sbGVjdGlvbklkID0gJ3JlcHJlc2VudGF0aXZlJzsvL1dHU1Quc2V0dGluZ3MucmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uSWQ7XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBJbml0IHBhbmVsc1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIFNldCBjb2xsZWN0aW9uIGlkIHRvIHJlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUgcGFuZWxcbiAgICAgICAgJCgnLndnc3QtcGFuZWxfX3JlcHJlc2VudGF0aXZlLWNvbGxlY3Rpb24tdHJlZScpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi1pZCcsIGNvbGxlY3Rpb25JZCk7XG5cbiAgICAgICAgLy8gYWN0aXZhdGVQYW5lbCgncmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICBzdGFydFBhbmVsTG9hZGluZ0luZGljYXRvcigncmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZScpO1xuICAgICAgICAvLyB9KTtcblxuICAgICAgICBhY3RpdmF0ZVBhbmVsKCdyZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlJyk7XG4gICAgICAgIGVuZFBhbmVsTG9hZGluZ0luZGljYXRvcigncmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZScpO1xuICAgICAgICBzaG93UGFuZWxCb2R5Q29udGVudCgncmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZScpO1xuICAgICAgICBzaG93UGFuZWwoJ3JlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUnKTtcbiAgICAgICAgYnJpbmdQYW5lbFRvVG9wKCdyZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlJyk7XG5cbiAgICAgICAgLy8gZ2V0UmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZU1ldGFkYXRhKGZ1bmN0aW9uKGVycm9yLCByZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25NZXRhZGF0YSl7XG4gICAgICAgIC8vICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgLy8gICAgICAgICAvLyBTaG93IGVycm9yIG5vdGlmaWNhdGlvblxuICAgICAgICAvLyAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgXG4gICAgICAgIC8vICAgICByZW5kZXJSZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlKCk7XG5cbiAgICAgICAgLy8gICAgIC8vIC8vIEluaXQgY29sbGVjdGlvbiB0cmVlXG4gICAgICAgIC8vICAgICAvLyBXR1NULmNvbGxlY3Rpb24ucmVwcmVzZW50YXRpdmUudHJlZS5jYW52YXMgPSBuZXcgUGh5bG9DYW52YXMuVHJlZSgkKCdbZGF0YS1wYW5lbC1uYW1lPVwicmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZVwiXSAucGh5bG9jYW52YXMnKVswXSk7XG4gICAgICAgIC8vICAgICAvLyAvLyBSZW5kZXIgY29sbGVjdGlvbiB0cmVlXG4gICAgICAgIC8vICAgICAvLyAvL3JlbmRlckNvbGxlY3Rpb25UcmVlKGNvbGxlY3Rpb25JZCk7XG5cbiAgICAgICAgLy8gICAgIC8vIFdHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmNhbnZhcy5sb2FkKCcvZGF0YS9yZWZlcmVuY2VfdHJlZS5ud2snKTtcbiAgICAgICAgLy8gICAgIC8vIFdHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmNhbnZhcy50cmVlVHlwZSA9ICdyZWN0YW5ndWxhcic7XG4gICAgICAgIC8vICAgICAvLyAvL1dHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLnNob3dMYWJlbHMgPSBmYWxzZTtcbiAgICAgICAgLy8gICAgIC8vIFdHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmNhbnZhcy5iYXNlTm9kZVNpemUgPSAwLjU7XG4gICAgICAgIC8vICAgICAvLyBXR1NULmNvbGxlY3Rpb24ucmVwcmVzZW50YXRpdmUudHJlZS5jYW52YXMuc2V0VGV4dFNpemUoMjQpO1xuICAgICAgICAvLyAgICAgLy8gV0dTVC5jb2xsZWN0aW9uLnJlcHJlc2VudGF0aXZlLnRyZWUuY2FudmFzLnNlbGVjdGVkTm9kZVNpemVJbmNyZWFzZSA9IDAuNTtcbiAgICAgICAgLy8gICAgIC8vIFdHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmNhbnZhcy5zZWxlY3RlZENvbG9yID0gJyMwMDU5REUnO1xuICAgICAgICAvLyAgICAgLy8gV0dTVC5jb2xsZWN0aW9uLnJlcHJlc2VudGF0aXZlLnRyZWUuY2FudmFzLnJpZ2h0Q2xpY2tab29tID0gdHJ1ZTtcbiAgICAgICAgLy8gICAgIC8vIC8vV0dTVC5jb2xsZWN0aW9uLnJlcHJlc2VudGF0aXZlLnRyZWUuY2FudmFzLm9uc2VsZWN0ZWQgPSBzaG93UmVwcmVzZW50YXRpdmVUcmVlTm9kZXNPbk1hcDtcblxuICAgICAgICAvLyAgICAgLy8gZW5kUGFuZWxMb2FkaW5nSW5kaWNhdG9yKCdyZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlJyk7XG4gICAgICAgIC8vICAgICAvLyBzaG93UGFuZWxCb2R5Q29udGVudCgncmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZScpO1xuICAgICAgICAvLyAgICAgLy8gc2hvd1BhbmVsKCdyZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlJyk7XG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIC8vIC8vIEdldCByZXByZXNlbnRhdGl2ZSBjb2xsZWN0aW9uIG1ldGFkYXRhXG4gICAgICAgIC8vICQuYWpheCh7XG4gICAgICAgIC8vICAgICB0eXBlOiAnR0VUJyxcbiAgICAgICAgLy8gICAgIHVybDogJy9hcGkvY29sbGVjdGlvbi9yZXByZXNlbnRhdGl2ZS9tZXRhZGF0YScsXG4gICAgICAgIC8vICAgICBkYXRhdHlwZTogJ2pzb24nIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzkxNTUyMTdcbiAgICAgICAgLy8gfSlcbiAgICAgICAgLy8gLmRvbmUoZnVuY3Rpb24ocmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uTWV0YWRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZygnW1dHU1RdIEdvdCByZXByZXNlbnRhdGl2ZSBjb2xsZWN0aW9uIG1ldGFkYXRhJyk7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmRpcihyZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25NZXRhZGF0YSk7XG5cbiAgICAgICAgLy8gICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gICAgIC8vIFJlbmRlciBjb2xsZWN0aW9uIHRyZWVcbiAgICAgICAgLy8gICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gICAgIC8vIFJlbW92ZSBwcmV2aW9zbHkgcmVuZGVyZWQgY29sbGVjdGlvbiB0cmVlXG4gICAgICAgIC8vICAgICAkKCcud2dzdC1wYW5lbF9fcmVwcmVzZW50YXRpdmUtY29sbGVjdGlvbi10cmVlIC5waHlsb2NhbnZhcycpLmh0bWwoJycpO1xuICAgICAgICAvLyAgICAgLy8gQXR0YWNoIGNvbGxlY3Rpb24gaWRcbiAgICAgICAgLy8gICAgICQoJy53Z3N0LXBhbmVsX19yZXByZXNlbnRhdGl2ZS1jb2xsZWN0aW9uLXRyZWUgLnBoeWxvY2FudmFzJykuYXR0cignaWQnLCAncGh5bG9jYW52YXNfJyArIGNvbGxlY3Rpb25JZCk7XG4gICAgICAgIC8vICAgICAvLyBJbml0IGNvbGxlY3Rpb24gdHJlZVxuICAgICAgICAvLyAgICAgV0dTVC5jb2xsZWN0aW9uLnJlcHJlc2VudGF0aXZlLnRyZWUuY2FudmFzID0gbmV3IFBoeWxvQ2FudmFzLlRyZWUoJCgnW2RhdGEtcGFuZWwtbmFtZT1cInJlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWVcIl0gLnBoeWxvY2FudmFzJylbMF0pO1xuICAgICAgICAvLyAgICAgLy8gUmVuZGVyIGNvbGxlY3Rpb24gdHJlZVxuICAgICAgICAvLyAgICAgLy9yZW5kZXJDb2xsZWN0aW9uVHJlZShjb2xsZWN0aW9uSWQpO1xuXG4gICAgICAgIC8vICAgICBXR1NULmNvbGxlY3Rpb24ucmVwcmVzZW50YXRpdmUudHJlZS5jYW52YXMubG9hZCgnL2RhdGEvcmVmZXJlbmNlX3RyZWUubndrJyk7XG4gICAgICAgIC8vICAgICBXR1NULmNvbGxlY3Rpb24ucmVwcmVzZW50YXRpdmUudHJlZS5jYW52YXMudHJlZVR5cGUgPSAncmVjdGFuZ3VsYXInO1xuICAgICAgICAvLyAgICAgLy9XR1NULmNvbGxlY3Rpb24ucmVwcmVzZW50YXRpdmUudHJlZS5zaG93TGFiZWxzID0gZmFsc2U7XG4gICAgICAgIC8vICAgICBXR1NULmNvbGxlY3Rpb24ucmVwcmVzZW50YXRpdmUudHJlZS5jYW52YXMuYmFzZU5vZGVTaXplID0gMC41O1xuICAgICAgICAvLyAgICAgV0dTVC5jb2xsZWN0aW9uLnJlcHJlc2VudGF0aXZlLnRyZWUuY2FudmFzLnNldFRleHRTaXplKDI0KTtcbiAgICAgICAgLy8gICAgIFdHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmNhbnZhcy5zZWxlY3RlZE5vZGVTaXplSW5jcmVhc2UgPSAwLjU7XG4gICAgICAgIC8vICAgICBXR1NULmNvbGxlY3Rpb24ucmVwcmVzZW50YXRpdmUudHJlZS5jYW52YXMuc2VsZWN0ZWRDb2xvciA9ICcjMDA1OURFJztcbiAgICAgICAgLy8gICAgIFdHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmNhbnZhcy5yaWdodENsaWNrWm9vbSA9IHRydWU7XG4gICAgICAgIC8vICAgICAvL1dHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmNhbnZhcy5vbnNlbGVjdGVkID0gc2hvd1JlcHJlc2VudGF0aXZlVHJlZU5vZGVzT25NYXA7XG5cbiAgICAgICAgLy8gICAgIGVuZFBhbmVsTG9hZGluZ0luZGljYXRvcigncmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZScpO1xuICAgICAgICAvLyAgICAgc2hvd1BhbmVsQm9keUNvbnRlbnQoJ3JlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUnKTtcbiAgICAgICAgLy8gICAgIHNob3dQYW5lbCgncmVwcmVzZW50YXRpdmVDb2xsZWN0aW9uVHJlZScpO1xuICAgICAgICAvLyB9KVxuICAgICAgICAvLyAuZmFpbChmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoJ+KclyBbV0dTVF1bRXJyb3JdIEZhaWxlZCB0byBnZXQgcmVwcmVzZW50YXRpdmUgY29sbGVjdGlvbiBtZXRhZGF0YScpO1xuICAgICAgICAvLyAgICAgY29uc29sZS5lcnJvcih0ZXh0U3RhdHVzKTtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JUaHJvd24pO1xuICAgICAgICAvLyAgICAgY29uc29sZS5lcnJvcihqcVhIUik7XG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgICAgICAvL1dHU1QuY29sbGVjdGlvbi5yZXByZXNlbnRhdGl2ZS50cmVlLmRhdGEgPSBkYXRhLmNvbGxlY3Rpb24udHJlZTtcbiAgICAgICAgICAgIC8vV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0uYXNzZW1ibGllcyA9IGRhdGEuY29sbGVjdGlvbi5hc3NlbWJsaWVzO1xuXG4gICAgICAgICAgICAvLyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAvLyAvLyBSZW5kZXIgY29sbGVjdGlvbiB0cmVlXG4gICAgICAgICAgICAvLyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAvLyAvLyBSZW1vdmUgcHJldmlvc2x5IHJlbmRlcmVkIGNvbGxlY3Rpb24gdHJlZVxuICAgICAgICAgICAgLy8gJCgnLndnc3QtcGFuZWxfX2NvbGxlY3Rpb24tdHJlZSAucGh5bG9jYW52YXMnKS5odG1sKCcnKTtcbiAgICAgICAgICAgIC8vIC8vIEF0dGFjaCBjb2xsZWN0aW9uIGlkXG4gICAgICAgICAgICAvLyAkKCcud2dzdC1wYW5lbF9fY29sbGVjdGlvbi10cmVlIC5waHlsb2NhbnZhcycpLmF0dHIoJ2lkJywgJ3BoeWxvY2FudmFzXycgKyBjb2xsZWN0aW9uSWQpO1xuICAgICAgICAgICAgLy8gLy8gSW5pdCBjb2xsZWN0aW9uIHRyZWVcbiAgICAgICAgICAgIC8vIFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWUuY2FudmFzID0gbmV3IFBoeWxvQ2FudmFzLlRyZWUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BoeWxvY2FudmFzXycgKyBjb2xsZWN0aW9uSWQpKTtcbiAgICAgICAgICAgIC8vIC8vIFJlbmRlciBjb2xsZWN0aW9uIHRyZWVcbiAgICAgICAgICAgIC8vIHJlbmRlckNvbGxlY3Rpb25UcmVlKGNvbGxlY3Rpb25JZCk7XG5cbiAgICAgICAgICAgIC8vIGVuZFBhbmVsTG9hZGluZ0luZGljYXRvcignY29sbGVjdGlvblRyZWUnKTtcbiAgICAgICAgICAgIC8vIC8vc2hvd1BhbmVsQm9keUNvbnRlbnQoJ2NvbGxlY3Rpb25UcmVlJyk7XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBMb2FkIHJlcHJlc2VudGF0aXZlIGNvbGxlY3Rpb24gdHJlZVxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIEFBQVxuXG5cbiAgICAgICAgLy8gV0dTVC5yZXByZXNlbnRhdGl2ZVRyZWUudHJlZS5sb2FkKCcvZGF0YS9yZWZlcmVuY2VfdHJlZS5ud2snKTtcbiAgICAgICAgLy8gV0dTVC5yZXByZXNlbnRhdGl2ZVRyZWUudHJlZS50cmVlVHlwZSA9ICdyZWN0YW5ndWxhcic7XG4gICAgICAgIC8vIC8vV0dTVC5yZXByZXNlbnRhdGl2ZVRyZWUudHJlZS5zaG93TGFiZWxzID0gZmFsc2U7XG4gICAgICAgIC8vIFdHU1QucmVwcmVzZW50YXRpdmVUcmVlLnRyZWUuYmFzZU5vZGVTaXplID0gMC41O1xuICAgICAgICAvLyBXR1NULnJlcHJlc2VudGF0aXZlVHJlZS50cmVlLnNldFRleHRTaXplKDI0KTtcbiAgICAgICAgLy8gV0dTVC5yZXByZXNlbnRhdGl2ZVRyZWUudHJlZS5zZWxlY3RlZE5vZGVTaXplSW5jcmVhc2UgPSAwLjU7XG4gICAgICAgIC8vIFdHU1QucmVwcmVzZW50YXRpdmVUcmVlLnRyZWUuc2VsZWN0ZWRDb2xvciA9ICcjMDA1OURFJztcbiAgICAgICAgLy8gV0dTVC5yZXByZXNlbnRhdGl2ZVRyZWUudHJlZS5yaWdodENsaWNrWm9vbSA9IHRydWU7XG4gICAgICAgIC8vIFdHU1QucmVwcmVzZW50YXRpdmVUcmVlLnRyZWUub25zZWxlY3RlZCA9IHNob3dSZXByZXNlbnRhdGl2ZVRyZWVOb2Rlc09uTWFwO1xuXG4gICAgICAgIC8vIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAvLyAvLyBMb2FkIHJlZmVyZW5jZSB0cmVlIG1ldGFkYXRhXG4gICAgICAgIC8vIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAvLyBjb25zb2xlLmxvZygnW1dHU1RdIEdldHRpbmcgcmVwcmVzZW50YXRpdmUgdHJlZSBtZXRhZGF0YScpO1xuXG4gICAgICAgIC8vICQuYWpheCh7XG4gICAgICAgIC8vICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgIC8vICAgICB1cmw6ICcvcmVwcmVzZW50YXRpdmUtdHJlZS1tZXRhZGF0YS8nLFxuICAgICAgICAvLyAgICAgZGF0YXR5cGU6ICdqc29uJywgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvOTE1NTIxN1xuICAgICAgICAvLyAgICAgZGF0YToge31cbiAgICAgICAgLy8gfSlcbiAgICAgICAgLy8gLmRvbmUoZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCdbV0dTVF0gR290IHJlcHJlc2VudGF0aXZlIHRyZWUgbWV0YWRhdGEnKTtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuZGlyKGRhdGEudmFsdWUpO1xuXG4gICAgICAgIC8vICAgICAvLyBDcmVhdGUgcmVwcmVzZW50YXRpdmUgdHJlZSBtYXJrZXJzXG4gICAgICAgIC8vICAgICB2YXIgbWV0YWRhdGFDb3VudGVyID0gZGF0YS52YWx1ZS5tZXRhZGF0YS5sZW5ndGgsXG4gICAgICAgIC8vICAgICAgICAgbWV0YWRhdGEgPSBkYXRhLnZhbHVlLm1ldGFkYXRhLFxuICAgICAgICAvLyAgICAgICAgIGFjY2Vzc2lvbixcbiAgICAgICAgLy8gICAgICAgICBtYXJrZXI7XG5cbiAgICAgICAgLy8gICAgIGZvciAoOyBtZXRhZGF0YUNvdW50ZXIgIT09IDA7KSB7XG4gICAgICAgIC8vICAgICAgICAgLy8gRGVjcmVtZW50IGNvdW50ZXJcbiAgICAgICAgLy8gICAgICAgICBtZXRhZGF0YUNvdW50ZXIgPSBtZXRhZGF0YUNvdW50ZXIgLSAxO1xuXG4gICAgICAgIC8vICAgICAgICAgLy9jb25zb2xlLmxvZygnW1dHU1RdIFJlcHJlc2VudGF0aXZlIHRyZWUgbWV0YWRhdGEgZm9yICcgKyBtZXRhZGF0YVttZXRhZGF0YUNvdW50ZXJdICsgJzonKTtcbiAgICAgICAgLy8gICAgICAgICAvL2NvbnNvbGUubG9nKG1ldGFkYXRhW21ldGFkYXRhQ291bnRlcl0pO1xuXG4gICAgICAgIC8vICAgICAgICAgYWNjZXNzaW9uID0gbWV0YWRhdGFbbWV0YWRhdGFDb3VudGVyXS5hY2Nlc3Npb247XG5cbiAgICAgICAgLy8gICAgICAgICAvLyBTZXQgcmVwcmVzZW50YXRpdmUgdHJlZSBtZXRhZGF0YVxuICAgICAgICAvLyAgICAgICAgIFdHU1QucmVwcmVzZW50YXRpdmVUcmVlW2FjY2Vzc2lvbl0gPSBtZXRhZGF0YVttZXRhZGF0YUNvdW50ZXJdO1xuICAgICAgICAvLyAgICAgfSAvLyBmb3JcbiAgICAgICAgLy8gfSlcbiAgICAgICAgLy8gLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZygnW1dHU1RdW0VSUk9SXSBGYWlsZWQgdG8gZ2V0IHJlcHJlc2VudGF0aXZlIHRyZWUgbWV0YWRhdGEnKTtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuZXJyb3IodGV4dFN0YXR1cyk7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmVycm9yKGVycm9yVGhyb3duKTtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuZXJyb3IoanFYSFIpO1xuICAgICAgICAvLyB9KTtcblxuXG4gICAgfTtcblxuICAgICQoJy53Z3N0LW5hdmlnYXRpb24taXRlbScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcblxuICAgICQoJy53Z3N0LW5hdmlnYXRpb24taXRlbV9fbWFwJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGFjdGl2ZUZ1bGxzY3JlZW5FbGVtZW50ID0gJCgnLndnc3QtZnVsbHNjcmVlbi0tYWN0aXZlJyk7XG5cbiAgICAgICAgaWYgKGFjdGl2ZUZ1bGxzY3JlZW5FbGVtZW50LmF0dHIoJ2RhdGEtZnVsbHNjcmVlbi1uYW1lJykgPT09ICdtYXAnKSB7XG4gICAgICAgICAgICBicmluZ0Z1bGxzY3JlZW5Ub1BhbmVsKGZhbHNlKTsgXG4gICAgICAgIH1cblxuICAgICAgICBvcGVuUGFuZWwoJ21hcCcpO1xuXG4gICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIoV0dTVC5nZW8ubWFwLmNhbnZhcywgJ3Jlc2l6ZScpO1xuICAgIH0pO1xuXG4gICAgJCgnLndnc3QtbmF2aWdhdGlvbi1pdGVtX19yZXByZXNlbnRhdGl2ZS10cmVlJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgb3BlblJlcHJlc2VudGF0aXZlQ29sbGVjdGlvblRyZWUoKTtcbiAgICB9KTtcblxuICAgICQoJy53Z3N0LW5hdmlnYXRpb24taXRlbV9fY29sbGVjdGlvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmIChpc05hdkl0ZW1FbmFibGVkKCdjb2xsZWN0aW9uJykpIHtcbiAgICAgICAgICAgIHZhciBhY3RpdmVGdWxsc2NyZWVuRWxlbWVudCA9ICQoJy53Z3N0LWZ1bGxzY3JlZW4tLWFjdGl2ZScpO1xuXG4gICAgICAgICAgICBpZiAoYWN0aXZlRnVsbHNjcmVlbkVsZW1lbnQuYXR0cignZGF0YS1mdWxsc2NyZWVuLW5hbWUnKSA9PT0gJ2NvbGxlY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYnJpbmdGdWxsc2NyZWVuVG9QYW5lbChmYWxzZSk7IFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcGVuUGFuZWwoJ2NvbGxlY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG5nb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csIFwicmVzaXplXCIsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBtYXAgPSBXR1NULmdlby5tYXAuY2FudmFzO1xuIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7XG4gZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXAsIFwicmVzaXplXCIpO1xuIG1hcC5zZXRDZW50ZXIoY2VudGVyKTsgXG59KTtcblxuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIG1heGltaXplQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7fSBjb2xsZWN0aW9uSWRcbiAgICAgKiBAcmV0dXJuIFxuICAgICAqL1xuICAgIHZhciBtYXhpbWl6ZUNvbGxlY3Rpb24gPSBmdW5jdGlvbihjb2xsZWN0aW9uSWQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tXR1NUXSBNYXhpbWl6aW5nIGNvbGxlY3Rpb24gJyArIGNvbGxlY3Rpb25JZCk7XG5cbiAgICAgICAgLy8gUHV0IG1hcCBpbnRvIHBhbmVsXG4gICAgICAgIGJyaW5nRnVsbHNjcmVlblRvUGFuZWwoJ21hcCcpO1xuXG4gICAgICAgIC8vIERlc3Ryb3kgYWxsIFR3aXR0ZXIgQm9vdHN0cmFwIFRvb2x0aXBzXG4gICAgICAgICQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS50b29sdGlwKCdkZXN0cm95Jyk7XG5cbiAgICAgICAgYnJpbmdQYW5lbFRvRnVsbHNjcmVlbignY29sbGVjdGlvbl8nICsgY29sbGVjdGlvbklkLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy8gVHJpZ2dlciBUd2l0dGVyIEJvb3RzdHJhcCB0b29sdGlwXG4gICAgICAgICAgICAkKCdbZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdJykudG9vbHRpcCgpO1xuICAgICAgICAgICAgLy8gT3BlbiBNYXAgcGFuZWxcbiAgICAgICAgICAgIG9wZW5QYW5lbCgnbWFwJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIoV0dTVC5nZW8ubWFwLmNhbnZhcywgJ3Jlc2l6ZScpO1xuXG4gICAgICAgIC8vICQoJy53Z3N0LWZ1bGxzY3JlZW5fX2NvbGxlY3Rpb24nKVxuICAgICAgICAvLyAuYXBwZW5kKCQoJy5jb2xsZWN0aW9uLWRldGFpbHMnKS5jbG9uZSh0cnVlKSlcbiAgICAgICAgLy8gLmFkZENsYXNzKCd3Z3N0LWZ1bGxzY3JlZW4tLWFjdGl2ZScpXG4gICAgICAgIC8vIC5hZGRDbGFzcygnd2dzdC1mdWxsc2NyZWVuLS12aXNpYmxlJyk7XG5cbiAgICAgICAgLy8gZGVhY3RpdmF0ZVBhbmVsKCdjb2xsZWN0aW9uJyk7XG5cbiAgICAgICAgLy9nb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKFdHU1QuZ2VvLm1hcC5jYW52YXMsICdyZXNpemUnKTtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgICAgIC8vIHZhciBhY3RpdmVGdWxsc2NyZWVuRWxlbWVudCA9ICQoJy53Z3N0LWZ1bGxzY3JlZW4tLWFjdGl2ZScpLFxuICAgICAgICAvLyAgICAgZnVsbHNjcmVlbnROYW1lID0gYWN0aXZlRnVsbHNjcmVlbkVsZW1lbnQuYXR0cignZGF0YS1mdWxsc2NyZWVuLW5hbWUnKSxcbiAgICAgICAgLy8gICAgIGZ1bGxzY3JlZW5Db250ZW50RnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICAgICAgLy8gJCgnLndnc3QtcGFuZWxbZGF0YS1wYW5lbC1uYW1lPVwiJyArIGZ1bGxzY3JlZW5OYW1lICsgJ1wiXSAud2dzdC1wYW5lbC1ib2R5LWNvbnRlbnQnKVxuICAgICAgICAvLyAgICAgLmh0bWwoJycpXG4gICAgICAgIC8vICAgICAuYXBwZW5kKFdHU1QuZ2VvLm1hcC5jYW52YXMuZ2V0RGl2KCkpO1xuXG4gICAgICAgIC8vLmh0bWwoYWN0aXZlRnVsbHNjcmVlbkVsZW1lbnQuaHRtbCgpKTtcblxuICAgICAgICAvLyBhY3RpdmVGdWxsc2NyZWVuRWxlbWVudFxuICAgICAgICAvLyAgICAgLnJlbW92ZUNsYXNzKCd3Z3N0LWZ1bGxzY3JlZW4tLWFjdGl2ZScpXG4gICAgICAgIC8vICAgICAucmVtb3ZlQ2xhc3MoJ3dnc3QtZnVsbHNjcmVlbi0tdmlzaWJsZScpO1xuXG4gICAgICAgIC8vJCgnLndnc3QtZnVsbHNjcmVlbi0tYWN0aXZlJykucmVtb3ZlQ2xhc3MoJy53Z3N0LWZ1bGxzY3JlZW4tLWFjdGl2ZScpO1xuXG4gICAgICAgIC8vIGVuZFBhbmVsTG9hZGluZ0luZGljYXRvcihmdWxsc2NyZWVuTmFtZSk7XG4gICAgICAgIC8vIHNob3dQYW5lbEJvZHlDb250ZW50KGZ1bGxzY3JlZW5OYW1lKTtcblxuICAgICAgICAvLyQoJy53Z3N0LWZ1bGxzY3JlZW5fX2NvbGxlY3Rpb24nKS5odG1sKCQoJy5jb2xsZWN0aW9uLWRldGFpbHMnKS5odG1sKCkpO1xuICAgICAgICBcbiAgICAgICAgLy8kKCcud2dzdC1mdWxsc2NyZWVuX19jb2xsZWN0aW9uJykuYXBwZW5kKCQoJy5jb2xsZWN0aW9uLWRldGFpbHMnKS5jbG9uZSh0cnVlKSkuYWRkQ2xhc3MoJ3dnc3QtZnVsbHNjcmVlbi0tYWN0aXZlJykuYWRkQ2xhc3MoJ3dnc3QtZnVsbHNjcmVlbi0tdmlzaWJsZScpO1xuICAgICAgICAvLyAkKCcud2dzdC1mdWxsc2NyZWVuX19jb2xsZWN0aW9uJylcbiAgICAgICAgLy8gICAgIC5odG1sKCQoJzxkaXYvPicpLmFwcGVuZCgkKCcuY29sbGVjdGlvbi1kZXRhaWxzJykpLmh0bWwoKSlcbiAgICAgICAgLy8gICAgIC5hZGRDbGFzcygnd2dzdC1mdWxsc2NyZWVuLS1hY3RpdmUnKVxuICAgICAgICAvLyAgICAgLmFkZENsYXNzKCd3Z3N0LWZ1bGxzY3JlZW4tLXZpc2libGUnKTtcblxuICAgICAgICAvLyBhY3RpdmF0ZVBhbmVsKCdtYXAnKTtcbiAgICAgICAgLy8gc2hvd1BhbmVsKCdtYXAnKTtcbiAgICAgICAgLy8gYnJpbmdQYW5lbFRvVG9wKCdtYXAnKTtcblxuICAgICAgICAvL0VFRVxuICAgICAgICAvLyBQdXQgY29sbGVjdGlvbiBjb250ZW50IGludG8gYmFja2dyb3VuZFxuXG4gICAgfTtcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIFBhbmVsIGNvbnRyb2wgYnV0dG9uc1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGJyaW5nRnVsbHNjcmVlblRvUGFuZWxcbiAgICAgKiBAcGFyYW0ge30gYW5kU2hvd1BhbmVsXG4gICAgICogQHBhcmFtIHt9IGNhbGxiYWNrXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgYnJpbmdGdWxsc2NyZWVuVG9QYW5lbCA9IGZ1bmN0aW9uKGFuZFNob3dQYW5lbCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGFjdGl2ZUZ1bGxzY3JlZW5FbGVtZW50ID0gJCgnLndnc3QtZnVsbHNjcmVlbi0tYWN0aXZlJyksXG4gICAgICAgICAgICBmdWxsc2NyZWVuTmFtZSA9IGFjdGl2ZUZ1bGxzY3JlZW5FbGVtZW50LmF0dHIoJ2RhdGEtZnVsbHNjcmVlbi1uYW1lJyk7XG5cbiAgICAgICAgYWN0aXZlRnVsbHNjcmVlbkVsZW1lbnRcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnd2dzdC1mdWxsc2NyZWVuLS1hY3RpdmUnKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd3Z3N0LWZ1bGxzY3JlZW4tLXZpc2libGUnKTtcblxuICAgICAgICBpZiAodHlwZW9mIGZ1bGxzY3JlZW5OYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKGFuZFNob3dQYW5lbCkge1xuICAgICAgICAgICAgICAgIHNob3dQYW5lbEJvZHlDb250ZW50KGZ1bGxzY3JlZW5OYW1lKTtcbiAgICAgICAgICAgICAgICBzaG93UGFuZWwoZnVsbHNjcmVlbk5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZ1bGxzY3JlZW5OYW1lID09PSAnbWFwJykge1xuICAgICAgICAgICAgJCgnLndnc3QtcGFuZWxbZGF0YS1wYW5lbC1uYW1lPVwiJyArIGZ1bGxzY3JlZW5OYW1lICsgJ1wiXSAud2dzdC1wYW5lbC1ib2R5LWNvbnRlbnQnKVxuICAgICAgICAgICAgICAgIC5odG1sKCcnKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoV0dTVC5nZW8ubWFwLmNhbnZhcy5nZXREaXYoKSk7XG5cbiAgICAgICAgICAgIC8vZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihXR1NULmdlby5tYXAuY2FudmFzLCAncmVzaXplJyk7XG4gICAgICAgIH0gLy8gaWZcblxuICAgICAgICAvLyBSZW1vdmUgZnVsbHNjcmVlbiBjb250ZW50XG4gICAgICAgIGFjdGl2ZUZ1bGxzY3JlZW5FbGVtZW50Lmh0bWwoJycpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGJyaW5nUGFuZWxUb0Z1bGxzY3JlZW5cbiAgICAgKiBAcGFyYW0ge30gcGFuZWxJZFxuICAgICAqIEBwYXJhbSB7fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIGJyaW5nUGFuZWxUb0Z1bGxzY3JlZW4gPSBmdW5jdGlvbihwYW5lbElkLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcGFuZWwgPSAkKCdbZGF0YS1wYW5lbC1pZD1cIicgKyBwYW5lbElkICsgJ1wiXScpLFxuICAgICAgICAgICAgcGFuZWxOYW1lID0gcGFuZWwuYXR0cignZGF0YS1wYW5lbC1uYW1lJyk7XG5cbiAgICAgICAgLy8kKCcud2dzdC1mdWxsc2NyZWVuX18nICsgcGFuZWxOYW1lKVxuICAgICAgICB2YXIgZnVsbHNjcmVlbiA9ICQoJ1tkYXRhLWZ1bGxzY3JlZW4tbmFtZT1cIicgKyBwYW5lbE5hbWUgKyAnXCJdJylcbiAgICAgICAgICAgIC5hZGRDbGFzcygnd2dzdC1mdWxsc2NyZWVuLS1hY3RpdmUnKVxuICAgICAgICAgICAgLmFkZENsYXNzKCd3Z3N0LWZ1bGxzY3JlZW4tLXZpc2libGUnKTtcblxuICAgICAgICBpZiAocGFuZWxOYW1lID09PSAnY29sbGVjdGlvbicpIHtcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4uYXBwZW5kKCQoJy5jb2xsZWN0aW9uLWRldGFpbHMnKS5jbG9uZSh0cnVlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWFjdGl2YXRlUGFuZWwocGFuZWxOYW1lKTsgLy8gb3IgY2xvc2VQYW5lbCgpID9cblxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBicmluZ01hcFBhbmVsVG9GdWxsc2NyZWVuXG4gICAgICogQHBhcmFtIHt9IHBhbmVsTmFtZVxuICAgICAqIEBwYXJhbSB7fSBwYW5lbElkXG4gICAgICogQHJldHVybiBcbiAgICAgKi9cbiAgICB2YXIgYnJpbmdNYXBQYW5lbFRvRnVsbHNjcmVlbiA9IGZ1bmN0aW9uKHBhbmVsTmFtZSwgcGFuZWxJZCkge1xuICAgICAgICBpZiAoISBpc0Z1bGxzY3JlZW5BY3RpdmUocGFuZWxOYW1lKSkge1xuICAgICAgICAgICAgYnJpbmdGdWxsc2NyZWVuVG9QYW5lbChmYWxzZSk7XG5cbiAgICAgICAgICAgIGJyaW5nUGFuZWxUb0Z1bGxzY3JlZW4ocGFuZWxJZCwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkKCdbZGF0YS1mdWxsc2NyZWVuLW5hbWU9XCInICsgcGFuZWxOYW1lICsgJ1wiXScpXG4gICAgICAgICAgICAgICAgICAgIC5odG1sKCcnKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFdHU1QuZ2VvLm1hcC5jYW52YXMuZ2V0RGl2KCkpO1xuXG4gICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihXR1NULmdlby5tYXAuY2FudmFzLCAncmVzaXplJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBcbiAgICB9O1xuXG4gICAgJCgnYm9keScpLm9uKCdjbGljaycsICcud2dzdC1wYW5lbC1jb250cm9sLWJ1dHRvbl9fbWF4aW1pemUnLCBmdW5jdGlvbigpe1xuICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnd2dzdC1wYW5lbC1jb250cm9sLWJ1dHRvbi0tYWN0aXZlJykpIHtcbiAgICAgICAgICAgIHZhciBwYW5lbCA9ICQodGhpcykuY2xvc2VzdCgnLndnc3QtcGFuZWwnKSxcbiAgICAgICAgICAgICAgICBwYW5lbE5hbWUgPSBwYW5lbC5hdHRyKCdkYXRhLXBhbmVsLW5hbWUnKSxcbiAgICAgICAgICAgICAgICBwYW5lbElkID0gcGFuZWwuYXR0cignZGF0YS1wYW5lbC1pZCcpO1xuXG4gICAgICAgICAgICBpZiAocGFuZWxOYW1lID09PSAnY29sbGVjdGlvbicpIHtcblxuICAgICAgICAgICAgICAgIC8vIERlc3Ryb3kgVHdpdHRlciBCb290c3RyYXAgdG9vbHRpcFxuICAgICAgICAgICAgICAgICQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS50b29sdGlwKCdkZXN0cm95Jyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYnJpbmdGdWxsc2NyZWVuVG9QYW5lbChmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICBicmluZ1BhbmVsVG9GdWxsc2NyZWVuKHBhbmVsSWQsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICQoJ1tkYXRhLWZ1bGxzY3JlZW4tbmFtZT1cIicgKyBwYW5lbE5hbWUgKyAnXCJdJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5odG1sKCcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCcuY29sbGVjdGlvbi1kZXRhaWxzJykuY2xvbmUodHJ1ZSkpXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciBUd2l0dGVyIEJvb3RzdHJhcCB0b29sdGlwXG4gICAgICAgICAgICAgICAgICAgICQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS50b29sdGlwKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhbmVsTmFtZSA9PT0gJ21hcCcpIHtcblxuICAgICAgICAgICAgICAgIGJyaW5nTWFwUGFuZWxUb0Z1bGxzY3JlZW4ocGFuZWxOYW1lLCBwYW5lbElkKTtcblxuICAgICAgICAgICAgICAgIC8vIGJyaW5nRnVsbHNjcmVlblRvUGFuZWwoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgLy8gYnJpbmdQYW5lbFRvRnVsbHNjcmVlbihwYW5lbElkLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vICAgICAkKCdbZGF0YS1mdWxsc2NyZWVuLW5hbWU9XCInICsgcGFuZWxOYW1lICsgJ1wiXScpXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAuaHRtbCgnJylcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIC5hcHBlbmQoV0dTVC5nZW8ubWFwLmNhbnZhcy5nZXREaXYoKSk7XG5cbiAgICAgICAgICAgICAgICAvLyAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihXR1NULmdlby5tYXAuY2FudmFzLCAncmVzaXplJyk7XG4gICAgICAgICAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFuZWxOYW1lID09PSAnY29sbGVjdGlvblRyZWUnKSB7XG5cbiAgICAgICAgICAgICAgICBicmluZ1BhbmVsVG9GdWxsc2NyZWVuKHBhbmVsTmFtZSwgZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdHJlZUh0bWxFbGVtZW50ID0gJCgnLndnc3QtcGFuZWxfX2NvbGxlY3Rpb24tdHJlZScpLmZpbmQoJy53Z3N0LXRyZWUtY29udGVudCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvblRyZWVGdWxsc2NyZWVuID0gJCgnLndnc3QtZnVsbHNjcmVlbl9fY29sbGVjdGlvbi10cmVlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9jb2xsZWN0aW9uVHJlZUZ1bGxzY3JlZW4uYXBwZW5kKHRyZWVIdG1sRWxlbWVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uVHJlZUZ1bGxzY3JlZW4uYXBwZW5kKHRyZWVIdG1sRWxlbWVudC5jbG9uZSh0cnVlKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb25JZCA9ICQoJy53Z3N0LXBhbmVsX19jb2xsZWN0aW9uLXRyZWUnKS5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAkKCcud2dzdC1wYW5lbF9fY29sbGVjdGlvbi10cmVlJykuaHRtbCgnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coY29sbGVjdGlvbklkKTtcblxuICAgICAgICAgICAgICAgICAgICBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS50cmVlLmNhbnZhcy5kcmF3KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gLy8gaWZcbiAgICB9KTtcblxuICAgICQoJ2JvZHknKS5vbignY2xpY2snLCAnLndnc3QtcGFuZWwtY29udHJvbC1idXR0b25fX2Nsb3NlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ3dnc3QtcGFuZWwtY29udHJvbC1idXR0b24tLWFjdGl2ZScpKSB7XG4gICAgICAgICAgICB2YXIgcGFuZWwgPSAkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJyksXG4gICAgICAgICAgICAgICAgcGFuZWxOYW1lID0gcGFuZWwuYXR0cignZGF0YS1wYW5lbC1uYW1lJyk7XG5cbiAgICAgICAgICAgIGRlYWN0aXZhdGVQYW5lbChwYW5lbE5hbWUpO1xuXG4gICAgICAgICAgICBpZiAocGFuZWxOYW1lID09PSAnY29sbGVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAvL3ZhciBjb2xsZWN0aW9uSWQgPSBwYW5lbC5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKTtcbiAgICAgICAgICAgICAgICAvL2Nsb3NlQ29sbGVjdGlvbihjb2xsZWN0aW9uSWQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYW5lbE5hbWUgPT09ICdyZXByZXNlbnRhdGl2ZUNvbGxlY3Rpb25UcmVlJykge1xuICAgICAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uSWQgPSBwYW5lbC5hdHRyKCdkYXRhLWNvbGxlY3Rpb24taWQnKTtcbiAgICAgICAgICAgICAgICBkZXNlbGVjdEFsbFRyZWVOb2Rlcyhjb2xsZWN0aW9uSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IC8vIGlmXG4gICAgfSk7XG5cbiAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy53Z3N0LXBhbmVsLWNvbnRyb2wtYnV0dG9uX19vcGFjaXR5JywgZnVuY3Rpb24oKXtcbiAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ3dnc3QtcGFuZWwtY29udHJvbC1idXR0b24tLWFjdGl2ZScpKSB7XG4gICAgICAgICAgICAvLyBUb2dnbGUgb3BhY2l0eVxuICAgICAgICAgICAgdmFyIHBhbmVsID0gJCh0aGlzKS5jbG9zZXN0KCcud2dzdC1wYW5lbCcpO1xuICAgICAgICAgICAgaWYgKHBhbmVsLmNzcygnb3BhY2l0eScpICE9PSAnMScpIHtcbiAgICAgICAgICAgICAgICBwYW5lbC5jc3MoJ29wYWNpdHknLCAnMScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYW5lbC5jc3MoJ29wYWNpdHknLCAnMC44NScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IC8vIGlmXG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgdHJlZU1hbmlwdWxhdGlvbkhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge30gY2FudmFzRWxlbWVudFxuICAgICAqIEByZXR1cm4gXG4gICAgICovXG4gICAgdmFyIHRyZWVNYW5pcHVsYXRpb25IYW5kbGVyID0gZnVuY3Rpb24oY2FudmFzRWxlbWVudCkge1xuICAgICAgICB2YXIgY2FudmFzID0gY2FudmFzRWxlbWVudCxcbiAgICAgICAgICAgIGNhbnZhc09mZnNldCA9IGNhbnZhcy5vZmZzZXQoKSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25JZCA9IGNhbnZhcy5jbG9zZXN0KCcud2dzdC1wYW5lbCcpLmF0dHIoJ2RhdGEtY29sbGVjdGlvbi1pZCcpLFxuICAgICAgICAgICAgdHJlZSA9IFdHU1QuY29sbGVjdGlvbltjb2xsZWN0aW9uSWRdLnRyZWVbJ0NPUkVfVFJFRV9SRVNVTFQnXS5jYW52YXMsXG4gICAgICAgICAgICBsZWF2ZXMgPSB0cmVlLmxlYXZlcyxcbiAgICAgICAgICAgIC8vbGVhdmVzV2l0aGluQ2FudmFzVmlld3BvcnQgPSBbXSxcbiAgICAgICAgICAgIGNhbnZhc1RvcExlZnQgPSB7XG4gICAgICAgICAgICAgICAgdG9wOiB0cmVlLnRyYW5zbGF0ZUNsaWNrWShjYW52YXNPZmZzZXQudG9wKSxcbiAgICAgICAgICAgICAgICBsZWZ0OiB0cmVlLnRyYW5zbGF0ZUNsaWNrWChjYW52YXNPZmZzZXQubGVmdClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW52YXNCb3R0b21SaWdodCA9IHtcbiAgICAgICAgICAgICAgICBib3R0b206IHRyZWUudHJhbnNsYXRlQ2xpY2tZKGNhbnZhc09mZnNldC50b3AgKyBjYW52YXMuaGVpZ2h0KCkpLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiB0cmVlLnRyYW5zbGF0ZUNsaWNrWChjYW52YXNPZmZzZXQubGVmdCArIGNhbnZhcy53aWR0aCgpKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vdXBkYXRlZEFzc2VtYmx5TGlzdEh0bWwgPSAkKCc8ZGl2IC8+JyksXG4gICAgICAgICAgICBjb2xsZWN0aW9uQXNzZW1ibHlMaXN0ID0gJCgnLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdCcpLFxuICAgICAgICAgICAgY29sbGVjdGlvbkFzc2VtYmx5TGlzdEZ1bGwgPSAkKCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0LWZ1bGwnKTtcblxuICAgICAgICB2YXIgZmlsdGVyZWRBc3NlbWJsaWVzSHRtbCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgICAgICAgIGFzc2VtYmx5TGlzdEl0ZW1IdG1sLFxuICAgICAgICAgICAgdmlzaWJsZUFzc2VtYmx5TGlzdEl0ZW1Db3VudGVyID0gMCxcbiAgICAgICAgICAgIGxlYWYsXG4gICAgICAgICAgICBsZWFmQ291bnRlciA9IDA7XG5cbiAgICAgICAgZm9yICg7IGxlYWZDb3VudGVyIDwgbGVhdmVzLmxlbmd0aDspIHtcbiAgICAgICAgICAgIGxlYWYgPSBsZWF2ZXNbbGVhZkNvdW50ZXJdO1xuXG4gICAgICAgICAgICBpZiAobGVhZi5jZW50ZXJ4ID49IGNhbnZhc1RvcExlZnQubGVmdCBcbiAgICAgICAgICAgICAgICAmJiBsZWFmLmNlbnRlcnggPD0gY2FudmFzQm90dG9tUmlnaHQucmlnaHRcbiAgICAgICAgICAgICAgICAmJiBsZWFmLmNlbnRlcnkgPj0gY2FudmFzVG9wTGVmdC50b3BcbiAgICAgICAgICAgICAgICAmJiBsZWFmLmNlbnRlcnkgPD0gY2FudmFzQm90dG9tUmlnaHQuYm90dG9tKSB7XG5cbiAgICAgICAgICAgICAgICAvL2xlYXZlc1dpdGhpbkNhbnZhc1ZpZXdwb3J0LnB1c2gobGVhZi5pZCk7XG5cbiAgICAgICAgICAgICAgICBhc3NlbWJseUxpc3RJdGVtSHRtbCA9IGNvbGxlY3Rpb25Bc3NlbWJseUxpc3RGdWxsLmZpbmQoJy5hc3NlbWJseS1saXN0LWl0ZW1bZGF0YS1hc3NlbWJseS1pZD1cIicgKyBsZWFmLmlkICsgJ1wiXScpWzBdO1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkQXNzZW1ibGllc0h0bWwuYXBwZW5kQ2hpbGQoYXNzZW1ibHlMaXN0SXRlbUh0bWwuY2xvbmVOb2RlKHRydWUpKTtcblxuICAgICAgICAgICAgICAgIHZpc2libGVBc3NlbWJseUxpc3RJdGVtQ291bnRlciA9IHZpc2libGVBc3NlbWJseUxpc3RJdGVtQ291bnRlciArIDE7XG4gICAgICAgICAgICB9IC8vIGlmXG5cbiAgICAgICAgICAgIGxlYWZDb3VudGVyID0gbGVhZkNvdW50ZXIgKyAxO1xuICAgICAgICB9IC8vIGZvclxuXG4gICAgICAgIC8vIFNjcm9sbGluZyBoaW50XG4gICAgICAgIGlmICh2aXNpYmxlQXNzZW1ibHlMaXN0SXRlbUNvdW50ZXIgPiA3KSB7XG4gICAgICAgICAgICAkKCcuY29sbGVjdGlvbi1hc3NlbWJseS1saXN0LW1vcmUtYXNzZW1ibGllcycpLnNob3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoJy5jb2xsZWN0aW9uLWFzc2VtYmx5LWxpc3QtbW9yZS1hc3NlbWJsaWVzJykuaGlkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIGFzc2VtYmxpZXMgZnJvbSBhc3NlbWJseSBsaXN0XG4gICAgICAgIHZhciBhc3NlbWJseUxpc3RIdG1sID0gY29sbGVjdGlvbkFzc2VtYmx5TGlzdFswXTtcbiAgICAgICAgd2hpbGUgKGFzc2VtYmx5TGlzdEh0bWwuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgYXNzZW1ibHlMaXN0SHRtbC5yZW1vdmVDaGlsZChhc3NlbWJseUxpc3RIdG1sLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXBwZW5kIG5ldyBhc3NlbWJsaWVzIHRvIGFzc2VtYmx5IGxpc3RcbiAgICAgICAgYXNzZW1ibHlMaXN0SHRtbC5hcHBlbmRDaGlsZChmaWx0ZXJlZEFzc2VtYmxpZXNIdG1sKTtcblxuICAgICAgICBjb2xsZWN0aW9uQXNzZW1ibHlMaXN0LmZpbmQoJy5hbnRpYmlvdGljW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKTtcbiAgICB9O1xuXG4gICAgJCgnLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdC12aWV3LWFsbC1hc3NlbWJsaWVzJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG4gICAgICAgIHZhciBjb2xsZWN0aW9uSWQgPSAkKHRoaXMpLmNsb3Nlc3QoJy53Z3N0LXBhbmVsJykuYXR0cignZGF0YS1jb2xsZWN0aW9uLWlkJyksXG4gICAgICAgICAgICBjb2xsZWN0aW9uQXNzZW1ibHlMaXN0ID0gJCgnLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdCcpO1xuXG4gICAgICAgIC8vIFJlZHJhdyBvcmlnaW5hbCB0cmVlIGFuZCBzZXQgb3JpZ2luYWwgem9vbVxuICAgICAgICBXR1NULmNvbGxlY3Rpb25bY29sbGVjdGlvbklkXS50cmVlLmNhbnZhcy5yZWRyYXdPcmlnaW5hbFRyZWUoKTtcbiAgICAgICAgV0dTVC5jb2xsZWN0aW9uW2NvbGxlY3Rpb25JZF0udHJlZS5jYW52YXMuc2V0Wm9vbSgtMC4wNSk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIGFzc2VtYmxpZXMgZnJvbSBhc3NlbWJseSBsaXN0XG4gICAgICAgIGNvbGxlY3Rpb25Bc3NlbWJseUxpc3QuZmluZCgnLmFzc2VtYmx5LWxpc3QtaXRlbScpLnJlbW92ZSgpO1xuICAgICAgICAvLyBBcHBlbmQgbmV3IGFzc2VtYmxpZXNcbiAgICAgICAgY29sbGVjdGlvbkFzc2VtYmx5TGlzdC5hcHBlbmQoJCgnLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdC1mdWxsIC5hc3NlbWJseS1saXN0LWl0ZW0nKS5jbG9uZSgpKTtcblxuICAgICAgICBjb2xsZWN0aW9uQXNzZW1ibHlMaXN0LmZpbmQoJy5hbnRpYmlvdGljW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKTtcblxuICAgICAgICAvLyBIaWRlIGZpbHRlciBtZXNzYWdlXG4gICAgICAgICQoJy5jb2xsZWN0aW9uLWFzc2VtYmx5LWxpc3QtYWxsLWFzc2VtYmxpZXMnKS5oaWRlKCk7XG4gICAgICAgIC8vIFNob3cgc2Nyb2xsIG1lc3NhZ2VcbiAgICAgICAgJCgnLmNvbGxlY3Rpb24tYXNzZW1ibHktbGlzdC1tb3JlLWFzc2VtYmxpZXMnKS5zaG93KCk7XG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gTGlzdGVuIHRvIFBoeWxvY2FudmFzIHRyZWUgdXNlciBtYW5pcHVsYXRpb25cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIC8vICQoJ2JvZHknKS5vbignbW91c2Vkb3duJywgJ2NhbnZhcycsIGZ1bmN0aW9uKCl7XG4gICAgLy8gICAgICQoJ2JvZHknKS5vbignbW91c2Vtb3ZlJywgJ2NhbnZhcycsIGZ1bmN0aW9uKCl7XG4gICAgLy8gICAgICAgICB0cmVlTWFuaXB1bGF0aW9uSGFuZGxlcih0aGlzKTsgICAgICAgICAgICBcbiAgICAvLyAgICAgfSk7XG4gICAgLy8gICAgICQoJ2JvZHknKS5vbignbW91c2V1cCcsICdjYW52YXMnLCBmdW5jdGlvbigpe1xuICAgIC8vICAgICAgICAgJCgnYm9keScpLm9mZignbW91c2Vtb3ZlJywgJ2NhbnZhcycpO1xuICAgIC8vICAgICB9KTtcbiAgICAvLyB9KTtcblxuICAgIC8vICQoJ2JvZHknKS5vbignbW91c2V3aGVlbCBtb3VzZWRvd24nLCAnY2FudmFzJywgZnVuY3Rpb24oKXtcbiAgICAvLyAgICAgdHJlZU1hbmlwdWxhdGlvbkhhbmRsZXIodGhpcyk7XG4gICAgLy8gfSk7XG5cbiAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy50cmVlLWNvbnRyb2xzLW1hdGNoLWFzc2VtYmx5LWxpc3QnLCBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgJGNhbnZhcyA9ICQodGhpcykuY2xvc2VzdCgnLndnc3QtcGFuZWwtYm9keS1jb250ZW50JykuZmluZCgnY2FudmFzLnBoeWxvY2FudmFzJyk7XG4gICAgICAgIHRyZWVNYW5pcHVsYXRpb25IYW5kbGVyKCRjYW52YXMpO1xuICAgIH0pO1xuXG59KTtcblxuLy8gVE8gRE86XG4vLyArIFNvcnQgYXNzZW1ibGllcyBzZWxlY3RlZCB0byB1cGxvYWQgYWxwaGFiZXRpY2FsbHkuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9