<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <meta name="description" content="">
        <meta name="keywords" content="">
        <meta name="author" content="">
        <base href="/"> 
        <title>Project</title>

        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
        <![endif]-->

        <!-- Bootstrap -->
        <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.0.1/css/bootstrap.min.css">
        <!-- Bootstrap Slider -->
        <!-- <link rel="stylesheet" href="/css/bootstrap-slider.css"> -->
        <!-- jQuery UI -->
        <link rel="stylesheet" href="//code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css">
        <!-- Bootstrap v3 datetimepicker widget -->
        <link rel="stylesheet" href="/bootstrap-datetimepicker/bootstrap-datetimepicker.min.css">
        <!-- Fonts -->
        <link href='http://fonts.googleapis.com/css?family=Roboto:400,100,300,500,700,900' rel='stylesheet' type='text/css'>
        <!-- Client -->
        <link href='/css/dev.css' rel='stylesheet' type='text/css'>
        <style>
            * {
                font-family: 'Roboto', sans-serif;
            }
            html, body {
              height: 100%;
              overflow: hidden;
            }
            #map {
                width: 100%;
                height: 100%;
            }
            .navigation {
                position: absolute;
                top: 28px;
                left: 90px;
                min-width: 800px;
            }
            .navigation > div  {
              float: left;
              margin-right: 10px;
            }
            .map-search {
                width: 400px;
                min-width: 200px;
            }
            .add-data {}
            .data-filters {}
            .user-account {}

            .upload-data {
              font-size: 14px;
              font-weight: 300;
            }
            .upload-data input {
              margin-top: 10px;
            }

            /*
            .upload-data .upload-drop-area {
              float: left;
              border: 3px solid #ccc;
              margin: 10px;
              height: 650px;
              width: 600px;
            }
            */
            /*
            .close {
              margin: 5px 10px;
            }
            */
            /*
            #graph {
                position: absolute;
                top: 78px;
                left: 550px;
                width: auto;
                height: auto;
                background-color: transparent;
            }
            */
            #graph {  
                position: absolute;
                width: auto;
                height: auto;
                left: 200px; 
                top :100px;
                border: 0px solid #555;  
                -webkit-box-shadow: 0px 0px 10px #999; 
                -moz-box-shadow: 0px 0px 10px #999; 
                box-shadow: 0px 0px 10px #999; 
                border-radius: 20px 20px 20px 20px;
                background-color :#aaa;
                z-index: 10;
            }
            #graph svg {
              float: left;
              background-color: #fff;
              border: 1px solid #fff;
              border-radius: 0 0 10px 10px;
              max-width: 1000px;
              max-height: 600px;
              overflow: scroll;
            }
            #graph * {
              -webkit-touch-callout: none;
              -webkit-user-select: none;
              -khtml-user-select: none;
              -moz-user-select: none;
              -ms-user-select: none;
              user-select: none;
            }
            .header {
              width: 100%;
              height: 50px;
              background-color: #eee;
              border-radius: 10px 10px 0 0;
              border-bottom: 1px solid #ddd;
              padding: 0 20px;
              line-height: 50px;
              font-weight: 400;
              cursor: move;
            }
            .hide-this {
              display: none;
            }












        .node circle {
            cursor: pointer;
            fill: #fff;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        .node text {
            font-size: 11px;
        }

        path.link {
            fill: none;
            stroke: #ccc;
            stroke-width: 1.5px;
        }

        #list {
                position: absolute;
                width: auto;
                height: auto;
                left: 200px; 
                top :100px;
                z-index: 10;
                background-color: #fff;
        }

        </style>
    </head>
    <body>

        <div id="map"></div>

        <div id="timeline"></div>

        <nav class="navigation">
          <div class="map-search">
            <div class="input-group">
              <input type="text" class="form-control" placeholder="Search">
              <span class="input-group-btn">
                <button class="btn btn-danger" type="button"><span class="glyphicon glyphicon-search"></span></button>
              </span>
            </div><!-- /input-group -->
          </div><!-- /.map-search -->

          <div class="add-data">
            <button class="btn btn-info" type="button" data-toggle="button"><span class="glyphicon glyphicon-plus"></span></button>
          </div><!-- /.add-data -->

          <div class="data-filters">
            <div class="btn-group" data-toggle="buttons">
              <!--<label class="btn btn-primary map-toggle-button">
                <input type="checkbox"> Map
              </label>-->
              <label class="btn btn-primary graph-toggle-button">
                <input type="checkbox"> Graph
              </label>
              <label class="btn btn-primary timeline-toggle-button">
                <input type="checkbox"> Timeline
              </label>
              <label class="btn btn-primary">
                <input type="checkbox"> Metadata
              </label>
            </div>
          </div><!-- /.data-filters -->

          <div class="user-account">
            <!-- Single button -->
            <div class="btn-group">
              <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                <span class="glyphicon glyphicon-user"></span> <span class="caret"></span>
              </button>
              <ul class="dropdown-menu" role="menu">
                <li><a href="#">My assemblies</a></li>
                <li><a href="#">My collections</a></li>
                <li><a href="#">Profile</a></li>
                <li class="divider"></li>
                <li><a href="#">Save Session</a></li>
                <li><a href="#">Sign Out</a></li>
              </ul>
            </div>
          </div><!-- /.user-account -->

          <div class="settings">
            <button type="button" class="btn btn-default"><span class="glyphicon glyphicon-cog"></span></button>
          </div><!-- /.settings -->
        </nav><!-- /.navigation -->

        <div id="graph" class="hide-this">
          <div class="header">Graph</div>
        </div>

        <div id="drop_zone">Drop files here</div>
        <output id="list"></output>




        <div class="wgst-panel assembly-upload-panel wgst-draggable">

          <header class="wgst-panel-header">
            <div class="assembly-upload-summary">
            You have selected <strong><span class="assembly-upload-total-number"></span> <span class="assembly-upload-total-number-label"></span></strong><span class="upload-multiple-assemblies-label"> in total</span>.<span class="upload-multiple-assemblies-label"> On average <span class="assembly-sequences-average"></span> <strong>contigs</strong> per assembly.</span>
            </div><!-- /.assembly-upload-summary -->
          </header>
          <div class="wgst-panel-body">

            <div class="assembly-navigator hide-this">
              <button class="nav-prev-item nav-item-button" disabled="disabled">
                <span class="glyphicon glyphicon-chevron-left"></span><span class="nav-item-button-label">Previous</span>
              </button><!-- /.nav-prev-item -->
              <div class="assembly-navigator-controls">
                <div class="assembly-list-header">
                  <div class="assembly-file-name"></div><!-- /.assembly-file-name -->
                  <button type="button" class="btn btn-default btn-xs"><span class="glyphicon glyphicon-remove"></span></button>
                  <div class="assembly-list-counter">
                    Assembly <span class="selected-assembly-counter">1</span> out of <span class="total-number-of-dropped-assemblies"></span>
                  </div><!-- /.assembly-list-counter -->
                </div><!-- /.assembly-list-header -->
                <div class="assembly-list-slider" ></div>
              </div><!-- /.assembly-navigator-controls -->
              <button class="nav-next-item nav-item-button">
                <span class="glyphicon glyphicon-chevron-right"></span><span class="nav-item-button-label">Next</span>
              </button><!-- /.nav-next-item -->
            </div><!-- /.assembly-navigator -->

            <div class="assembly-list-container">
              <ul></ul>
            </div><!-- /.assembly-list-container -->
          </div><!-- /.wgst-panel-body -->
          <footer class="wgst-panel-footer">

          <div class="adding-metadata-progress-container">

            <div class="progress-container">
              <div class="progress-label">
                <span class="progress-percentage-label">Your progress is </span>
                <span class="progress-percentage">10%</span>
                <span class="progress-hint">(Hint: fill in metadata for this assembly.)</span>
              </div>
              <div class="progress progress-striped">
                <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100" style="width: 10%">
                  <span class="sr-only">10% Complete (success)</span>
                </div>
              </div>
            </div><!-- /.progress-container -->

            <div class="upload-controls-container">
              <button type="button" class="btn btn-success upload-assemblies-button" disabled="disabled">Upload</button>
              <button type="button" class="btn btn-default">Cancel</button>
            </div><!-- /.upload-controls-container -->

          </div><!-- /.adding-metadata-progress-container -->

          <div class="uploading-assembly-progress-container">

            <div class="uploading-progress-container">
              <div class="progress-label">
                <span class="progress-percentage-label">Uploading progress is </span>
                <span class="progress-percentage">2%</span>
                <span class="progress-hint"></span>
              </div>
              <div class="uploaded-assembly-url">
                <div class="uploaded-assembly-url-label">
                  <span class="uploaded-assembly-process-status">Processing</span> your assemblies.
                  Visit this link<span class="uploaded-assembly-process-countdown-label"> in <span class="visit-url-seconds-number">2</span> seconds</span>:
                </div>
                <input type="text" class="form-control uploaded-assembly-url-input" val="">
              </div><!-- /.uploaded-assembly-url -->
              <div class="progress progress-striped active">
                <div class="progress-bar" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: 2%">
                  <span class="sr-only">2% Complete (success)</span>
                </div>
              </div>
            </div><!-- /.uploading-progress-container -->

          </div><!-- /.uploading-assembly-progress-container -->

          </footer><!-- /.wgst-panel-footer -->
        </div><!-- /.wgst-panel.assembly-upload-panel -->



        <div class="wgst-panel assembly-panel wgst-draggable">
          <header class="wgst-panel-header">
            Assembly id: <span class="assembly-id"></span>
          </header>
          <div class="wgst-panel-body">

            <div class="mlst-number">MLST-22</div>

            <h2>Resistance profile:</h2>

            <div class="assembly-resistance-profile-container">
              <table class="table assembly-resistance-profile">
                <tbody>
                  <tr>
                    <td class="resistance-fail">PCG</td>
                    <td class="resistance-fail">FOX</td>
                    <td class="resistance-fail">CIP</td>
                    <td class="resistance-fail">MOX</td>
                    <td class="resistance-unknown">AMI</td>
                    <td class="resistance-unknown">GEN</td>
                    <td class="resistance-unknown">TOB</td>
                    <td class="resistance-fail">ERY</td>
                    <td class="resistance-fail">CLI</td>
                    <td class="resistance-unknown">TET</td>
                    <td class="resistance-unknown">FUS</td>
                    <td class="resistance-fail">MUP</td>
                    <td class="resistance-unknown">RIF</td>
                    <td class="resistance-unknown">TRI</td>
                  </tr>
                </tbody>
              </table>
            </div><!-- /.assembly-resistance-profile-container -->

            <!--
            <table class="table assembly-resistance-profile">
              <thead>
                <tr>
                  <th>PCG</th>
                  <th>FOX</th>
                  <th>CIP</th>
                  <th>MOX</th>
                  <th>AMI</th>
                  <th>GEN</th>
                  <th>TOB</th>
                  <th>ERY</th>
                  <th>CLI</th>
                  <th>TET</th>
                  <th>FUS</th>
                  <th>MUP</th>
                  <th>RIF</th>
                  <th>TRI</th>
                </tr>
              </thead>
              <tbody>
                <td class="resistance-fail"><span class="glyphicon glyphicon-remove"></span></td>
                <td class="resistance-fail"><span class="glyphicon glyphicon-remove"></span></td>
                <td class="resistance-fail"><span class="glyphicon glyphicon-remove"></span></td>
                <td class="resistance-fail"><span class="glyphicon glyphicon-remove"></span></td>
                <td class="resistance-success"><span class="glyphicon glyphicon-ok"></span></td>
                <td class="resistance-success"><span class="glyphicon glyphicon-ok"></span></td>
                <td class="resistance-success"><span class="glyphicon glyphicon-ok"></span></td>
                <td class="resistance-fail"><span class="glyphicon glyphicon-remove"></span></td>
                <td class="resistance-fail"><span class="glyphicon glyphicon-remove"></span></td>
                <td class="resistance-success"><span class="glyphicon glyphicon-ok"></span></td>
                <td class="resistance-success"><span class="glyphicon glyphicon-ok"></span></td>
                <td class="resistance-fail"><span class="glyphicon glyphicon-remove"></span></td>
                <td class="resistance-success"><span class="glyphicon glyphicon-ok"></span></td>
                <td class="resistance-success"><span class="glyphicon glyphicon-ok"></span></td>
              </tbody>
            </table>
            -->

            <h2>Scores:</h2>

            <table class="table assembly-data-table">
              <colgroup>
                <col class="col-target-fp">
                <col class="col-score">
              </colgroup>
              <thead>
                <tr>
                  <th>Reference Strain</th>
                  <th>Score</th>
                </tr>
              </thead>
              <tbody>
              </tbody>
            </table>            

          </div><!-- /.wgst-panel-body -->
          <footer class="wgst-panel-footer">

            Uploaded <span class="assembly-upload-datetime"></span>.
            <!-- Assembly footer -->

          </footer><!-- /.wgst-panel-footer -->
        </div><!-- /.wgst-panel.assembly-upload-panel -->





        <!-- <div id="log"></div> -->

        <script>
/*          function handleFileSelect(evt) {
            evt.stopPropagation();
            evt.preventDefault();

            var files = evt.dataTransfer.files; // FileList object.

            // files is a FileList of File objects. List some properties.
            var output = [];
            for (var i = 0, f; f = files[i]; i++) {
              output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                          f.size, ' bytes, last modified: ',
                          f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                          '</li>');
            }
            document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
          }

          function handleDragOver(evt) {
            evt.stopPropagation();
            evt.preventDefault();
            evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
          }

          // Setup the dnd listeners.
          var dropZone = document.getElementsByTagName('body')[0];//document.getElementById('drop_zone');
          dropZone.addEventListener('dragover', handleDragOver, false);
          dropZone.addEventListener('drop', handleFileSelect, false);*/
        </script>

        <!-- jQuery -->
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
        <!-- jQuery UI -->
        <script src="http://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"></script>
        <!-- Angular -->
        <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.min.js"></script>
        <!-- Bootstrap -->
        <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.1/js/bootstrap.min.js"></script>
        <!-- Bootstrap Slider -->
        <!-- <script src="/js/bootstrap-slider.min.js"></script> -->
        <!-- Google Maps v3 API with Places library -->
        <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&libraries=places"></script>
        <!-- D3 -->
        <script src="http://cdnjs.cloudflare.com/ajax/libs/d3/3.3.9/d3.min.js" charset="utf-8"></script>
        <!-- Modernizr -->
        <script src="http://cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js"></script>
        <!-- Moment.js -->
        <script src="http://cdnjs.cloudflare.com/ajax/libs/moment.js/2.4.0/moment.min.js"></script>
        <!-- Bootstrap v3 datetimepicker widget -->
        <script src="/bootstrap-datetimepicker/bootstrap-datetimepicker.min.js"></script>        
        <script>

          /*
            The name "undefined" is not guaranteed to have the type "undefined".
            It can be assigned other values, like null or 1.
            To make sure that undefined is undefined in that context, use anonymous self-invoking function.

            However in modern browsers "undefined" is read-only.
          */
          (function(undefined){
            'use strict';

            // Flag requested assembly
            window.requestedAssembly = undefined;

            // If user requested individual assembly, e.g.: /assembly/FINGERPRINT_COMPARISON_154273030677208533352573798127987081488
            <% if (typeof requestedAssemblyObject !== 'undefined') { %>
              window.requestedAssembly = <%- requestedAssemblyObject %>;
            <% } %>

          })();

        </script>

        <!-- Client -->
        <script src="/js/client.js"></script>
        <script>

          /* Sample D3 Tree code */
          function tree() {
              var _chart = {};

              var _width = 1000, _height = 600,
                      _margins = {top: 30, left: 120, right: 30, bottom: 30},
                      _svg,
                      _nodes,
                      _i = 0,
                      _tree,
                      _diagonal,
                      _bodyG;

              _chart.render = function () {
                  if (!_svg) {
                      _svg = d3.select("#graph").append("svg")
                              .attr("height", _height)
                              .attr("width", _width);
                  }

                  renderBody(_svg);
              };

              function renderBody(svg) {
                  if (!_bodyG) {
                      _bodyG = svg.append("g")
                  .attr("class", "body")
                  .attr("transform", function (d) {
                    return "translate(" + _margins.left 
                      + "," + _margins.top + ")";
                  });
                  }

                  _tree = d3.layout.tree()
                          .size([
                    (_height - _margins.top - _margins.bottom), 
                    (_width - _margins.left - _margins.right)
                  ]);

                  _diagonal = d3.svg.diagonal()
                          .projection(function (d) {
                              return [d.y, d.x];
                          });

                  _nodes.x0 = (_height - _margins.top - _margins.bottom) / 2;
                  _nodes.y0 = 0;

                  render(_nodes);
              }

              function render(source) {
                  var nodes = _tree.nodes(_nodes).reverse();

                  renderNodes(nodes, source);

                  renderLinks(nodes, source);
              }

              function renderNodes(nodes, source) {
                  nodes.forEach(function (d) {
                      d.y = d.depth * 180;
                  });

                  var node = _bodyG.selectAll("g.node")
                          .data(nodes, function (d) {
                              return d.id || (d.id = ++_i);
                          });

                  var nodeEnter = node.enter().append("svg:g")
                          .attr("class", "node")
                          .attr("transform", function (d) {
                              return "translate(" + source.y0 
                      + "," + source.x0 + ")";
                          })
                          .on("click", function (d) {
                              toggle(d);
                              render(d);
                          });

                  nodeEnter.append("svg:circle")
                          .attr("r", 1e-6)
                          .style("fill", function (d) {
                              return d._children ? "lightsteelblue" : "#fff";
                          });

                  var nodeUpdate = node.transition()
                          .attr("transform", function (d) {
                              return "translate(" + d.y + "," + d.x + ")";
                          });

                  nodeUpdate.select("circle")
                          .attr("r", 4.5)
                          .style("fill", function (d) {
                              return d._children ? "lightsteelblue" : "#fff";
                          });

                  var nodeExit = node.exit().transition()
                          .attr("transform", function (d) {
                              return "translate(" + source.y 
                      + "," + source.x + ")";
                          })
                          .remove();

                  nodeExit.select("circle")
                          .attr("r", 1e-6);

                  renderLabels(nodeEnter, nodeUpdate, nodeExit);

                  nodes.forEach(function (d) {
                      d.x0 = d.x;
                      d.y0 = d.y;
                  });
              }

              function renderLabels(nodeEnter, nodeUpdate, nodeExit) {
                  nodeEnter.append("svg:text")
                          .attr("x", function (d) {
                              return d.children || d._children ? -10 : 10;
                          })
                          .attr("dy", ".35em")
                          .attr("text-anchor", function (d) {
                              return d.children || d._children ? "end" : "start";
                          })
                          .text(function (d) {
                              return d.name;
                          })
                          .style("fill-opacity", 1e-6);

                  nodeUpdate.select("text")
                          .style("fill-opacity", 1);

                  nodeExit.select("text")
                          .style("fill-opacity", 1e-6);
              }

              function renderLinks(nodes, source) {
                  var link = _bodyG.selectAll("path.link")
                          .data(_tree.links(nodes), function (d) {
                              return d.target.id;
                          });

                  link.enter().insert("svg:path", "g")
                          .attr("class", "link")
                          .attr("d", function (d) {
                              var o = {x: source.x0, y: source.y0};
                              return _diagonal({source: o, target: o});
                          });

                  link.transition()
                          .attr("d", _diagonal);

                  link.exit().transition()
                          .attr("d", function (d) {
                              var o = {x: source.x, y: source.y};
                              return _diagonal({source: o, target: o});
                          })
                          .remove();
              }

              function toggle(d) {
                  if (d.children) {
                      d._children = d.children;
                      d.children = null;
                  } else {
                      d.children = d._children;
                      d._children = null;
                  }
              }

              function toggleAll(d) {
                  if (d.children) {
                      d.children.forEach(toggleAll);
                      toggle(d);
                  }
              }

              _chart.width = function (w) {
                  if (!arguments.length) return _width;
                  _width = w;
                  return _chart;
              };

              _chart.height = function (h) {
                  if (!arguments.length) return _height;
                  _height = h;
                  return _chart;
              };

              _chart.margins = function (m) {
                  if (!arguments.length) return _margins;
                  _margins = m;
                  return _chart;
              };

              _chart.nodes = function (n) {
                  if (!arguments.length) return _nodes;
                  _nodes = n;
                  return _chart;
              };

              return _chart;
          }

          var chart = tree();

          function simpleFlare() {
            chart.nodes(JSON.parse('{"name":"flare","children":[{"name":"analytics","children":[{"name":"cluster","children":[{"name":"AgglomerativeCluster","size":3938},{"name":"CommunityStructure","size":3812},{"name":"MergeEdge","size":743}]},{"name":"graph","children":[{"name":"BetweennessCentrality","size":3534},{"name":"LinkDistance","size":5731}]},{"name":"optimization","children":[{"name":"AspectRatioBanker","size":7074}]}]},{"name":"animate","children":[{"name":"Easing","size":17010},{"name":"FunctionSequence","size":5842},{"name":"interpolate","children":[{"name":"ArrayInterpolator","size":1983},{"name":"ColorInterpolator","size":2047},{"name":"DateInterpolator","size":1375},{"name":"Interpolator","size":8746},{"name":"MatrixInterpolator","size":2202},{"name":"NumberInterpolator","size":1382},{"name":"ObjectInterpolator","size":1629},{"name":"PointInterpolator","size":1675},{"name":"RectangleInterpolator","size":2042}]},{"name":"ISchedulable","size":1041},{"name":"Parallel","size":5176},{"name":"Pause","size":449},{"name":"Scheduler","size":5593},{"name":"Sequence","size":5534},{"name":"Transition","size":9201},{"name":"Transitioner","size":19975},{"name":"TransitionEvent","size":1116},{"name":"Tween","size":6006}]}]}')).render();
          }

          /* Main code */
          $(function(){

            simpleFlare();

            /*
            var map;
            function initialize() {
              var mapOptions = {
                zoom: 8,
                center: new google.maps.LatLng(51.511214, -0.119824),
                mapTypeId: google.maps.MapTypeId.ROADMAP
              };
              map = new google.maps.Map(document.getElementById('map'),
                  mapOptions);
            }

            google.maps.event.addDomListener(window, 'load', initialize);
            */

            // Popover
            $('.add-data button').popover({
              html: true,
              placement: 'bottom',
              title: 'Add your data',
              content: '<div class="upload-data"><span>You can drag and drop your CSV files anywhere on the map.</span><input type="file" id="exampleInputFile"></div>'
            });

            // Toggle timeline
            $('.timeline-toggle-button').on('click', function(){
              if ($(this).hasClass('active')) {
                $('#timeline').hide();
              } else {
                $('#timeline').css('bottom', '0');
                $('#timeline').show();
              }
            });

            // Toggle graph
            $('.graph-toggle-button').on('click', function(){
              if ($(this).hasClass('active')) {
                $('#graph').hide();
              } else {
                $('#graph').show();
              }
            });

            // Toggle map
            $('.map-toggle-button').on('click', function(){
              if ($(this).hasClass('active')) {
                $('#map').hide();
              } else {
                $('#map').show();
              }
            });

            var doc = document;
            var myCanvas = doc.getElementById('graph').getElementsByTagName('div')[0];

            if (myCanvas.addEventListener) {
                myCanvas.addEventListener("mousedown", function(){ return drag(event, doc.getElementById('graph')); }, false);
            } else if (myCanvas.attachEvent) {
                myCanvas.attachEvent("onmousedown", drag(doc.getElementById('graph')));
            } else {
                myCanvas.setAttribute("onmousedown", drag(doc.getElementById('graph')));
            }

            var drag = function(e, elementToDrag) {
                var mousePosition = [0, 0];
                if (!e) var e = window.event;
                var dragObj = elementToDrag;//e.target ? e.target : e.srcElement;

                if (e.button == 0 || e.button == 1) {
                    if (window.attachEvent) {
                        mousePosition[0] = e.offsetX;
                        mousePosition[1] = e.offsetY;
                        e.returnValue = false;
                    } else {
                        mousePosition[0] = e.offsetX || e.layerX;
                        mousePosition[1] = e.offsetY || e.layerY;
                        e.preventDefault();
                    }

                    document.body.onmousemove = function(e) {
                        if (!e) var e = window.event;
                        dragObj.style.left = e.clientX - mousePosition[0] + "px";
                        dragObj.style.top = e.clientY - mousePosition[1] + "px";
                    }

                    document.onmouseup = function() {
                        document.body.onmousemove = null;
                        document.body.onselectstart = null;
                    }
                }

                document.body.onselectstart = function() {
                    return false;
                };
            };

          });
        </script>
    </body>
</html>