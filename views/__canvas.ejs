<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <meta name="description" content="">
        <meta name="keywords" content="">
        <meta name="author" content="">
        <base href="/"> 
        <title>WGST.net</title>

        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
          <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
        <![endif]-->

        <!-- Bootstrap -->
        <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.0.1/css/bootstrap.min.css">
        <!-- Bootstrap Slider -->
        <!-- <link rel="stylesheet" href="/css/bootstrap-slider.css"> -->
        <!-- jQuery UI -->
        <link rel="stylesheet" href="//code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css">
        <!-- Bootstrap v3 datetimepicker widget -->
        <link rel="stylesheet" href="/bootstrap-datetimepicker/bootstrap-datetimepicker.min.css">
        <!-- Fonts -->
        <link href='http://fonts.googleapis.com/css?family=Roboto:400,100,300,500,700,900' rel='stylesheet' type='text/css'>
        <!-- Client -->
        <!--<link href='/css/dev.css' rel='stylesheet' type='text/css'>-->
    </head>
    <body>

        <div id="pCanvas"></div>

        <!-- jQuery -->
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
        <!-- PhyloCanvas -->
        <script src="/js/PhyloCanvas.js"></script>
        <!-- Init -->       
        <script>

            var widget,
                colours = [
                    'rgba(255,0,0,1)',
                    'rgba(0,255,0,1)',
                    'rgba(0,0,255,1)',
                    'rgba(255,255,0,1)',
                    'rgba(255,0,255,1)',
                    'rgba(0,255,255,1)',
                    'rgba(200,200,200,1)',

                    'rgba(100,0,0,1)',
                    'rgba(0,100,0,1)',
                    'rgba(0,0,100,1)',
                    'rgba(100,100,0,1)',
                    'rgba(100,0,100,1)',
                    'rgba(0,100,100,1)',
                    'rgba(100,100,0,1)',

                    'rgba(255,100,100,1)',
                    'rgba(100,255,100,1)',
                    'rgba(100,100,255,1)',
                    'rgba(255,255,100,1)',
                    'rgba(255,100,255,1)',
                    'rgba(100,255,255,1)',
                    'rgba(50,50,50,1)'
                ],
                n = 450,
                s = 500 / n,
                headerColours = []; // Header Colours
            //3 x 6 colours ... red green blue yellow purple blue blk/gray

            function init() {

                document.getElementById('pCanvas').style.width = (document.body.offsetWidth - 10) + "px";
                document.getElementById('pCanvas').style.height = document.body.offsetHeight + "px";

                widget = new PhyloCanvas.Tree(document.getElementById('pCanvas'));
                widget.nodeRenderers["bar"] = function(node) {

                    var offset = (node.tree.maxBranchLength * node.tree.branchScalar) + 50,
                        last = -1,
                        length = 0,
                        start = 0;

                    node.tree.nodeRenderers[node.data.originalShape](node);

                    if (node.selected) {
                        node.canvas.lineWidth = 5;
                        node.canvas.strokeRect(offset - (node.totalBranchLength * node.tree.branchScalar), -node.radius, n * s, node.radius * 2);
                    }

                    if (!node.data.hgs) {
                        return;
                    };

                    for (var i = 0; i < node.data.hgs.length; i++) {
                        if (last === -1 && node.data.hgs[i] !== "0") {
                            last = headerColours[i];
                            length = 1;
                            start = i;
                        } else if (node.data.hgs[i] !== "0"  && last === headerColours[i]) {
                            length++;
                        } else if (node.data.hgs[i] === "0" &&  last >= 0) {
                            node.canvas.lineWidth = 0;
                            node.canvas.fillStyle = colours[last];
                            node.canvas.fillRect(offset - (node.totalBranchLength * node.tree.branchScalar) + start * s, -node.radius , length * s, node.radius * 2);
                            node.canvas.lineWidth = 1;
                            length = 0;
                            last = -1;
                        }
                    }
                }

                widget.AJAX("/data/header.txt", 'GET', {}, headerCallback);
                widget.load("/data/st22_2.nwk", "ST22", afterLoad);
                widget.treeType = "rectangular";
            }

            function headerCallback(xhr, opts, scope) {
                var headers = xhr.responseText.split(','),
                    c = -1,
                    curr = -1;

                for (var h = 0; h < headers.length; h++) {
                    if (curr != headers[h]) {
                        c++;
                        curr = headers[h];
                    }
                    headerColours[h] = c % colours.length;
                }
            }

            function dataCallback(xhr, opts, scope) {
                var data = xhr.responseText.split('\n');

                for (var d = 0 ; d < data.length; d++) {
                    var a = data[d].split(",");
                    if (widget.branches[a[0]]) {
                        widget.branches[a[0]].data["hgs"] = a[1];
                    }
                }

                widget.draw();
            }

            function afterLoad() {
                
                widget.AJAX("/data/fin.txt", 'GET', {}, dataCallback);

                for (var i = 0; i < widget.leaves.length; i ++) {
                    widget.leaves[i].data.originalShape = widget.leaves[i].nodeShape; 
                    widget.leaves[i].nodeShape = "bar";
                    widget.leaves[i].radius *= 2;
                }

                widget.offsetx -= 250;
                widget.draw();
            } 

            window.onresize = function(e) {
                widget.setSize(window.innerWidth - 20, window.innerHeight - 20);
            }

            $(function(){

                init();

                function backingScale(context) {
                    if ('devicePixelRatio' in window) {
                        if (window.devicePixelRatio > 1) {
                            return window.devicePixelRatio;
                        }
                    }
                    return 1;
                }

                var can = $('canvas'); //document.getElementById("myCanvas");
                var ctx = can.getContext("2d");
                var scaleFactor = backingScale(ctx);
                
                if (scaleFactor > 1) {
                    can.width = can.width * scaleFactor;
                    can.height = can.height * scaleFactor;
                    // update the context for the new canvas scale
                    var ctx = can.getContext("2d");
                }

            });

        </script>
    </body>
</html>